{"version":3,"file":"channelsMessagesPull.js","sources":["../node_modules/@babel/runtime-corejs2/core-js/array/is-array.js","../node_modules/@babel/runtime-corejs2/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime-corejs2/core-js/array/from.js","../node_modules/@babel/runtime-corejs2/core-js/is-iterable.js","../node_modules/@babel/runtime-corejs2/helpers/iterableToArray.js","../node_modules/@babel/runtime-corejs2/helpers/nonIterableSpread.js","../node_modules/@babel/runtime-corejs2/helpers/toConsumableArray.js","../node_modules/@babel/runtime-corejs2/core-js/promise.js","../node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator.js","../src/store/modules/channelsMessagesPull/actions.js","../src/store/modules/channelsMessagesPull/mutations.js","../src/store/modules/channelsMessagesPull/index.js"],"sourcesContent":["module.exports = require(\"core-js/library/fn/array/is-array\");","var _Array$isArray = require(\"../core-js/array/is-array\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (_Array$isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","module.exports = require(\"core-js/library/fn/array/from\");","module.exports = require(\"core-js/library/fn/is-iterable\");","var _Array$from = require(\"../core-js/array/from\");\n\nvar _isIterable = require(\"../core-js/is-iterable\");\n\nfunction _iterableToArray(iter) {\n  if (_isIterable(Object(iter)) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return _Array$from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","module.exports = require(\"core-js/library/fn/promise\");","var _Promise = require(\"../core-js/promise\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    _Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new _Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","export default function ({ Vue, LocalStorage, errorHandler }) {\n  function getParams (state) {\n    let params = {}\n    if (state.limit) {\n      params.limit_count = state.limit\n    }\n    if (state.from) {\n      params.curr_key = state.from\n    }\n    return params\n  }\n\n  function errorsCheck (data) {\n    if (data.errors) {\n      data.errors.forEach((error) => {\n        let errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    }\n  }\n\n  async function getCols ({ state, commit, rootState }) {\n    commit('reqStart')\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let cols = [],\n          colsFromStorage = LocalStorage.getItem(state.name)\n        if (colsFromStorage && colsFromStorage[state.active] && colsFromStorage[state.active]) {\n          /* remove after sometime 12.07.19 */\n          colsFromStorage[state.active].forEach((col) => {\n            if (col.name === 'timestamp') {\n              let locale = new Date().toString().match(/([-\\+][0-9]+)\\s/)[1]\n              col.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n            }\n          })\n          cols = colsFromStorage[state.active]\n        } else {\n          let protocolIdResp = await Vue.connector.gw.getChannels(state.active, { fields: 'protocol_id' })\n          let protocolIdData = protocolIdResp.data\n          errorsCheck(protocolIdData)\n          if (protocolIdData.result && protocolIdData.result.length && protocolIdData.result[0].protocol_id) {\n            let colsResp = await Vue.connector.gw.getProtocols(protocolIdData.result[0].protocol_id, { fields: 'message_parameters' })\n            let colsData = colsResp.data\n            errorsCheck(colsData)\n            colsData.result[0].message_parameters.forEach(col => {\n              let colItem = {\n                name: col.name,\n                width: 160,\n                display: true,\n                description: col.info\n              }\n              if (colItem.name === 'timestamp') {\n                let locale = new Date().toString().match(/([-\\+][0-9]+)\\s/)[1]\n                colItem.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n              }\n              cols.push(colItem)\n            })\n          }\n        }\n        commit('setCols', cols)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function getData ({ state, commit, rootState }) {\n    let data = {}\n    if (rootState.token && state.active) {\n      try {\n        let resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(getParams(state)) })\n        data = resp.data\n        errorsCheck(data)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        data = {\n          errors: [e]\n        }\n      }\n    }\n    return data\n  }\n\n  async function get ({ state, commit, rootState }) {\n    commit('reqStart')\n    Vue.set(state, 'isLoading', true)\n    let data = await getData({ state, commit, rootState })\n    if (data.result) {\n      commit('setMessages', data.result)\n      commit('setTo', data.next_key)\n    }\n    Vue.set(state, 'isLoading', false)\n  }\n\n  let messagesBuffer = [],\n    loopId = 0\n  function initRenderLoop (state, commit) {\n    return setInterval(() => {\n      if (messagesBuffer.length) {\n        if (state.mode === 1) {\n          commit('setMessages', [...messagesBuffer])\n        }\n        messagesBuffer = []\n      }\n    }, 500)\n  }\n\n  async function pollingGet ({ state, commit, rootState }) {\n    commit('reqStart')\n    let data = await getData({ state, commit, rootState })\n    if (data.result) {\n      commit('setMessages', data.result)\n      commit('setTo', data.next_key)\n    }\n    loopId = initRenderLoop(state, commit)\n    await Vue.connector.subscribeMessagesChannels(state.active, '+', (message) => {\n      if (state.mode === 1) {\n        messagesBuffer.push(JSON.parse(message))\n      } else {\n        commit('setNewMessagesCount', state.newMessagesCount + 1)\n        commit('setRtMessagesBuff', JSON.parse(message))\n      }\n    }, { rh: 2 })\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    if (loopId) { clearInterval(loopId) }\n    await Vue.connector.unsubscribeMessagesChannels(state.active, '+')\n  }\n\n  return {\n    get,\n    pollingGet,\n    getCols,\n    unsubscribePooling\n  }\n}\n","export default function ({ Vue, LocalStorage, filterHandler, newMessagesInterseptor }) {\n  function setMessages (state, data) {\n    if (data && data.length) {\n      if (state.reverse) {\n        data.reverse()\n      }\n      if (state.mode === 1) {\n        if (state.filter && filterHandler) {\n          data = filterHandler(state.filter, data)\n        }\n      }\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      let messages = state.messages.concat(data)\n      if (state.limit && state.mode === 1 && messages.length >= state.limit + (state.limit * 0.1)) { // rt limiting\n        let count = (messages.length - 1) - (state.limit - 1)\n        messages = messages.slice(count)\n        Vue.set(state, 'selected', state.selected.map((index) => index - count))\n      }\n      Vue.set(state, 'messages', messages)\n    }\n  }\n\n  function clearMessages (state) {\n    Vue.set(state, 'messages', [])\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      if (state.mode === 1) {\n        if (state.filter) {\n          state.messages.push({ 'x-flespi-filter-prev': state.filter })\n        }\n        if (value) {\n          state.messages.push({ 'x-flespi-filter-next': value })\n        }\n      }\n      Vue.set(state, 'filter', value)\n    }\n  }\n\n  function setMode (state, mode) {\n    switch (mode) {\n      case 0: {\n        state.from = 0\n        clearMessages(state)\n        break\n      }\n      case 1: {\n        let now = Date.now()\n        state.from = Math.ceil((now - 4000 - 1000) / 1000)\n        state.to = state.from\n        clearMessages(state)\n        state.newMessagesCount = 0\n        Vue.set(state, 'messages', state.rtMessagesBuff)\n        clearRtMessagesBuff(state)\n        break\n      }\n    }\n    Vue.set(state, 'mode', mode)\n  }\n\n  function setFrom (state, from) {\n    Vue.set(state, 'from', from)\n  }\n\n  function setTo (state, to) {\n    Vue.set(state, 'to', to)\n  }\n\n  function reqStart () {\n    if (DEV) {\n      console.log('Start Request Channels messages')\n    }\n  }\n\n  function setActive (state, id) {\n    state.newMessagesCount = 0\n    Vue.set(state, 'active', id)\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.mode = null\n    state.from = 0\n    state.to = 0\n    state.limit = 1000\n    await Vue.connector.unsubscribeMessagesChannels(state.active, '+')\n  }\n\n  function setCols (state, cols) {\n    let colsFromStorage = LocalStorage.getItem(state.name)\n    if (!colsFromStorage) {\n      colsFromStorage = {}\n    }\n    colsFromStorage[state.active] = cols\n    LocalStorage.set(state.name, colsFromStorage)\n    Vue.set(state, 'cols', cols)\n  }\n\n  let updateCols = setCols\n\n  function setNewMessagesCount (state, count) {\n    Vue.set(state, 'newMessagesCount', count)\n  }\n\n  function setOffline (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      setMessages(state, [{ __connectionStatus: 'offline', timestamp: Date.now() / 1000 }])\n    }\n    state.offline = true\n  }\n\n  function setReconnected (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      setMessages(state, [{ __connectionStatus: 'reconnected', timestamp: Date.now() / 1000 }])\n    }\n    state.offline = false\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setRtMessagesBuff (state, message) {\n    if (state.rtMessagesBuff.length >= 100) {\n      state.rtMessagesBuff.splice(0, 1)\n    }\n    state.rtMessagesBuff.push(message)\n  }\n\n  function clearRtMessagesBuff (state) {\n    Vue.set(state, 'rtMessagesBuff', [])\n  }\n\n  return {\n    setOffline,\n    setReconnected,\n    setMessages,\n    clearMessages,\n    setLimit,\n    setFilter,\n    setMode,\n    setFrom,\n    setTo,\n    reqStart,\n    clear,\n    setActive,\n    setCols,\n    updateCols,\n    setNewMessagesCount,\n    setSelected,\n    clearSelected,\n    setRtMessagesBuff,\n    clearRtMessagesBuff\n  }\n}\n","import getActions from './actions'\nimport getMutations from './mutations'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, filterHandler, newMessagesInterseptor }) {\n  let actions = getActions({ Vue, LocalStorage, errorHandler }),\n    mutations = getMutations({ Vue, LocalStorage, filterHandler, newMessagesInterseptor })\n\n  const state = {\n    name: name,\n    isLoading: false,\n    active: 0,\n    messages: [],\n    filter: '',\n    mode: null,\n    from: 0,\n    to: 0,\n    limit: 1000,\n    cols: [],\n    newMessagesCount: 0,\n    offline: false,\n    selected: [],\n    rtMessagesBuff: []\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n"],"names":["require$$0","arr","_Array$isArray","i","arr2","Array","length","iter","_isIterable","Object","prototype","toString","call","_Array$from","TypeError","arrayWithoutHoles","iterableToArray","nonIterableSpread","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","_Promise","then","fn","self","this","args","arguments","apply","err","undefined","Vue","LocalStorage","errorHandler","errorsCheck","data","errors","forEach","errObject","Error","reason","state","commit","rootState","token","active","set","cols","colsFromStorage","getItem","name","col","locale","Date","match","addition","slice","connector","gw","getChannels","fields","protocolIdResp","protocolIdData","result","protocol_id","getProtocols","colsResp","colsData","message_parameters","colItem","width","display","description","push","DEV","console","log","getData","getChannelsMessages","JSON","stringify","params","limit","limit_count","from","curr_key","resp","next_key","messagesBuffer","loopId","initRenderLoop","setInterval","mode","subscribeMessagesChannels","message","parse","newMessagesCount","rh","clearInterval","unsubscribeMessagesChannels","get","pollingGet","getCols","unsubscribePooling","filterHandler","newMessagesInterseptor","setMessages","reverse","filter","messages","concat","count","selected","map","index","clearMessages","clearSelected","to","setCols","clearRtMessagesBuff","setOffline","needPostOfflineMessage","__connectionStatus","timestamp","now","offline","setReconnected","setLimit","setFilter","setMode","Math","ceil","rtMessagesBuff","setFrom","setTo","reqStart","clear","setActive","id","updateCols","setNewMessagesCount","setSelected","indexes","setRtMessagesBuff","splice","namespaced","isLoading","actions","getActions","mutations","getMutations"],"mappings":"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"}