{"version":3,"file":"channelsMessagesPull.js","sources":["../node_modules/@babel/runtime-corejs2/core-js/array/is-array.js","../node_modules/@babel/runtime-corejs2/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime-corejs2/core-js/array/from.js","../node_modules/@babel/runtime-corejs2/core-js/is-iterable.js","../node_modules/@babel/runtime-corejs2/helpers/iterableToArray.js","../node_modules/@babel/runtime-corejs2/helpers/nonIterableSpread.js","../node_modules/@babel/runtime-corejs2/helpers/toConsumableArray.js","../node_modules/@babel/runtime-corejs2/core-js/promise.js","../node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator.js","../src/store/modules/channelsMessagesPull/actions.js","../src/store/modules/channelsMessagesPull/mutations.js","../src/store/modules/channelsMessagesPull/index.js"],"sourcesContent":["module.exports = require(\"core-js/library/fn/array/is-array\");","var _Array$isArray = require(\"../core-js/array/is-array\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (_Array$isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","module.exports = require(\"core-js/library/fn/array/from\");","module.exports = require(\"core-js/library/fn/is-iterable\");","var _Array$from = require(\"../core-js/array/from\");\n\nvar _isIterable = require(\"../core-js/is-iterable\");\n\nfunction _iterableToArray(iter) {\n  if (_isIterable(Object(iter)) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return _Array$from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","module.exports = require(\"core-js/library/fn/promise\");","var _Promise = require(\"../core-js/promise\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    _Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new _Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","export default function ({ Vue, LocalStorage, errorHandler }) {\n  function getParams (state) {\n    let params = {}\n    if (state.limit) {\n      params.limit_count = state.limit\n    }\n    if (state.from) {\n      params.curr_key = state.from\n    }\n    return params\n  }\n\n  function errorsCheck (data) {\n    if (data.errors) {\n      data.errors.forEach((error) => {\n        let errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    }\n  }\n\n  async function getCols ({ state, commit, rootState }, sysColsNeedInitFlags) {\n    commit('reqStart')\n    const needActions = sysColsNeedInitFlags.actions\n    const needEtc = sysColsNeedInitFlags.etc\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let cols = [],\n          colsFromStorage = LocalStorage.getItem(state.name)\n        if (colsFromStorage && colsFromStorage[state.active] && colsFromStorage[state.active]) {\n          /* remove after sometime 12.07.19 */\n          colsFromStorage[state.active].forEach((col) => {\n            if (col.name === 'timestamp') {\n              let locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n              col.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n            }\n          })\n          cols = colsFromStorage[state.active]\n          /* adding sys cols after migration. 30.01.20 */\n          if (!cols[0].__dest && !cols[cols.length - 1].__dest) {\n            cols.unshift({ name: 'actions', width: 50, display: needActions, __dest: 'action' })\n            cols.push({ name: 'etc', width: 150, display: needEtc, __dest: 'etc' })\n          }\n        } else {\n          let protocolIdResp = await Vue.connector.gw.getChannels(state.active, { fields: 'protocol_id' })\n          let protocolIdData = protocolIdResp.data\n          errorsCheck(protocolIdData)\n          if (protocolIdData.result && protocolIdData.result.length && protocolIdData.result[0].protocol_id) {\n            let colsResp = await Vue.connector.gw.getProtocols(protocolIdData.result[0].protocol_id, { fields: 'message_parameters' })\n            let colsData = colsResp.data\n            errorsCheck(colsData)\n            colsData.result[0].message_parameters.forEach(col => {\n              let colItem = {\n                name: col.name,\n                width: 160,\n                display: state.defaultColsNames.includes(col.name),\n                description: col.info\n              }\n              if (colItem.name === 'timestamp') {\n                let locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n                colItem.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n              }\n              cols.push(colItem)\n            })\n          }\n          cols.unshift({ name: 'actions', width: 50, display: needActions, __dest: 'action' })\n          cols.push({ name: 'etc', width: 150, display: needEtc, __dest: 'etc' })\n        }\n        commit('setCols', cols)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function getData ({ state, commit, rootState }) {\n    let data = {}\n    if (rootState.token && state.active) {\n      try {\n        let resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(getParams(state)) })\n        data = resp.data\n        errorsCheck(data)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        data = {\n          errors: [e]\n        }\n      }\n    }\n    return data\n  }\n\n  async function get ({ state, commit, rootState }) {\n    commit('reqStart')\n    Vue.set(state, 'isLoading', true)\n    let data = await getData({ state, commit, rootState })\n    if (data.result) {\n      commit('setMessages', data.result)\n      commit('setTo', data.next_key)\n    }\n    Vue.set(state, 'isLoading', false)\n  }\n\n  let messagesBuffer = [],\n    loopId = 0\n  function initRenderLoop (state, commit) {\n    return setInterval(() => {\n      if (messagesBuffer.length) {\n        if (state.mode === 1) {\n          commit('setMessages', [...messagesBuffer])\n        }\n        messagesBuffer = []\n      }\n    }, 500)\n  }\n\n  async function pollingGet ({ state, commit, rootState }) {\n    commit('reqStart')\n    let data = await getData({ state, commit, rootState })\n    if (data.result) {\n      commit('setMessages', data.result)\n      commit('setTo', data.next_key)\n    }\n    loopId = initRenderLoop(state, commit)\n    await Vue.connector.subscribeMessagesChannels(state.active, '+', (message) => {\n      if (state.mode === 1) {\n        messagesBuffer.push(JSON.parse(message))\n      } else {\n        commit('setNewMessagesCount', state.newMessagesCount + 1)\n        commit('setRtMessagesBuff', JSON.parse(message))\n      }\n    }, { rh: 2 })\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    if (loopId) { clearInterval(loopId) }\n    await Vue.connector.unsubscribeMessagesChannels(state.active, '+')\n  }\n\n  return {\n    get,\n    pollingGet,\n    getCols,\n    unsubscribePooling\n  }\n}\n","export default function ({ Vue, LocalStorage, filterHandler, newMessagesInterseptor }) {\n  function setMessages (state, data) {\n    if (data && data.length) {\n      if (state.reverse) {\n        data.reverse()\n      }\n      if (state.mode === 1) {\n        if (state.filter && filterHandler) {\n          data = filterHandler(state.filter, data)\n        }\n      }\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      let messages = state.messages.concat(data)\n      if (state.limit && state.mode === 1 && messages.length >= state.limit + (state.limit * 0.1)) { // rt limiting\n        let count = (messages.length - 1) - (state.limit - 1)\n        messages = messages.slice(count)\n        Vue.set(state, 'selected', state.selected.map((index) => index - count))\n      }\n      Vue.set(state, 'messages', messages)\n    }\n  }\n\n  function clearMessages (state) {\n    Vue.set(state, 'messages', [])\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      if (state.mode === 1) {\n        if (state.filter) {\n          state.messages.push({ 'x-flespi-filter-prev': state.filter })\n        }\n        if (value) {\n          state.messages.push({ 'x-flespi-filter-next': value })\n        }\n      }\n      Vue.set(state, 'filter', value)\n    }\n  }\n\n  function setMode (state, mode) {\n    switch (mode) {\n      case 0: {\n        state.from = 0\n        clearMessages(state)\n        break\n      }\n      case 1: {\n        let now = Date.now()\n        state.from = Math.ceil((now - 4000 - 1000) / 1000)\n        state.to = state.from\n        clearMessages(state)\n        state.newMessagesCount = 0\n        Vue.set(state, 'messages', state.rtMessagesBuff)\n        clearRtMessagesBuff(state)\n        break\n      }\n    }\n    Vue.set(state, 'mode', mode)\n  }\n\n  function setFrom (state, from) {\n    Vue.set(state, 'from', from)\n  }\n\n  function setTo (state, to) {\n    Vue.set(state, 'to', to)\n  }\n\n  function reqStart () {\n    if (DEV) {\n      console.log('Start Request Channels messages')\n    }\n  }\n\n  function setActive (state, id) {\n    state.newMessagesCount = 0\n    Vue.set(state, 'active', id)\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.mode = null\n    state.from = 0\n    state.to = 0\n    state.limit = 1000\n    await Vue.connector.unsubscribeMessagesChannels(state.active, '+')\n  }\n\n  function setCols (state, cols) {\n    let colsFromStorage = LocalStorage.getItem(state.name)\n    if (!colsFromStorage) {\n      colsFromStorage = {}\n    }\n    colsFromStorage[state.active] = cols\n    LocalStorage.set(state.name, colsFromStorage)\n    Vue.set(state, 'cols', cols)\n  }\n\n  let updateCols = setCols\n\n  function setDefaultCols (state) {\n    state.cols.forEach((col, index) => {\n      if (col.__dest) { return }\n      if (state.defaultColsNames.includes(col.name)) {\n        Vue.set(state.cols[index], 'display', true)\n      } else {\n        Vue.set(state.cols[index], 'display', false)\n      }\n    })\n    updateCols(state, state.cols)\n  }\n\n  function setNewMessagesCount (state, count) {\n    Vue.set(state, 'newMessagesCount', count)\n  }\n\n  function setOffline (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      setMessages(state, [{ __connectionStatus: 'offline', timestamp: Date.now() / 1000 }])\n    }\n    state.offline = true\n  }\n\n  function setReconnected (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      setMessages(state, [{ __connectionStatus: 'reconnected', timestamp: Date.now() / 1000 }])\n    }\n    state.offline = false\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setRtMessagesBuff (state, message) {\n    if (state.rtMessagesBuff.length >= 100) {\n      state.rtMessagesBuff.splice(0, 1)\n    }\n    state.rtMessagesBuff.push(message)\n  }\n\n  function clearRtMessagesBuff (state) {\n    Vue.set(state, 'rtMessagesBuff', [])\n  }\n\n  return {\n    setOffline,\n    setReconnected,\n    setMessages,\n    clearMessages,\n    setLimit,\n    setFilter,\n    setMode,\n    setFrom,\n    setTo,\n    reqStart,\n    clear,\n    setActive,\n    setCols,\n    updateCols,\n    setDefaultCols,\n    setNewMessagesCount,\n    setSelected,\n    clearSelected,\n    setRtMessagesBuff,\n    clearRtMessagesBuff\n  }\n}\n","import getActions from './actions'\nimport getMutations from './mutations'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, filterHandler, newMessagesInterseptor }) {\n  let actions = getActions({ Vue, LocalStorage, errorHandler }),\n    mutations = getMutations({ Vue, LocalStorage, filterHandler, newMessagesInterseptor })\n\n  const state = {\n    name: name,\n    isLoading: false,\n    active: 0,\n    messages: [],\n    filter: '',\n    mode: null,\n    from: 0,\n    to: 0,\n    limit: 1000,\n    cols: [],\n    defaultColsNames: ['timestamp', 'server.timestamp', 'ident', 'position.latitude', 'position.longitude', 'position.altitude', 'position.speed'],\n    newMessagesCount: 0,\n    offline: false,\n    selected: [],\n    rtMessagesBuff: []\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n"],"names":["require$$0","arr","_Array$isArray","i","arr2","Array","length","iter","_isIterable","Object","prototype","toString","call","_Array$from","TypeError","arrayWithoutHoles","iterableToArray","nonIterableSpread","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","_Promise","then","fn","self","this","args","arguments","apply","err","undefined","Vue","LocalStorage","errorHandler","errorsCheck","data","errors","forEach","errObject","Error","reason","sysColsNeedInitFlags","state","commit","rootState","needActions","actions","needEtc","etc","token","active","set","cols","colsFromStorage","getItem","name","col","locale","Date","match","addition","slice","__dest","unshift","width","display","push","connector","gw","getChannels","fields","protocolIdResp","protocolIdData","result","protocol_id","getProtocols","colsResp","colsData","message_parameters","colItem","defaultColsNames","includes","description","DEV","console","log","getData","getChannelsMessages","JSON","stringify","params","limit","limit_count","from","curr_key","resp","next_key","messagesBuffer","loopId","initRenderLoop","setInterval","mode","subscribeMessagesChannels","message","parse","newMessagesCount","rh","clearInterval","unsubscribeMessagesChannels","get","pollingGet","getCols","unsubscribePooling","filterHandler","newMessagesInterseptor","setMessages","reverse","filter","messages","concat","count","selected","map","index","clearMessages","clearSelected","to","setCols","updateCols","clearRtMessagesBuff","setOffline","needPostOfflineMessage","__connectionStatus","timestamp","now","offline","setReconnected","setLimit","setFilter","setMode","Math","ceil","rtMessagesBuff","setFrom","setTo","reqStart","clear","setActive","id","setDefaultCols","setNewMessagesCount","setSelected","indexes","setRtMessagesBuff","splice","namespaced","isLoading","getActions","mutations","getMutations"],"mappings":"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"}