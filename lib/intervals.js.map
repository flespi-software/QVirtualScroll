{"version":3,"file":"intervals.js","sources":["../src/store/modules/intervals/index.js","../src/store/modules/intervals/actions.js","../src/store/modules/intervals/mutations.js"],"sourcesContent":["import getActions from './actions'\nimport getMutations from './mutations'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, filterHandler, newMessagesInterseptor }) {\n  let actions = getActions({ Vue, LocalStorage, errorHandler }),\n    mutations = getMutations({ Vue, LocalStorage, filterHandler, newMessagesInterseptor })\n\n  const state = {\n    name: name,\n    isLoading: false,\n    active: 0,\n    activeDevice: 0,\n    messages: {},\n    filter: '',\n    sysFilter: '',\n    begin: Date.now() - 86400000,\n    end: Date.now(),\n    limit: 1000,\n    reverse: false,\n    cols: [],\n    selected: [],\n    sortBy: null\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n","export default function ({ Vue, LocalStorage, errorHandler }) {\n  function getParams (state) {\n    let params = {}\n    if (state.limit) {\n      params.count = state.limit\n    }\n    if (state.filter && state.sysFilter) {\n      params.filter = `${state.sysFilter},${state.filter}`\n    } else if (state.sysFilter && !state.filter) {\n      params.filter = `${state.sysFilter}`\n    } else if (!state.sysFilter && state.filter) {\n      params.filter = `${state.filter}`\n    }\n    if (state.begin && !state.reverse) {\n      if (!state.reverse) {\n        params.begin = Math.floor(state.begin / 1000)\n      }\n    }\n    if (state.end) {\n      params.end = Math.floor(state.end / 1000)\n    }\n    if (state.reverse) {\n      params.reverse = state.reverse\n    }\n    return params\n  }\n\n  function getCols ({ state, commit }, counters) {\n    let cols = [],\n      colsFromStorage = LocalStorage.get.item(state.name)\n    if (colsFromStorage && colsFromStorage[state.active] && colsFromStorage[state.active].length) {\n      cols = colsFromStorage[state.active]\n      commit('updateCols', cols)\n    } else {\n      commit('setCols', counters)\n    }\n  }\n\n  function errorsCheck (data) {\n    if (data.errors) {\n      data.errors.forEach((error) => {\n        let errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    }\n  }\n\n  async function initTime ({ state, commit, rootState }) {\n    if (rootState.token && state.active && state.activeDevice) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let params = {\n          reverse: true,\n          count: 1,\n          fields: 'end'\n        }\n        let resp = await Vue.connector.gw.getCalcsDevicesIntervals(state.active, state.activeDevice, 'all', { data: JSON.stringify(params) })\n        let data = resp.data\n        errorsCheck(data)\n        let date = Date.now()\n        if (data.result.length) {\n          date = Math.round(data.result[0].end * 1000)\n        }\n        let dateBegin = new Date(date)\n        dateBegin.setHours(0, 0, 0, 0)\n        let dateEnd = new Date(date)\n        dateEnd.setHours(23, 59, 59, 999)\n        commit('setBegin', dateBegin.valueOf())\n        commit('setEnd', dateEnd.valueOf())\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function get ({ state, commit, rootState }) {\n    commit('reqStart')\n    if (rootState.token && state.active && state.activeDevice) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let resp = await Vue.connector.gw.getCalcsDevicesIntervals(state.active, state.activeDevice, 'all', { data: JSON.stringify(getParams(state)) })\n        let data = resp.data\n        errorsCheck(data)\n        commit('setMessages', data.result)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function pollingGet ({ state, commit }) {\n    await Vue.connector.subscribeIntervals(state.active, state.activeDevice, '+', (message, topic) => {\n      message = JSON.parse(message)\n      let event = topic.split('/').slice(-1)[0]\n      switch (event) {\n        case 'created': {\n          let begin = state.begin,\n            end = state.end,\n            endDate = new Date(end),\n            intervalBegin = message.begin * 1000,\n            intervalEnd = message.end * 1000,\n            nowDate = new Date(),\n            isCurrentEndInTodayRange = endDate.getDate() === nowDate.getDate() && endDate.getMonth() === nowDate.getMonth() && endDate.getFullYear() === nowDate.getFullYear()\n          if ((intervalBegin <= end && intervalEnd >= begin) || isCurrentEndInTodayRange) {\n            // state.messages.push(message)\n            Vue.set(state.messages, message.id, message)\n          }\n          break\n        }\n        case 'updated': {\n          if (state.messages[message.id]) {\n            Vue.set(state.messages, message.id, message)\n          }\n          break\n        }\n        case 'finished': {\n          if (state.messages[message.id]) {\n            Vue.set(state.messages, message.id, message)\n          }\n          break\n        }\n        case 'deleted': {\n          if (state.messages[message.id]) {\n            Vue.delete(state.messages, message.id)\n          }\n          break\n        }\n      }\n    }, { rh: 2 })\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    await Vue.connector.unsubscribeIntervals(state.active, state.activeDevice, '+')\n  }\n\n  return {\n    get,\n    pollingGet,\n    initTime,\n    unsubscribePooling,\n    getCols\n  }\n}\n","export default function ({ Vue, LocalStorage, filterHandler, newMessagesInterseptor }) {\n  function setMessages (state, data) {\n    if (data && data.length) {\n      if (state.reverse) {\n        data.reverse()\n      }\n      let messages = state.messages\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages = data.reduce((result, message) => {\n        result[message.id] = message\n        return result\n      }, {})\n      Vue.set(state, 'messages', messages)\n    } else {\n      Vue.set(state, 'messages', [])\n    }\n  }\n\n  function clearMessages (state) {\n    Vue.set(state, 'messages', [])\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      Vue.set(state, 'filter', value)\n    }\n  }\n\n  function setBegin (state, begin) {\n    Vue.set(state, 'begin', begin)\n  }\n\n  function setEnd (state, end) {\n    Vue.set(state, 'end', end)\n  }\n\n  function reqStart () {\n    if (DEV) {\n      console.log('Start Request intervals messages')\n    }\n  }\n\n  function setActive (state, id) {\n    state.newMessagesCount = 0\n    Vue.set(state, 'active', id)\n  }\n\n  function setReverse (state, val) {\n    Vue.set(state, 'reverse', val)\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.begin = 0\n    state.end = 0\n    state.limit = 1000\n    state.reverse = false\n    await Vue.connector.unsubscribeIntervals(state.active)\n  }\n\n  function setCols (state, counters) {\n    let cols = [\n      {\n        name: 'begin',\n        title: 'begin',\n        width: 170,\n        display: true,\n        description: 'Begin of interval'\n      },\n      {\n        name: 'end',\n        width: 170,\n        display: true,\n        description: 'End of interval'\n      },\n      {\n        name: 'duration',\n        width: 85,\n        display: true,\n        description: 'Duration of interval'\n      },\n      {\n        name: 'timestamp',\n        width: 170,\n        display: true,\n        description: 'Interval timestamp'\n      },\n      {\n        name: 'id',\n        width: 50,\n        display: true,\n        description: 'ID of interval'\n      }\n    ]\n    let colsFromCounters = counters.map(counter => {\n      counter.width = 100\n      counter.display = true\n      counter.description = `${counter.name}[${counter.type}]`\n      return counter\n    })\n    cols = [...cols, ...colsFromCounters]\n    let colsFromStorage = LocalStorage.get.item(state.name)\n    if (!colsFromStorage) {\n      colsFromStorage = {}\n    }\n    colsFromStorage[state.active] = cols\n    LocalStorage.set(state.name, colsFromStorage)\n    Vue.set(state, 'cols', cols)\n  }\n\n  function updateCols (state, cols) {\n    let colsFromStorage = LocalStorage.get.item(state.name)\n    if (!colsFromStorage) {\n      colsFromStorage = {}\n    }\n    colsFromStorage[state.active] = cols\n    LocalStorage.set(state.name, colsFromStorage)\n    Vue.set(state, 'cols', cols)\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setSortBy (state, field) {\n    Vue.set(state, 'sortBy', field)\n  }\n\n  function clearSortBy (state) {\n    Vue.set(state, 'sortBy', null)\n  }\n\n  function setActiveDevice (state, id) {\n    Vue.set(state, 'activeDevice', id)\n  }\n\n  return {\n    setMessages,\n    clearMessages,\n    setLimit,\n    setFilter,\n    setBegin,\n    setEnd,\n    reqStart,\n    setReverse,\n    clear,\n    setActive,\n    setCols,\n    updateCols,\n    setSelected,\n    clearSelected,\n    setSortBy,\n    clearSortBy,\n    setActiveDevice\n  }\n}\n"],"names":["Vue","LocalStorage","name","errorHandler","filterHandler","newMessagesInterseptor","actions","errorsCheck","data","errors","forEach","error","errObject","Error","reason","state","commit","rootState","token","active","activeDevice","set","params","reverse","count","fields","connector","gw","getCalcsDevicesIntervals","JSON","stringify","resp","date","Date","now","result","length","Math","round","end","dateBegin","setHours","dateEnd","valueOf","DEV","console","log","limit","filter","sysFilter","begin","floor","subscribeIntervals","message","topic","parse","split","slice","endDate","intervalBegin","intervalEnd","nowDate","isCurrentEndInTodayRange","getDate","getMonth","getFullYear","messages","id","delete","rh","unsubscribeIntervals","get","pollingGet","initTime","unsubscribePooling","getCols","counters","colsFromStorage","item","getActions","mutations","clearMessages","clearSelected","setMessages","reduce","setLimit","setFilter","value","setBegin","setEnd","reqStart","setReverse","val","clear","setActive","newMessagesCount","setCols","cols","title","width","display","description","colsFromCounters","map","counter","type","updateCols","setSelected","indexes","setSortBy","field","clearSortBy","setActiveDevice","getMutations","namespaced","isLoading","selected","sortBy"],"mappings":"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"}