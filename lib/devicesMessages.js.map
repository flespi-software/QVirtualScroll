{"version":3,"file":"devicesMessages.js","sources":["../node_modules/@babel/runtime-corejs2/core-js/array/is-array.js","../node_modules/@babel/runtime-corejs2/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime-corejs2/core-js/array/from.js","../node_modules/@babel/runtime-corejs2/core-js/is-iterable.js","../node_modules/@babel/runtime-corejs2/helpers/iterableToArray.js","../node_modules/@babel/runtime-corejs2/helpers/nonIterableSpread.js","../node_modules/@babel/runtime-corejs2/helpers/toConsumableArray.js","../node_modules/@babel/runtime-corejs2/core-js/promise.js","../node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator.js","../src/store/modules/devicesMessages/actions.js","../src/store/modules/devicesMessages/mutations.js","../src/store/modules/devicesMessages/index.js"],"sourcesContent":["module.exports = require(\"core-js/library/fn/array/is-array\");","var _Array$isArray = require(\"../core-js/array/is-array\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (_Array$isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","module.exports = require(\"core-js/library/fn/array/from\");","module.exports = require(\"core-js/library/fn/is-iterable\");","var _Array$from = require(\"../core-js/array/from\");\n\nvar _isIterable = require(\"../core-js/is-iterable\");\n\nfunction _iterableToArray(iter) {\n  if (_isIterable(Object(iter)) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return _Array$from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","module.exports = require(\"core-js/library/fn/promise\");","var _Promise = require(\"../core-js/promise\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    _Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new _Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","import _get from 'lodash/get'\n\nexport default function ({ Vue, LocalStorage, errorHandler }) {\n  function getParams (state) {\n    let params = {}\n    if (state.limit) {\n      params.count = state.limit\n    }\n    if (state.filter) {\n      if (state.mode === 0) {\n        params.filter = `${state.filter}`\n      }\n    }\n    if (state.from && (!state.reverse || state.mode === 1)) {\n      if (!state.reverse) {\n        params.from = Math.floor(state.from / 1000)\n      }\n    }\n    if (state.to) {\n      if (state.mode === 1) {\n        state.to = Date.now()\n      }\n      params.to = Math.floor(state.to / 1000)\n    }\n    if (state.reverse) {\n      params.reverse = state.reverse\n    }\n    return params\n  }\n\n  function errorsCheck (data) {\n    if (data.errors) {\n      data.errors.forEach((error) => {\n        let errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    }\n  }\n\n  async function getCols ({ state, commit, rootState }, sysColsNeedInitFlags) {\n    const DEFAULT_COL_NAMES = state.defaultColsNames\n    const needActions = sysColsNeedInitFlags.actions\n    const needEtc = sysColsNeedInitFlags.etc\n    commit('reqStart')\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        /* getting device info */\n        let deviceResp = await Vue.connector.gw.getDevices(state.active)\n        let deviceData = deviceResp.data\n        errorsCheck(deviceData)\n        let device = deviceData.result && deviceData.result[0]\n        commit('setSettings', device)\n        let cols = [],\n          colsFromStorage = LocalStorage.getItem(state.name)\n        if (colsFromStorage && colsFromStorage[device.device_type_id] && colsFromStorage[device.device_type_id].length) {\n          cols = colsFromStorage[device.device_type_id]\n          /* adding sys cols after migration. 30.01.20 */\n          if (!cols[0].__dest && !cols[cols.length - 1].__dest) {\n            cols.unshift({ name: 'actions', width: 50, display: needActions, __dest: 'action' })\n            cols.push({ name: 'etc', width: 150, display: needEtc, __dest: 'etc' })\n          }\n        } else {\n          if (device.device_type_id) {\n            /* getting protocol id */\n            let protocolResp = await Vue.connector.gw.getProtocolsDeviceTypes('all', device.device_type_id, { fields: 'protocol_id' })\n            let protocolData = protocolResp.data\n            errorsCheck(protocolData)\n            let protocolId = protocolData.result && protocolData.result[0] && protocolData.result[0].protocol_id\n            /* gettings messages parameters */\n            let messageParamsResp = await Vue.connector.gw.getProtocols(protocolId, { fields: 'message_parameters' })\n            let messageParamsData = messageParamsResp.data\n            errorsCheck(messageParamsData)\n            let messageParams = messageParamsData.result && messageParamsData.result[0] && messageParamsData.result[0].message_parameters\n            /* initing columns by message parameters */\n            cols = messageParams.reduce((cols, param) => {\n              let name = param.name\n              if (name === 'timestamp') {\n                let locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n                cols.unshift({\n                  name,\n                  width: 190,\n                  display: true,\n                  addition: `${locale.slice(0, 3)}:${locale.slice(3)}`\n                })\n                return cols\n              }\n              cols.push({\n                name,\n                width: 150,\n                display: DEFAULT_COL_NAMES.includes(name)\n              })\n              return cols\n            }, [])\n          }\n          cols.unshift({ name: 'actions', width: 50, display: needActions, __dest: 'action' })\n          cols.push({ name: 'etc', width: 150, display: needEtc, __dest: 'etc' })\n        }\n        Vue.set(state, 'cols', cols)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  // async function getCols ({ state, commit, rootState }) {\n  //   const DEFAULT_COL_NAMES = state.defaultColsNames\n  //   commit('reqStart')\n  //   if (rootState.token && state.active) {\n  //     try {\n  //       Vue.set(state, 'isLoading', true)\n  //       /* getting telemetry */\n  //       let deviceTelemetryResp = await Vue.connector.gw.getDevicesTelemetry(state.active)\n  //       let deviceTelemetryData = deviceTelemetryResp.data\n  //       errorsCheck(deviceTelemetryData)\n  //       let telemetry = deviceTelemetryData.result && deviceTelemetryData.result[0] && deviceTelemetryData.result[0].telemetry\n  //       /* getting device info */\n  //       let deviceResp = await Vue.connector.gw.getDevices(state.active)\n  //       let deviceData = deviceResp.data\n  //       errorsCheck(deviceData)\n  //       let device = deviceData.result && deviceData.result[0]\n  //       commit('setSettings', device)\n  //       let cols = [],\n  //         colsFromStorage = LocalStorage.getItem(state.name)\n  //       if (colsFromStorage && colsFromStorage[device.device_type_id] && colsFromStorage[device.device_type_id].length) {\n  //         /* remove after sometime 12.07.19 */\n  //         colsFromStorage[device.device_type_id].forEach((col) => {\n  //           if (col.name === 'timestamp') {\n  //             let locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n  //             col.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n  //           }\n  //         })\n  //         cols = colsFromStorage[device.device_type_id]\n  //       } else {\n  //         if (device.device_type_id) {\n  //           /* getting protocol id */\n  //           let protocolResp = await Vue.connector.gw.getProtocolsDeviceTypes('all', device.device_type_id, { fields: 'protocol_id' })\n  //           let protocolData = protocolResp.data\n  //           errorsCheck(protocolData)\n  //           let protocolId = protocolData.result && protocolData.result[0] && protocolData.result[0].protocol_id\n  //           /* gettings messages parameters */\n  //           let messageParamsResp = await Vue.connector.gw.getProtocols(protocolId, { fields: 'message_parameters' })\n  //           let messageParamsData = messageParamsResp.data\n  //           errorsCheck(messageParamsData)\n  //           let messageParams = messageParamsData.result && messageParamsData.result[0] && messageParamsData.result[0].message_parameters\n  //           /* initing columns by message parameters */\n  //           cols = messageParams.reduce((cols, param) => {\n  //             let name = param.name\n  //             if (name === 'timestamp') {\n  //               let locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n  //               cols.unshift({\n  //                 name,\n  //                 width: 190,\n  //                 display: false,\n  //                 addition: `${locale.slice(0, 3)}:${locale.slice(3)}`\n  //               })\n  //               return cols\n  //             }\n  //             cols.push({\n  //               name,\n  //               width: 150,\n  //               display: false\n  //             })\n  //             return cols\n  //           }, [])\n  //           /* enable cols by active telemetry */\n  //           if (telemetry) {\n  //             /* remove position object */\n  //             if (telemetry.position) {\n  //               delete telemetry.position\n  //             }\n  //             let colNames = Object.keys(telemetry)\n  //             if (cols.length && colNames) {\n  //               /* merging existed columns with telemetry for creating actual columns */\n  //               cols.forEach(col => {\n  //                 if (telemetry[col.name]) {\n  //                   col.display = true\n  //                 }\n  //               })\n  //             }\n  //           } else { /* enable default cols w/o saving */\n  //             cols = DEFAULT_COL_NAMES.reduce((cols, name) => {\n  //               let index = cols.findIndex((col) => col.name === name)\n  //               if (index === -1) {\n  //                 cols.push({\n  //                   name,\n  //                   width: 150,\n  //                   display: true\n  //                 })\n  //               } else {\n  //                 cols[index].display = true\n  //               }\n  //               return cols\n  //             }, cols)\n  //           }\n  //         }\n  //       }\n\n  //       if (telemetry) {\n  //         commit('setCols', cols)\n  //       } else {\n  //         Vue.set(state, 'cols', cols)\n  //       }\n  //       Vue.set(state, 'isLoading', false)\n  //     } catch (e) {\n  //       errorHandler && errorHandler(e)\n  //       if (DEV) { console.log(e) }\n  //       Vue.set(state, 'isLoading', false)\n  //     }\n  //   }\n  // }\n\n  function getFromTo (val) {\n    let now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86399999\n    return { from, to }\n  }\n\n  async function initTime ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let params = {\n          reverse: true,\n          count: 1,\n          fields: 'timestamp'\n        }\n        let resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        let data = resp.data\n        errorsCheck(data)\n        let date = Date.now()\n        if (data.result.length) {\n          date = Math.round(data.result[0].timestamp * 1000)\n        }\n        let day = getFromTo(date)\n        commit('setFrom', day.from)\n        commit('setTo', day.to)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function getMessages ({ state, commit, rootState }, params) {\n    commit('reqStart')\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let currentMode = JSON.parse(JSON.stringify(state.mode))\n        let resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        /* if mode changed in time request */\n        if (currentMode !== state.mode) { return false }\n        let data = resp.data\n        errorsCheck(data)\n        Vue.set(state, 'isLoading', false)\n        return data.result\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function get ({ state, commit, rootState }) {\n    let messages = await getMessages({ state, commit, rootState }, getParams(state))\n    commit('setMessages', messages)\n  }\n\n  async function getPrevPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      let to = Math.floor(_get(state, 'messages[0].timestamp', state.to) - 1)\n      let params = getParams(state)\n      params.to = to\n      params.reverse = true\n      let messages = await getMessages({ state, commit, rootState }, params)\n      commit('prependMessages', messages)\n      return messages.length\n    }\n  }\n\n  async function getNextPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      let from = Math.floor(_get(state, `messages[${state.messages.length - 1}].timestamp`, state.from) + 1)\n      let params = getParams(state)\n      params.from = from\n      let messages = await getMessages({ state, commit, rootState }, params)\n      commit('appendMessages', messages)\n      return messages.length\n    }\n  }\n\n  async function getHistory ({ state, commit, rootState }, count) {\n    let limit = state.limit,\n      filter = state.filter\n    commit('setReverse', true)\n    commit('setLimit', count)\n    commit('setFilter', '')\n    await get({ state, commit, rootState })\n    commit('setReverse', false)\n    commit('setLimit', limit)\n    commit('setFilter', filter)\n  }\n\n  let messagesBuffer = [],\n    loopId = 0\n  function initRenderLoop (state, commit) {\n    return setInterval(() => {\n      if (messagesBuffer.length) {\n        if (state.mode === 1) {\n          commit('setMessages', [...messagesBuffer])\n        }\n        messagesBuffer = []\n      }\n    }, 500)\n  }\n\n  async function pollingGet ({ state, commit, rootState }) {\n    loopId = initRenderLoop(state, commit)\n    await Vue.connector.subscribeMessagesDevices(state.active, (message) => {\n      if (state.mode === 1) {\n        messagesBuffer.push(JSON.parse(message))\n      }\n    }, { rh: 2 })\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    if (loopId) { clearInterval(loopId) }\n    await Vue.connector.unsubscribeMessagesDevices(state.active)\n  }\n\n  /* getting missed messages after offline */\n  async function getMissedMessages ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let lastIndexOffline = state.messages.reduceRight((result, value, index) => {\n          if (result) {\n            return result\n          }\n          if (value.__connectionStatus === 'offline') {\n            result = index\n          }\n          return result\n        }, 0)\n        let params = {\n          from: !lastIndexOffline ? 0 : Math.floor(state.messages[lastIndexOffline - 1].timestamp) + 1,\n          to: Math.floor(state.messages[lastIndexOffline + 1].timestamp)\n        }\n        let resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        let data = resp.data\n        errorsCheck(data)\n        commit('setMissingMessages', { data: data.result, index: lastIndexOffline })\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  return {\n    getMessages,\n    get,\n    getPrevPage,\n    getNextPage,\n    pollingGet,\n    getCols,\n    getHistory,\n    initTime,\n    unsubscribePooling,\n    getMissedMessages\n  }\n}\n","export default function ({ Vue, LocalStorage, filterHandler, newMessagesInterseptor }) {\n  function getFromTo (val) {\n    let now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86400000\n    return { from, to }\n  }\n\n  function setRTMessages (state, data) {\n    if (data && data.length) {\n      if (state.reverse) {\n        data.reverse()\n        data[data.length - 1].delimiter = true\n      }\n      Vue.set(state, 'from', Math.floor((data[data.length - 1].timestamp + 1) * 1000))\n      if (state.filter && filterHandler) {\n        data = filterHandler(state.filter, data)\n      }\n      let messages = state.messages\n      if (state.sortBy) {\n        if (data.length > 1) {\n          /* write history for rt mode */\n          messages = messages.concat(data)\n        } else {\n          /* write by sorted field */\n          let message = data[0],\n            fieldName = state.sortBy,\n            length = state.messages.length - 1,\n            index = null,\n            escapeFlag = true\n          if (length > 0) {\n            for (let i = length; i !== 0 || escapeFlag; i--) {\n              if (messages[i][fieldName] > message[fieldName]) {\n                index = i\n                if (i === 0) {\n                  escapeFlag = false\n                }\n              } else {\n                escapeFlag = false\n              }\n            }\n          }\n          if (index) {\n            messages.splice(index, 0, message)\n          } else {\n            messages.push(message)\n          }\n        }\n      } else {\n        messages = messages.concat(data)\n      }\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      if (state.limit && messages.length >= state.limit + (state.limit * 0.1)) { // rt limiting\n        let count = (messages.length - 1) - (state.limit - 1)\n        messages = messages.slice(count)\n        Vue.set(state, 'selected', state.selected.map((index) => index - count))\n      }\n      Vue.set(state, 'messages', messages)\n    } else {\n      Vue.set(state, 'from', state.to + 1000)\n    }\n  }\n\n  function prependMessages (state, data) {\n    if (data && data.length) {\n      data.reverse()\n      let messages = state.messages\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(0, 0, ...data)\n      if (state.limit && (state.limit * 3) < messages.length) {\n        let limit = state.limit * 3 // 3 pages in memory\n        let overCount = messages.length - limit\n        messages.splice(messages.length - overCount, overCount)\n      }\n    }\n  }\n\n  function appendMessages (state, data) {\n    if (data && data.length) {\n      let messages = state.messages\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(messages.length, 0, ...data)\n      if (state.limit && (state.limit * 3) < messages.length) {\n        let limit = state.limit * 3 // 3 pages in memory\n        messages.splice(0, messages.length - limit)\n      }\n    }\n  }\n\n  function setHistoryMessages (state, data) {\n    if (data && data.length) {\n      if (state.reverse) {\n        data.reverse()\n      }\n      let messages = state.messages\n      messages = messages.concat(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      Vue.set(state, 'messages', messages)\n    } else {\n      Vue.set(state, 'messages', [])\n    }\n  }\n\n  function setMessages (state, data) {\n    if (state.mode === 1) {\n      setRTMessages(state, data)\n    } else {\n      setHistoryMessages(state, data)\n    }\n  }\n\n  function clearMessages (state) {\n    Vue.set(state, 'messages', [])\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      if (state.mode === 1) {\n        if (state.filter) {\n          state.messages.push({ 'x-flespi-filter-prev': state.filter })\n        }\n        if (value) {\n          state.messages.push({ 'x-flespi-filter-next': value })\n        }\n      }\n      Vue.set(state, 'filter', value)\n    }\n  }\n\n  function setMode (state, mode) {\n    switch (mode) {\n      case 0: {\n        let timeObj = state.from ? getFromTo(state.from) : getFromTo()\n        state.from = timeObj.from\n        state.to = timeObj.to\n        clearMessages(state)\n        break\n      }\n      case 1: {\n        let now = Date.now() - 4000\n        state.from = now - 1000\n        state.to = now\n        break\n      }\n    }\n    Vue.set(state, 'mode', mode)\n  }\n\n  function setFrom (state, from) {\n    Vue.set(state, 'from', from)\n  }\n\n  function setTo (state, to) {\n    Vue.set(state, 'to', to)\n  }\n\n  function reqStart () {\n    if (DEV) {\n      console.log('Start Request Devices messages')\n    }\n  }\n\n  function setActive (state, id) {\n    Vue.set(state, 'active', id)\n  }\n\n  function setReverse (state, val) {\n    Vue.set(state, 'reverse', val)\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.mode = null\n    state.from = 0\n    state.to = 0\n    state.limit = 1000\n    state.reverse = false\n    await Vue.connector.unsubscribeMessagesDevices(state.active)\n  }\n\n  function setCols (state, cols) {\n    let colsFromStorage = LocalStorage.getItem(state.name)\n    if (!colsFromStorage) {\n      colsFromStorage = {}\n    }\n    colsFromStorage[state.settings.device_type_id] = cols\n    LocalStorage.set(state.name, colsFromStorage)\n    Vue.set(state, 'cols', cols)\n  }\n\n  function setDefaultCols (state) {\n    state.cols.forEach((col, index) => {\n      if (col.__dest) { return }\n      if (state.defaultColsNames.includes(col.name)) {\n        Vue.set(state.cols[index], 'display', true)\n      } else {\n        Vue.set(state.cols[index], 'display', false)\n      }\n    })\n    updateCols(state, state.cols)\n  }\n\n  function setSettings (state, device) {\n    Vue.set(state, 'settings', device)\n  }\n\n  let updateCols = setCols\n\n  function setOffline (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      setMessages(state, [{ __connectionStatus: 'offline', timestamp: Date.now() / 1000 }])\n    }\n    state.offline = true\n  }\n\n  function setReconnected (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      setMessages(state, [{ __connectionStatus: 'reconnected', timestamp: Date.now() / 1000 }])\n    }\n    state.offline = false\n  }\n\n  function setMissingMessages (state, { data, index }) {\n    data.forEach((val) => {\n      val.__status = 'missed'\n    })\n    state.messages.splice(index + 1, 0, ...data)\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setSortBy (state, field) {\n    Vue.set(state, 'sortBy', field)\n  }\n\n  function clearSortBy (state) {\n    Vue.set(state, 'sortBy', null)\n  }\n\n  return {\n    setOffline,\n    setReconnected,\n    setMissingMessages,\n    setMessages,\n    prependMessages,\n    appendMessages,\n    clearMessages,\n    setLimit,\n    setFilter,\n    setMode,\n    setFrom,\n    setTo,\n    reqStart,\n    setReverse,\n    clear,\n    setActive,\n    setCols,\n    updateCols,\n    setDefaultCols,\n    setSelected,\n    clearSelected,\n    setSortBy,\n    clearSortBy,\n    setSettings\n  }\n}\n","import getActions from './actions'\nimport getMutations from './mutations'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, filterHandler, newMessagesInterseptor }) {\n  let actions = getActions({ Vue, LocalStorage, errorHandler }),\n    mutations = getMutations({ Vue, LocalStorage, filterHandler, newMessagesInterseptor })\n\n  const state = {\n    name: name,\n    isLoading: false,\n    active: 0,\n    messages: [],\n    filter: '',\n    settings: {},\n    mode: null,\n    from: 0,\n    to: 0,\n    limit: 1000,\n    reverse: false,\n    cols: [],\n    defaultColsNames: ['timestamp', 'server.timestamp', 'ident', 'position.latitude', 'position.longitude', 'position.altitude', 'position.speed'],\n    offline: false,\n    selected: [],\n    sortBy: null\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n"],"names":["require$$0","arr","_Array$isArray","i","arr2","Array","length","iter","_isIterable","Object","prototype","toString","call","_Array$from","TypeError","arrayWithoutHoles","iterableToArray","nonIterableSpread","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","_Promise","then","fn","self","this","args","arguments","apply","err","undefined","Vue","LocalStorage","errorHandler","getParams","state","params","limit","count","filter","mode","from","reverse","Math","floor","to","Date","now","errorsCheck","data","errors","forEach","errObject","Error","reason","sysColsNeedInitFlags","commit","rootState","DEFAULT_COL_NAMES","defaultColsNames","needActions","actions","needEtc","etc","token","active","set","connector","gw","getDevices","deviceResp","deviceData","device","result","cols","colsFromStorage","getItem","name","device_type_id","__dest","unshift","width","display","push","getProtocolsDeviceTypes","fields","protocolResp","protocolData","protocolId","protocol_id","getProtocols","messageParamsResp","messageParamsData","messageParams","message_parameters","reduce","param","includes","locale","match","addition","slice","DEV","console","log","getDevicesMessages","JSON","stringify","resp","date","round","timestamp","setHours","day","getMessages","currentMode","parse","get","messages","isLoading","_get","messagesBuffer","loopId","initRenderLoop","setInterval","subscribeMessagesDevices","message","rh","clearInterval","unsubscribeMessagesDevices","lastIndexOffline","reduceRight","index","__connectionStatus","getPrevPage","getNextPage","pollingGet","getCols","getHistory","initTime","unsubscribePooling","getMissedMessages","filterHandler","newMessagesInterseptor","getFromTo","val","setMessages","delimiter","sortBy","concat","fieldName","escapeFlag","splice","selected","map","setRTMessages","setHistoryMessages","clearMessages","clearSelected","setCols","settings","updateCols","setOffline","needPostOfflineMessage","offline","setReconnected","setMissingMessages","__status","prependMessages","overCount","appendMessages","setLimit","setFilter","setMode","timeObj","setFrom","setTo","reqStart","setReverse","clear","setActive","id","setDefaultCols","col","setSelected","indexes","setSortBy","field","clearSortBy","setSettings","namespaced","getActions","mutations","getMutations"],"mappings":"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"}