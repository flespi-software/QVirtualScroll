{"version":3,"file":"devicesMessages.js","sources":["../node_modules/@babel/runtime-corejs2/core-js/array/is-array.js","../node_modules/@babel/runtime-corejs2/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime-corejs2/core-js/array/from.js","../node_modules/@babel/runtime-corejs2/core-js/is-iterable.js","../node_modules/@babel/runtime-corejs2/helpers/iterableToArray.js","../node_modules/@babel/runtime-corejs2/helpers/nonIterableSpread.js","../node_modules/@babel/runtime-corejs2/helpers/toConsumableArray.js","../node_modules/@babel/runtime-corejs2/core-js/promise.js","../node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator.js","../src/store/modules/devicesMessages/actions.js","../src/store/modules/devicesMessages/mutations.js","../src/store/modules/devicesMessages/index.js"],"sourcesContent":["module.exports = require(\"core-js/library/fn/array/is-array\");","var _Array$isArray = require(\"../core-js/array/is-array\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (_Array$isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","module.exports = require(\"core-js/library/fn/array/from\");","module.exports = require(\"core-js/library/fn/is-iterable\");","var _Array$from = require(\"../core-js/array/from\");\n\nvar _isIterable = require(\"../core-js/is-iterable\");\n\nfunction _iterableToArray(iter) {\n  if (_isIterable(Object(iter)) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return _Array$from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","module.exports = require(\"core-js/library/fn/promise\");","var _Promise = require(\"../core-js/promise\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    _Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new _Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","import _get from 'lodash/get'\n\nexport default function ({ Vue, LocalStorage, errorHandler }) {\n  function getParams (state) {\n    const params = {}\n    if (state.limit) {\n      params.count = state.limit\n    }\n    if (state.filter) {\n      params.filter = `${state.filter}`\n    }\n    if (state.from) {\n      params.from = Math.floor(state.from / 1000)\n    }\n    if (state.to) {\n      params.to = Math.floor(state.to / 1000)\n    }\n    if (state.reverse) {\n      params.reverse = state.reverse\n    }\n    return params\n  }\n\n  function errorsCheck (data) {\n    if (data.errors) {\n      data.errors.forEach((error) => {\n        const errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    }\n  }\n\n  function getColsFromLS (state) {\n    let colsFromStorage = {}\n    if (state.lsNamespace) {\n      /* removing old store 12.03.20 */\n      const oldStore = LocalStorage.getItem(state.name)\n      if (oldStore) {\n        colsFromStorage = oldStore\n        LocalStorage.remove(state.name)\n      }\n      const lsPath = state.lsNamespace.split('.'),\n        lsItemName = lsPath.shift(),\n        lsRouteToItem = `${lsPath.join('.')}.${state.name}`,\n        appStorage = LocalStorage.getItem(lsItemName)\n      colsFromStorage = _get(appStorage, lsRouteToItem, colsFromStorage)\n    } else {\n      colsFromStorage = LocalStorage.getItem(state.name) || colsFromStorage\n    }\n    return colsFromStorage\n  }\n\n  async function getCols ({ state, commit, rootState }, sysColsNeedInitFlags) {\n    const DEFAULT_COL_NAMES = state.defaultColsNames\n    const needActions = sysColsNeedInitFlags.actions\n    const needEtc = sysColsNeedInitFlags.etc\n    commit('reqStart')\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        /* getting device info */\n        const deviceResp = await Vue.connector.gw.getDevices(state.active)\n        const deviceData = deviceResp.data\n        errorsCheck(deviceData)\n        const device = deviceData.result && deviceData.result[0]\n        commit('setSettings', device)\n        let cols = []\n        const colsFromStorage = getColsFromLS(state)\n        if (colsFromStorage && colsFromStorage[device.device_type_id] && colsFromStorage[device.device_type_id].length) {\n          cols = colsFromStorage[device.device_type_id]\n          /* adding sys cols after migration. 30.01.20 */\n          if (!cols[0].__dest && !cols[cols.length - 1].__dest) {\n            cols.unshift({ name: 'actions', width: 50, display: needActions, __dest: 'action' })\n            cols.push({ name: 'etc', width: 150, display: needEtc, __dest: 'etc' })\n          }\n        } else {\n          if (device.device_type_id) {\n            /* getting protocol id */\n            const protocolResp = await Vue.connector.gw.getProtocolsDeviceTypes('all', device.device_type_id, { fields: 'protocol_id' })\n            const protocolData = protocolResp.data\n            errorsCheck(protocolData)\n            const protocolId = protocolData.result && protocolData.result[0] && protocolData.result[0].protocol_id\n            /* gettings messages parameters */\n            const messageParamsResp = await Vue.connector.gw.getProtocols(protocolId, { fields: 'message_parameters' })\n            const messageParamsData = messageParamsResp.data\n            errorsCheck(messageParamsData)\n            const messageParams = messageParamsData.result && messageParamsData.result[0] && messageParamsData.result[0].message_parameters\n            /* initing columns by message parameters */\n            cols = messageParams.reduce((cols, param) => {\n              const name = param.name\n              if (name === 'timestamp') {\n                const locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n                cols.unshift({\n                  name,\n                  width: 190,\n                  display: true,\n                  addition: `${locale.slice(0, 3)}:${locale.slice(3)}`\n                })\n                return cols\n              }\n              cols.push({\n                name,\n                width: 150,\n                display: DEFAULT_COL_NAMES.includes(name)\n              })\n              return cols\n            }, [])\n          }\n          cols.unshift({ name: 'actions', width: 50, display: needActions, __dest: 'action' })\n          cols.push({ name: 'etc', width: 150, display: needEtc, __dest: 'etc' })\n        }\n        Vue.set(state, 'cols', cols)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  function getFromTo (val) {\n    const now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86399999\n    return { from, to }\n  }\n\n  async function initTime ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const params = {\n          reverse: true,\n          count: 1,\n          fields: 'timestamp'\n        }\n        const resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        let date = Date.now()\n        if (data.result.length) {\n          date = Math.round(data.result[0].timestamp * 1000)\n        }\n        const day = getFromTo(date)\n        commit('setFrom', day.from)\n        commit('setTo', day.to)\n        if (day.to < Date.now()) {\n          await newMessagesCheck({ state })\n        }\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function getMessages ({ state, commit, rootState }, params) {\n    commit('reqStart')\n    let result = []\n    if (rootState.token && state.active) {\n      const isLoadingActive = state.isLoading\n      try {\n        !isLoadingActive && Vue.set(state, 'isLoading', true)\n        const resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n        result = data.result || []\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n      }\n    }\n    return result\n  }\n\n  async function get ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      const start = Math.floor(Date.now() / 1000)\n      const params = getParams(state)\n      let messagesCount = 0\n      const messages = await getMessages({ state, commit, rootState }, params)\n      messagesCount += messages.length\n      const now = Math.floor(Date.now() / 1000)\n      const needRT = (params.to >= now && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        const stop = Math.floor(Date.now() / 1000)\n        const params = getParams(state)\n        params.from = start\n        params.to = stop\n        const missedMessages = await getMessages({ state, commit, rootState }, params)\n        messagesCount += missedMessages.length\n        messages.splice(messages.length, 0, ...missedMessages)\n      } else if ((params.to < now || (state.limit && messages.length >= state.limit)) && loopId) {\n        await unsubscribePooling({ state, commit, rootState })\n      }\n      commit('limiting', { type: 'init', count: messagesCount })\n      commit('setHistoryMessages', messages)\n      if (needRT || state.realtimeEnabled) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n    }\n  }\n\n  async function getPrevPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      const to = Math.floor(_get(state, 'messages[0].timestamp', state.to) - 1)\n      const params = getParams(state)\n      params.to = to\n      params.reverse = true\n      if (loopId && state.messages.length > state.limit * 2) {\n        await unsubscribePooling({ state, commit, rootState })\n        commit('limiting', { type: 'rt_deinit' })\n      }\n      const messages = await getMessages({ state, commit, rootState }, params)\n      if (!messages.length) {\n        Vue.set(state, 'isLoading', false)\n        return 0\n      }\n      commit('limiting', { type: 'prev', count: messages.length })\n      commit('prependMessages', messages)\n      Vue.set(state, 'isLoading', false)\n      return messages.length\n    }\n  }\n\n  async function getNextPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      if (state.realtimeEnabled) { return }\n      Vue.set(state, 'isLoading', true)\n      const start = Date.now()\n      const from = Math.floor(_get(state, `messages[${state.messages.length - 1}].timestamp`, state.from) + 1)\n      const params = getParams(state)\n      let messagesCount = 0\n      params.from = from\n      const messages = await getMessages({ state, commit, rootState }, params)\n      messagesCount += messages.length\n      const needRT = (params.to > Math.floor(Date.now() / 1000) && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        const stop = Date.now()\n        const params = getParams(state)\n        params.from = Math.floor(start / 1000)\n        params.to = Math.floor(stop / 1000)\n        const missedMessages = await getMessages({ state, commit, rootState }, params)\n        messagesCount += missedMessages.length\n        messages.splice(messages.length, 0, ...missedMessages)\n      }\n      commit('limiting', { type: 'next', count: messagesCount })\n      commit('appendMessages', messages)\n      if (needRT) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n      return messagesCount\n    }\n  }\n\n  async function getHistory ({ state, commit, rootState }, count) {\n    const limit = state.limit\n    commit('clearMessages')\n    commit('setReverse', true)\n    commit('setLimit', count)\n    await get({ state, commit, rootState })\n    commit('setReverse', false)\n    commit('setLimit', limit)\n  }\n\n  let messagesBuffer = [],\n    loopId = 0\n  function initRenderLoop (state, commit) {\n    return setInterval(() => {\n      if (messagesBuffer.length) {\n        commit('setRTMessages', [...messagesBuffer])\n        messagesBuffer = []\n      }\n    }, 500)\n  }\n\n  async function pollingGet ({ state, commit, rootState }) {\n    await Vue.connector.subscribeMessagesDevices(state.active, (message) => {\n      messagesBuffer.push(JSON.parse(message))\n    }, { rh: 2 })\n    state.realtimeEnabled = true\n    return () => {\n      loopId = initRenderLoop(state, commit)\n    }\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    if (loopId) {\n      clearInterval(loopId)\n      messagesBuffer = []\n      loopId = 0\n    }\n    await Vue.connector.unsubscribeMessagesDevices(state.active)\n    state.realtimeEnabled = false\n  }\n\n  /* getting missed messages after offline */\n  async function getMissedMessages ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const lastIndexOffline = state.messages.reduceRight((result, value, index) => {\n          if (result) {\n            return result\n          }\n          if (value.__connectionStatus === 'offline') {\n            result = index\n          }\n          return result\n        }, 0)\n        const params = {\n          from: !lastIndexOffline ? 0 : Math.floor(state.messages[lastIndexOffline - 1].timestamp) + 1,\n          to: Math.floor(state.messages[lastIndexOffline + 1].timestamp)\n        }\n        const resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        commit('setMissingMessages', { data: data.result, index: lastIndexOffline })\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function newMessagesCheck ({ state }) {\n    state.hasNewMessages = false\n    await Vue.connector.subscribeMessagesDevices(state.active, () => {\n      state.hasNewMessages = true\n      unsubscribePooling({ state })\n    }, { rh: 2 })\n  }\n\n  return {\n    getMessages,\n    get,\n    getPrevPage,\n    getNextPage,\n    pollingGet,\n    getCols,\n    getHistory,\n    initTime,\n    unsubscribePooling,\n    getMissedMessages\n  }\n}\n","import get from 'lodash/get'\nimport set from 'lodash/set'\nexport default function ({ Vue, LocalStorage, filterHandler, newMessagesInterseptor }) {\n  let messagesKeyPointer = 0\n  function messagesIndexing (messages) {\n    if (!messages.length) { return }\n    messages.forEach((message, index) => {\n      messages[index]['x-flespi-message-key'] = messagesKeyPointer++\n    })\n  }\n\n  function setRTMessages (state, data) {\n    if (data && data.length) {\n      if (state.filter && filterHandler) {\n        data = filterHandler(state.filter, data)\n      }\n      messagesIndexing(data)\n      const messages = state.messages\n      if (state.sortBy) {\n        /* write by sorted field */\n        const message = data[0],\n          fieldName = state.sortBy,\n          length = state.messages.length - 1\n        let index = null,\n          escapeFlag = true\n        if (length > 0) {\n          for (let i = length; i !== 0 || escapeFlag; i--) {\n            if (messages[i][fieldName] > message[fieldName]) {\n              index = i\n              if (i === 0) {\n                escapeFlag = false\n              }\n            } else {\n              escapeFlag = false\n            }\n          }\n        }\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        if (index) {\n          messages.splice(index, 0, ...data)\n        } else {\n          messages.splice(messages.length, 0, ...data)\n        }\n      } else {\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        messages.splice(messages.length, 0, ...data)\n      }\n      limiting(state, { type: 'rt', count: data.length })\n    }\n  }\n\n  function prependMessages (state, data) {\n    if (data && data.length) {\n      data.reverse()\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(0, 0, ...data)\n    }\n  }\n\n  function appendMessages (state, data) {\n    if (data && data.length) {\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(messages.length, 0, ...data)\n    }\n  }\n\n  function setHistoryMessages (state, data) {\n    if (state.reverse) {\n      data.reverse()\n    }\n    messagesIndexing(data)\n    newMessagesInterseptor && newMessagesInterseptor(data)\n    state.messages = data\n  }\n\n  function clearMessages (state) {\n    state.messages.splice(0, state.messages.length)\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function limiting (state, { type, count }) {\n    if (!state.limit) { return false }\n    const messages = state.messages\n    const pages = state.pages\n    switch (type) {\n      case 'init': {\n        state.pages = count ? [count] : []\n        break\n      }\n      case 'prev': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[2]\n          state.pages = [count, ...pages.slice(0, -1)]\n          messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        } else {\n          state.pages = [count, ...pages]\n        }\n        break\n      }\n      case 'next': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[0]\n          state.pages = [...pages.slice(1, 3), count]\n          messages.splice(0, removeMessagesCount)\n        } else if (pagesCount < 3) {\n          pages.push(count)\n        }\n        break\n      }\n      case 'rt_init': {\n        pages.push(0)\n        break\n      }\n      case 'rt_deinit': {\n        const removeMessagesCount = pages.pop()\n        messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        break\n      }\n      case 'rt': {\n        const pagesCount = pages.length\n        const rtCount = pages[pagesCount - 1] || 0\n        if (rtCount + count > state.limit) {\n          if (pagesCount > 3) {\n            const removeMessagesCount = pages[0]\n            state.pages = [...pages.slice(1, -1), rtCount + count, 0]\n            messages.splice(0, removeMessagesCount)\n          } else {\n            state.pages = [...pages.slice(0, -1), rtCount + count, 0]\n          }\n        } else {\n          state.pages[pagesCount - 1] = rtCount + count\n        }\n      }\n    }\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      Vue.set(state, 'filter', value)\n    }\n  }\n\n  function setFrom (state, from) {\n    Vue.set(state, 'from', from)\n  }\n\n  function setTo (state, to) {\n    Vue.set(state, 'to', to)\n  }\n\n  function reqStart () {\n    if (DEV) {\n      console.log('Start Request Devices messages')\n    }\n  }\n\n  function setActive (state, id) {\n    Vue.set(state, 'active', id)\n  }\n\n  function setReverse (state, val) {\n    Vue.set(state, 'reverse', val)\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.from = 0\n    state.to = 0\n    state.limit = 1000\n    state.reverse = false\n    await Vue.connector.unsubscribeMessagesDevices(state.active)\n  }\n\n  function getColsFromLS (state) {\n    let colsFromStorage = {}\n    if (state.lsNamespace) {\n      const lsPath = state.lsNamespace.split('.'),\n        lsItemName = lsPath.shift(),\n        lsRouteToItem = `${lsPath.join('.')}.${state.name}`,\n        appStorage = LocalStorage.getItem(lsItemName)\n      colsFromStorage = get(appStorage, lsRouteToItem, colsFromStorage)\n    } else {\n      colsFromStorage = LocalStorage.getItem(state.name) || colsFromStorage\n    }\n    return colsFromStorage\n  }\n\n  function setColsToLS (state, cols) {\n    const colsFromStorage = getColsFromLS(state)\n    colsFromStorage[state.settings.device_type_id] = cols\n    if (state.lsNamespace) {\n      const lsPath = state.lsNamespace.split('.'),\n        lsItemName = lsPath.shift(),\n        lsRouteToItem = `${lsPath.join('.')}.${state.name}`,\n        appStorage = LocalStorage.getItem(lsItemName)\n      set(appStorage, lsRouteToItem, colsFromStorage)\n      LocalStorage.set(lsItemName, appStorage)\n    } else {\n      LocalStorage.set(state.name, colsFromStorage)\n    }\n  }\n\n  function setCols (state, cols) {\n    setColsToLS(state, cols)\n    Vue.set(state, 'cols', cols)\n  }\n\n  function setDefaultCols (state) {\n    state.cols.forEach((col, index) => {\n      if (col.__dest) { return }\n      if (state.defaultColsNames.includes(col.name)) {\n        Vue.set(state.cols[index], 'display', true)\n      } else {\n        Vue.set(state.cols[index], 'display', false)\n      }\n    })\n    updateCols(state, state.cols)\n  }\n\n  function setSettings (state, device) {\n    Vue.set(state, 'settings', device)\n  }\n\n  const updateCols = setCols\n\n  function setOffline (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      state.messages.push({ __connectionStatus: 'offline', timestamp: Date.now() / 1000 })\n    }\n    state.offline = true\n  }\n\n  function setReconnected (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      state.messages.push({ __connectionStatus: 'reconnected', timestamp: Date.now() / 1000 })\n    }\n    state.offline = false\n  }\n\n  function setMissingMessages (state, { data, index }) {\n    data.forEach((val) => {\n      val['x-flespi-status'] = 'missed'\n    })\n    state.messages.splice(index + 1, 0, ...data)\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setSortBy (state, field) {\n    Vue.set(state, 'sortBy', field)\n  }\n\n  function clearSortBy (state) {\n    Vue.set(state, 'sortBy', null)\n  }\n\n  return {\n    setOffline,\n    setReconnected,\n    setMissingMessages,\n    setHistoryMessages,\n    setRTMessages,\n    prependMessages,\n    appendMessages,\n    clearMessages,\n    setLimit,\n    limiting,\n    setFilter,\n    setFrom,\n    setTo,\n    reqStart,\n    setReverse,\n    clear,\n    setActive,\n    setCols,\n    updateCols,\n    setDefaultCols,\n    setSelected,\n    clearSelected,\n    setSortBy,\n    clearSortBy,\n    setSettings\n  }\n}\n","import getActions from './actions'\nimport getMutations from './mutations'\nimport get from 'lodash/get'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, filterHandler, newMessagesInterseptor }) {\n  const lsNamespace = get(name, 'lsNamespace', undefined)\n  name = get(name, 'name', name)\n  const actions = getActions({ Vue, LocalStorage, errorHandler }),\n    mutations = getMutations({ Vue, LocalStorage, filterHandler, newMessagesInterseptor })\n\n  const state = {\n    name,\n    lsNamespace,\n    isLoading: false,\n    active: 0,\n    messages: [],\n    pages: [],\n    filter: '',\n    settings: {},\n    realtimeEnabled: false,\n    from: 0,\n    to: 0,\n    limit: 1000,\n    reverse: false,\n    cols: [],\n    defaultColsNames: ['timestamp', 'server.timestamp', 'ident', 'position.latitude', 'position.longitude', 'position.altitude', 'position.speed'],\n    offline: false,\n    selected: [],\n    sortBy: null,\n    hasNewMessages: null\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n"],"names":["require$$0","arr","_Array$isArray","i","arr2","Array","length","iter","_isIterable","Object","prototype","toString","call","_Array$from","TypeError","arrayWithoutHoles","iterableToArray","nonIterableSpread","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","_Promise","then","fn","self","this","args","arguments","apply","err","undefined","Vue","LocalStorage","errorHandler","getParams","state","params","limit","count","filter","from","Math","floor","to","reverse","errorsCheck","data","errors","forEach","errObject","Error","reason","getColsFromLS","colsFromStorage","lsNamespace","oldStore","getItem","name","remove","lsPath","split","lsItemName","shift","lsRouteToItem","join","appStorage","_get","sysColsNeedInitFlags","commit","rootState","DEFAULT_COL_NAMES","defaultColsNames","needActions","actions","needEtc","etc","token","active","set","connector","gw","getDevices","deviceResp","deviceData","device","result","cols","device_type_id","__dest","unshift","width","display","push","getProtocolsDeviceTypes","fields","protocolResp","protocolData","protocolId","protocol_id","getProtocols","messageParamsResp","messageParamsData","messageParams","message_parameters","reduce","param","includes","locale","Date","match","addition","slice","DEV","console","log","getDevicesMessages","JSON","stringify","resp","date","now","round","timestamp","setHours","day","newMessagesCheck","getMessages","isLoadingActive","isLoading","get","start","messagesCount","messages","needRT","loopId","startRTRender","pollingGet","stop","missedMessages","splice","unsubscribePooling","type","realtimeEnabled","messagesBuffer","subscribeMessagesDevices","message","parse","rh","setInterval","clearInterval","unsubscribeMessagesDevices","lastIndexOffline","reduceRight","index","__connectionStatus","hasNewMessages","getPrevPage","getNextPage","getCols","getHistory","initTime","getMissedMessages","filterHandler","newMessagesInterseptor","messagesKeyPointer","messagesIndexing","clearMessages","clearSelected","limiting","pages","removeMessagesCount","pagesCount","pop","rtCount","setColsToLS","settings","setCols","updateCols","setOffline","needPostOfflineMessage","offline","setReconnected","setMissingMessages","val","setHistoryMessages","setRTMessages","sortBy","fieldName","escapeFlag","prependMessages","appendMessages","setLimit","setFilter","setFrom","setTo","reqStart","setReverse","clear","setActive","id","setDefaultCols","col","setSelected","indexes","setSortBy","field","clearSortBy","setSettings","namespaced","selected","getActions","mutations","getMutations"],"mappings":"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"}