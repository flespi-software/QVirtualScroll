{"version":3,"file":"devicesMessages.js","sources":["../node_modules/@babel/runtime-corejs2/core-js/array/is-array.js","../node_modules/@babel/runtime-corejs2/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime-corejs2/core-js/array/from.js","../node_modules/@babel/runtime-corejs2/core-js/is-iterable.js","../node_modules/@babel/runtime-corejs2/helpers/iterableToArray.js","../node_modules/@babel/runtime-corejs2/helpers/nonIterableSpread.js","../node_modules/@babel/runtime-corejs2/helpers/toConsumableArray.js","../node_modules/@babel/runtime-corejs2/core-js/promise.js","../node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator.js","../src/store/modules/devicesMessages/actions.js","../src/store/modules/devicesMessages/mutations.js","../src/store/modules/devicesMessages/index.js"],"sourcesContent":["module.exports = require(\"core-js/library/fn/array/is-array\");","var _Array$isArray = require(\"../core-js/array/is-array\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (_Array$isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","module.exports = require(\"core-js/library/fn/array/from\");","module.exports = require(\"core-js/library/fn/is-iterable\");","var _Array$from = require(\"../core-js/array/from\");\n\nvar _isIterable = require(\"../core-js/is-iterable\");\n\nfunction _iterableToArray(iter) {\n  if (_isIterable(Object(iter)) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return _Array$from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","module.exports = require(\"core-js/library/fn/promise\");","var _Promise = require(\"../core-js/promise\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    _Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new _Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","import _get from 'lodash/get'\n\nexport default function ({ Vue, LocalStorage, errorHandler }) {\n  function getParams (state) {\n    const params = {}\n    if (state.limit) {\n      params.count = state.limit\n    }\n    if (state.filter) {\n      params.filter = `${state.filter}`\n    }\n    if (state.from && !state.reverse) {\n      params.from = Math.floor(state.from / 1000)\n    }\n    if (state.to) {\n      params.to = Math.floor(state.to / 1000)\n    }\n    if (state.reverse) {\n      params.reverse = state.reverse\n    }\n    return params\n  }\n\n  function errorsCheck (data) {\n    if (data.errors) {\n      data.errors.forEach((error) => {\n        const errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    }\n  }\n\n  async function getCols ({ state, commit, rootState }, sysColsNeedInitFlags) {\n    const DEFAULT_COL_NAMES = state.defaultColsNames\n    const needActions = sysColsNeedInitFlags.actions\n    const needEtc = sysColsNeedInitFlags.etc\n    commit('reqStart')\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        /* getting device info */\n        const deviceResp = await Vue.connector.gw.getDevices(state.active)\n        const deviceData = deviceResp.data\n        errorsCheck(deviceData)\n        const device = deviceData.result && deviceData.result[0]\n        commit('setSettings', device)\n        let cols = []\n        const colsFromStorage = LocalStorage.getItem(state.name)\n        if (colsFromStorage && colsFromStorage[device.device_type_id] && colsFromStorage[device.device_type_id].length) {\n          cols = colsFromStorage[device.device_type_id]\n          /* adding sys cols after migration. 30.01.20 */\n          if (!cols[0].__dest && !cols[cols.length - 1].__dest) {\n            cols.unshift({ name: 'actions', width: 50, display: needActions, __dest: 'action' })\n            cols.push({ name: 'etc', width: 150, display: needEtc, __dest: 'etc' })\n          }\n        } else {\n          if (device.device_type_id) {\n            /* getting protocol id */\n            const protocolResp = await Vue.connector.gw.getProtocolsDeviceTypes('all', device.device_type_id, { fields: 'protocol_id' })\n            const protocolData = protocolResp.data\n            errorsCheck(protocolData)\n            const protocolId = protocolData.result && protocolData.result[0] && protocolData.result[0].protocol_id\n            /* gettings messages parameters */\n            const messageParamsResp = await Vue.connector.gw.getProtocols(protocolId, { fields: 'message_parameters' })\n            const messageParamsData = messageParamsResp.data\n            errorsCheck(messageParamsData)\n            const messageParams = messageParamsData.result && messageParamsData.result[0] && messageParamsData.result[0].message_parameters\n            /* initing columns by message parameters */\n            cols = messageParams.reduce((cols, param) => {\n              const name = param.name\n              if (name === 'timestamp') {\n                const locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n                cols.unshift({\n                  name,\n                  width: 190,\n                  display: true,\n                  addition: `${locale.slice(0, 3)}:${locale.slice(3)}`\n                })\n                return cols\n              }\n              cols.push({\n                name,\n                width: 150,\n                display: DEFAULT_COL_NAMES.includes(name)\n              })\n              return cols\n            }, [])\n          }\n          cols.unshift({ name: 'actions', width: 50, display: needActions, __dest: 'action' })\n          cols.push({ name: 'etc', width: 150, display: needEtc, __dest: 'etc' })\n        }\n        Vue.set(state, 'cols', cols)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  // async function getCols ({ state, commit, rootState }) {\n  //   const DEFAULT_COL_NAMES = state.defaultColsNames\n  //   commit('reqStart')\n  //   if (rootState.token && state.active) {\n  //     try {\n  //       Vue.set(state, 'isLoading', true)\n  //       /* getting telemetry */\n  //       let deviceTelemetryResp = await Vue.connector.gw.getDevicesTelemetry(state.active)\n  //       let deviceTelemetryData = deviceTelemetryResp.data\n  //       errorsCheck(deviceTelemetryData)\n  //       let telemetry = deviceTelemetryData.result && deviceTelemetryData.result[0] && deviceTelemetryData.result[0].telemetry\n  //       /* getting device info */\n  //       let deviceResp = await Vue.connector.gw.getDevices(state.active)\n  //       let deviceData = deviceResp.data\n  //       errorsCheck(deviceData)\n  //       let device = deviceData.result && deviceData.result[0]\n  //       commit('setSettings', device)\n  //       let cols = [],\n  //         colsFromStorage = LocalStorage.getItem(state.name)\n  //       if (colsFromStorage && colsFromStorage[device.device_type_id] && colsFromStorage[device.device_type_id].length) {\n  //         /* remove after sometime 12.07.19 */\n  //         colsFromStorage[device.device_type_id].forEach((col) => {\n  //           if (col.name === 'timestamp') {\n  //             let locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n  //             col.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n  //           }\n  //         })\n  //         cols = colsFromStorage[device.device_type_id]\n  //       } else {\n  //         if (device.device_type_id) {\n  //           /* getting protocol id */\n  //           let protocolResp = await Vue.connector.gw.getProtocolsDeviceTypes('all', device.device_type_id, { fields: 'protocol_id' })\n  //           let protocolData = protocolResp.data\n  //           errorsCheck(protocolData)\n  //           let protocolId = protocolData.result && protocolData.result[0] && protocolData.result[0].protocol_id\n  //           /* gettings messages parameters */\n  //           let messageParamsResp = await Vue.connector.gw.getProtocols(protocolId, { fields: 'message_parameters' })\n  //           let messageParamsData = messageParamsResp.data\n  //           errorsCheck(messageParamsData)\n  //           let messageParams = messageParamsData.result && messageParamsData.result[0] && messageParamsData.result[0].message_parameters\n  //           /* initing columns by message parameters */\n  //           cols = messageParams.reduce((cols, param) => {\n  //             let name = param.name\n  //             if (name === 'timestamp') {\n  //               let locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n  //               cols.unshift({\n  //                 name,\n  //                 width: 190,\n  //                 display: false,\n  //                 addition: `${locale.slice(0, 3)}:${locale.slice(3)}`\n  //               })\n  //               return cols\n  //             }\n  //             cols.push({\n  //               name,\n  //               width: 150,\n  //               display: false\n  //             })\n  //             return cols\n  //           }, [])\n  //           /* enable cols by active telemetry */\n  //           if (telemetry) {\n  //             /* remove position object */\n  //             if (telemetry.position) {\n  //               delete telemetry.position\n  //             }\n  //             let colNames = Object.keys(telemetry)\n  //             if (cols.length && colNames) {\n  //               /* merging existed columns with telemetry for creating actual columns */\n  //               cols.forEach(col => {\n  //                 if (telemetry[col.name]) {\n  //                   col.display = true\n  //                 }\n  //               })\n  //             }\n  //           } else { /* enable default cols w/o saving */\n  //             cols = DEFAULT_COL_NAMES.reduce((cols, name) => {\n  //               let index = cols.findIndex((col) => col.name === name)\n  //               if (index === -1) {\n  //                 cols.push({\n  //                   name,\n  //                   width: 150,\n  //                   display: true\n  //                 })\n  //               } else {\n  //                 cols[index].display = true\n  //               }\n  //               return cols\n  //             }, cols)\n  //           }\n  //         }\n  //       }\n\n  //       if (telemetry) {\n  //         commit('setCols', cols)\n  //       } else {\n  //         Vue.set(state, 'cols', cols)\n  //       }\n  //       Vue.set(state, 'isLoading', false)\n  //     } catch (e) {\n  //       errorHandler && errorHandler(e)\n  //       if (DEV) { console.log(e) }\n  //       Vue.set(state, 'isLoading', false)\n  //     }\n  //   }\n  // }\n\n  function getFromTo (val) {\n    const now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86399999\n    return { from, to }\n  }\n\n  async function initTime ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const params = {\n          reverse: true,\n          count: 1,\n          fields: 'timestamp'\n        }\n        const resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        let date = Date.now()\n        if (data.result.length) {\n          date = Math.round(data.result[0].timestamp * 1000)\n        }\n        const day = getFromTo(date)\n        commit('setFrom', day.from)\n        commit('setTo', day.to)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function getMessages ({ state, commit, rootState }, params) {\n    commit('reqStart')\n    if (rootState.token && state.active) {\n      const isLoadingActive = state.isLoading\n      try {\n        !isLoadingActive && Vue.set(state, 'isLoading', true)\n        const resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n        return data.result || []\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function get ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      const start = Math.floor(Date.now() / 1000)\n      const params = getParams(state)\n      let messagesCount = 0\n      const messages = await getMessages({ state, commit, rootState }, params)\n      messagesCount += messages.length\n      const now = Math.floor(Date.now() / 1000)\n      const needRT = (params.to >= now && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        const stop = Math.floor(Date.now() / 1000)\n        const params = getParams(state)\n        params.from = start\n        params.to = stop\n        const missedMessages = await getMessages({ state, commit, rootState }, params)\n        messagesCount += missedMessages.length\n        messages.splice(messages.length, 0, ...missedMessages)\n      } else if ((params.to < now || (state.limit && messages.length >= state.limit)) && loopId) {\n        await unsubscribePooling({ state, commit, rootState })\n      }\n      commit('limiting', { type: 'init', count: messagesCount })\n      commit('setHistoryMessages', messages)\n      if (needRT || state.realtimeEnabled) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n    }\n  }\n\n  async function getPrevPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      const to = Math.floor(_get(state, 'messages[0].timestamp', state.to) - 1)\n      const params = getParams(state)\n      params.to = to\n      params.reverse = true\n      if (loopId && state.messages.length > state.limit * 2) {\n        await unsubscribePooling({ state, commit, rootState })\n        commit('limiting', { type: 'rt_deinit' })\n      }\n      const messages = await getMessages({ state, commit, rootState }, params)\n      if (!messages.length) {\n        Vue.set(state, 'isLoading', false)\n        return 0\n      }\n      commit('limiting', { type: 'prev', count: messages.length })\n      commit('prependMessages', messages)\n      Vue.set(state, 'isLoading', false)\n      return messages.length\n    }\n  }\n\n  async function getNextPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      if (state.realtimeEnabled) { return }\n      Vue.set(state, 'isLoading', true)\n      const start = Date.now()\n      const from = Math.floor(_get(state, `messages[${state.messages.length - 1}].timestamp`, state.from) + 1)\n      const params = getParams(state)\n      let messagesCount = 0\n      params.from = from\n      const messages = await getMessages({ state, commit, rootState }, params)\n      messagesCount += messages.length\n      const needRT = (params.to > Math.floor(Date.now() / 1000) && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        const stop = Date.now()\n        const params = getParams(state)\n        params.from = Math.floor(start / 1000)\n        params.to = Math.floor(stop / 1000)\n        const missedMessages = await getMessages({ state, commit, rootState }, params)\n        messagesCount += missedMessages.length\n        messages.splice(messages.length, 0, ...missedMessages)\n      }\n      commit('limiting', { type: 'next', count: messagesCount })\n      commit('appendMessages', messages)\n      if (needRT) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n      return messagesCount\n    }\n  }\n\n  async function getHistory ({ state, commit, rootState }, count) {\n    const limit = state.limit,\n      filter = state.filter\n    commit('clearMessages')\n    commit('setReverse', true)\n    commit('setLimit', count)\n    commit('setFilter', '')\n    await get({ state, commit, rootState })\n    commit('setReverse', false)\n    commit('setLimit', limit)\n    commit('setFilter', filter)\n  }\n\n  let messagesBuffer = [],\n    loopId = 0\n  function initRenderLoop (state, commit) {\n    return setInterval(() => {\n      if (messagesBuffer.length) {\n        commit('setRTMessages', [...messagesBuffer])\n        messagesBuffer = []\n      }\n    }, 500)\n  }\n\n  async function pollingGet ({ state, commit, rootState }) {\n    await Vue.connector.subscribeMessagesDevices(state.active, (message) => {\n      messagesBuffer.push(JSON.parse(message))\n    }, { rh: 2 })\n    state.realtimeEnabled = true\n    return () => {\n      loopId = initRenderLoop(state, commit)\n    }\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    if (loopId) {\n      clearInterval(loopId)\n      messagesBuffer = []\n      loopId = 0\n    }\n    await Vue.connector.unsubscribeMessagesDevices(state.active)\n    state.realtimeEnabled = false\n  }\n\n  /* getting missed messages after offline */\n  async function getMissedMessages ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const lastIndexOffline = state.messages.reduceRight((result, value, index) => {\n          if (result) {\n            return result\n          }\n          if (value.__connectionStatus === 'offline') {\n            result = index\n          }\n          return result\n        }, 0)\n        const params = {\n          from: !lastIndexOffline ? 0 : Math.floor(state.messages[lastIndexOffline - 1].timestamp) + 1,\n          to: Math.floor(state.messages[lastIndexOffline + 1].timestamp)\n        }\n        const resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        commit('setMissingMessages', { data: data.result, index: lastIndexOffline })\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  return {\n    getMessages,\n    get,\n    getPrevPage,\n    getNextPage,\n    pollingGet,\n    getCols,\n    getHistory,\n    initTime,\n    unsubscribePooling,\n    getMissedMessages\n  }\n}\n","export default function ({ Vue, LocalStorage, filterHandler, newMessagesInterseptor }) {\n  let messagesKeyPointer = 0\n  function messagesIndexing (messages) {\n    if (!messages.length) { return }\n    messages.forEach((message, index) => {\n      messages[index]['x-flespi-message-key'] = messagesKeyPointer++\n    })\n  }\n\n  function setRTMessages (state, data) {\n    if (data && data.length) {\n      if (state.filter && filterHandler) {\n        data = filterHandler(state.filter, data)\n      }\n      messagesIndexing(data)\n      const messages = state.messages\n      if (state.sortBy) {\n        /* write by sorted field */\n        const message = data[0],\n          fieldName = state.sortBy,\n          length = state.messages.length - 1\n        let index = null,\n          escapeFlag = true\n        if (length > 0) {\n          for (let i = length; i !== 0 || escapeFlag; i--) {\n            if (messages[i][fieldName] > message[fieldName]) {\n              index = i\n              if (i === 0) {\n                escapeFlag = false\n              }\n            } else {\n              escapeFlag = false\n            }\n          }\n        }\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        if (index) {\n          messages.splice(index, 0, ...data)\n        } else {\n          messages.splice(messages.length, 0, ...data)\n        }\n      } else {\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        messages.splice(messages.length, 0, ...data)\n      }\n      limiting(state, { type: 'rt', count: data.length })\n    }\n  }\n\n  function prependMessages (state, data) {\n    if (data && data.length) {\n      data.reverse()\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(0, 0, ...data)\n    }\n  }\n\n  function appendMessages (state, data) {\n    if (data && data.length) {\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(messages.length, 0, ...data)\n    }\n  }\n\n  function setHistoryMessages (state, data) {\n    if (state.reverse) {\n      data.reverse()\n    }\n    messagesIndexing(data)\n    const messages = state.messages\n    newMessagesInterseptor && newMessagesInterseptor(data)\n    messages.splice(0, messages.length, ...data)\n  }\n\n  function clearMessages (state) {\n    state.messages.splice(0, state.messages.length)\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function limiting (state, { type, count }) {\n    if (!state.limit) { return false }\n    const messages = state.messages\n    const pages = state.pages\n    switch (type) {\n      case 'init': {\n        state.pages = count ? [count] : []\n        break\n      }\n      case 'prev': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[2]\n          state.pages = [count, ...pages.slice(0, -1)]\n          messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        } else {\n          state.pages = [count, ...pages]\n        }\n        break\n      }\n      case 'next': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[0]\n          state.pages = [...pages.slice(1, 3), count]\n          messages.splice(0, removeMessagesCount)\n        } else if (pagesCount < 3) {\n          pages.push(count)\n        }\n        break\n      }\n      case 'rt_init': {\n        pages.push(0)\n        break\n      }\n      case 'rt_deinit': {\n        const removeMessagesCount = pages.pop()\n        messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        break\n      }\n      case 'rt': {\n        const pagesCount = pages.length\n        const rtCount = pages[pagesCount - 1] || 0\n        if (rtCount + count > state.limit) {\n          if (pagesCount > 3) {\n            const removeMessagesCount = pages[0]\n            state.pages = [...pages.slice(1, -1), rtCount + count, 0]\n            messages.splice(0, removeMessagesCount)\n          } else {\n            state.pages = [...pages.slice(0, -1), rtCount + count, 0]\n          }\n        } else {\n          state.pages[pagesCount - 1] = rtCount + count\n        }\n      }\n    }\n    console.log([...state.pages], type, count, state.messages.length)\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      Vue.set(state, 'filter', value)\n    }\n  }\n\n  function setFrom (state, from) {\n    Vue.set(state, 'from', from)\n  }\n\n  function setTo (state, to) {\n    Vue.set(state, 'to', to)\n  }\n\n  function reqStart () {\n    if (DEV) {\n      console.log('Start Request Devices messages')\n    }\n  }\n\n  function setActive (state, id) {\n    Vue.set(state, 'active', id)\n  }\n\n  function setReverse (state, val) {\n    Vue.set(state, 'reverse', val)\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.from = 0\n    state.to = 0\n    state.limit = 1000\n    state.reverse = false\n    await Vue.connector.unsubscribeMessagesDevices(state.active)\n  }\n\n  function setCols (state, cols) {\n    let colsFromStorage = LocalStorage.getItem(state.name)\n    if (!colsFromStorage) {\n      colsFromStorage = {}\n    }\n    colsFromStorage[state.settings.device_type_id] = cols\n    LocalStorage.set(state.name, colsFromStorage)\n    Vue.set(state, 'cols', cols)\n  }\n\n  function setDefaultCols (state) {\n    state.cols.forEach((col, index) => {\n      if (col.__dest) { return }\n      if (state.defaultColsNames.includes(col.name)) {\n        Vue.set(state.cols[index], 'display', true)\n      } else {\n        Vue.set(state.cols[index], 'display', false)\n      }\n    })\n    updateCols(state, state.cols)\n  }\n\n  function setSettings (state, device) {\n    Vue.set(state, 'settings', device)\n  }\n\n  const updateCols = setCols\n\n  function setOffline (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      state.messages.push({ __connectionStatus: 'offline', timestamp: Date.now() / 1000 })\n    }\n    state.offline = true\n  }\n\n  function setReconnected (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      state.messages.push({ __connectionStatus: 'reconnected', timestamp: Date.now() / 1000 })\n    }\n    state.offline = false\n  }\n\n  function setMissingMessages (state, { data, index }) {\n    data.forEach((val) => {\n      val['x-flespi-status'] = 'missed'\n    })\n    state.messages.splice(index + 1, 0, ...data)\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setSortBy (state, field) {\n    Vue.set(state, 'sortBy', field)\n  }\n\n  function clearSortBy (state) {\n    Vue.set(state, 'sortBy', null)\n  }\n\n  return {\n    setOffline,\n    setReconnected,\n    setMissingMessages,\n    setHistoryMessages,\n    setRTMessages,\n    prependMessages,\n    appendMessages,\n    clearMessages,\n    setLimit,\n    limiting,\n    setFilter,\n    setFrom,\n    setTo,\n    reqStart,\n    setReverse,\n    clear,\n    setActive,\n    setCols,\n    updateCols,\n    setDefaultCols,\n    setSelected,\n    clearSelected,\n    setSortBy,\n    clearSortBy,\n    setSettings\n  }\n}\n","import getActions from './actions'\nimport getMutations from './mutations'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, filterHandler, newMessagesInterseptor }) {\n  const actions = getActions({ Vue, LocalStorage, errorHandler }),\n    mutations = getMutations({ Vue, LocalStorage, filterHandler, newMessagesInterseptor })\n\n  const state = {\n    name: name,\n    isLoading: false,\n    active: 0,\n    messages: [],\n    pages: [],\n    filter: '',\n    settings: {},\n    realtimeEnabled: false,\n    from: 0,\n    to: 0,\n    limit: 1000,\n    reverse: false,\n    cols: [],\n    defaultColsNames: ['timestamp', 'server.timestamp', 'ident', 'position.latitude', 'position.longitude', 'position.altitude', 'position.speed'],\n    offline: false,\n    selected: [],\n    sortBy: null\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n"],"names":["require$$0","arr","_Array$isArray","i","arr2","Array","length","iter","_isIterable","Object","prototype","toString","call","_Array$from","TypeError","arrayWithoutHoles","iterableToArray","nonIterableSpread","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","_Promise","then","fn","self","this","args","arguments","apply","err","undefined","Vue","LocalStorage","errorHandler","getParams","state","params","limit","count","filter","from","reverse","Math","floor","to","errorsCheck","data","errors","forEach","errObject","Error","reason","sysColsNeedInitFlags","commit","rootState","DEFAULT_COL_NAMES","defaultColsNames","needActions","actions","needEtc","etc","token","active","set","connector","gw","getDevices","deviceResp","deviceData","device","result","cols","colsFromStorage","getItem","name","device_type_id","__dest","unshift","width","display","push","getProtocolsDeviceTypes","fields","protocolResp","protocolData","protocolId","protocol_id","getProtocols","messageParamsResp","messageParamsData","messageParams","message_parameters","reduce","param","includes","locale","Date","match","addition","slice","DEV","console","log","getDevicesMessages","JSON","stringify","resp","date","now","round","timestamp","setHours","day","getMessages","isLoadingActive","isLoading","get","start","messagesCount","messages","needRT","loopId","startRTRender","pollingGet","stop","missedMessages","splice","unsubscribePooling","type","realtimeEnabled","_get","messagesBuffer","subscribeMessagesDevices","message","parse","rh","setInterval","clearInterval","unsubscribeMessagesDevices","lastIndexOffline","reduceRight","index","__connectionStatus","getPrevPage","getNextPage","getCols","getHistory","initTime","getMissedMessages","filterHandler","newMessagesInterseptor","messagesKeyPointer","messagesIndexing","clearMessages","clearSelected","limiting","pages","removeMessagesCount","pagesCount","pop","rtCount","setCols","settings","updateCols","setOffline","needPostOfflineMessage","offline","setReconnected","setMissingMessages","val","setHistoryMessages","setRTMessages","sortBy","fieldName","escapeFlag","prependMessages","appendMessages","setLimit","setFilter","setFrom","setTo","reqStart","setReverse","clear","setActive","id","setDefaultCols","col","setSelected","indexes","setSortBy","field","clearSortBy","setSettings","namespaced","selected","getActions","mutations","getMutations"],"mappings":"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"}