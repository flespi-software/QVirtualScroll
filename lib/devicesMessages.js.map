{"version":3,"file":"devicesMessages.js","sources":["../node_modules/@babel/runtime-corejs2/core-js/array/is-array.js","../node_modules/@babel/runtime-corejs2/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime-corejs2/core-js/array/from.js","../node_modules/@babel/runtime-corejs2/core-js/is-iterable.js","../node_modules/@babel/runtime-corejs2/helpers/iterableToArray.js","../node_modules/@babel/runtime-corejs2/helpers/nonIterableSpread.js","../node_modules/@babel/runtime-corejs2/helpers/toConsumableArray.js","../node_modules/@babel/runtime-corejs2/core-js/promise.js","../node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator.js","../src/store/modules/devicesMessages/actions.js","../src/store/modules/devicesMessages/mutations.js","../src/store/modules/devicesMessages/index.js"],"sourcesContent":["module.exports = require(\"core-js/library/fn/array/is-array\");","var _Array$isArray = require(\"../core-js/array/is-array\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (_Array$isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","module.exports = require(\"core-js/library/fn/array/from\");","module.exports = require(\"core-js/library/fn/is-iterable\");","var _Array$from = require(\"../core-js/array/from\");\n\nvar _isIterable = require(\"../core-js/is-iterable\");\n\nfunction _iterableToArray(iter) {\n  if (_isIterable(Object(iter)) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return _Array$from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","module.exports = require(\"core-js/library/fn/promise\");","var _Promise = require(\"../core-js/promise\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    _Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new _Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","import _get from 'lodash/get'\n\nexport default function ({ Vue, LocalStorage, errorHandler }) {\n  function getParams (state) {\n    let params = {}\n    if (state.limit) {\n      params.count = state.limit\n    }\n    if (state.filter) {\n      if (state.mode === 0) {\n        params.filter = `${state.filter}`\n      }\n    }\n    if (state.from && (!state.reverse || state.mode === 1)) {\n      if (!state.reverse) {\n        params.from = Math.floor(state.from / 1000)\n      }\n    }\n    if (state.to) {\n      if (state.mode === 1) {\n        state.to = Date.now()\n      }\n      params.to = Math.floor(state.to / 1000)\n    }\n    if (state.reverse) {\n      params.reverse = state.reverse\n    }\n    return params\n  }\n\n  function errorsCheck (data) {\n    if (data.errors) {\n      data.errors.forEach((error) => {\n        let errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    }\n  }\n\n  async function getCols ({ state, commit, rootState }) {\n    const DEFAULT_COL_NAMES = ['timestamp', 'position.latitude', 'position.longitude', 'position.altitude', 'position.speed']\n    commit('reqStart')\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        /* getting telemetry */\n        let deviceTelemetryResp = await Vue.connector.gw.getDevicesTelemetry(state.active)\n        let deviceTelemetryData = deviceTelemetryResp.data\n        errorsCheck(deviceTelemetryData)\n        let telemetry = deviceTelemetryData.result && deviceTelemetryData.result[0] && deviceTelemetryData.result[0].telemetry\n        /* getting device info */\n        let deviceResp = await Vue.connector.gw.getDevices(state.active)\n        let deviceData = deviceResp.data\n        errorsCheck(deviceData)\n        let device = deviceData.result && deviceData.result[0]\n        commit('setSettings', device)\n        let cols = [],\n          colsFromStorage = LocalStorage.getItem(state.name)\n        if (colsFromStorage && colsFromStorage[device.device_type_id] && colsFromStorage[device.device_type_id].length) {\n          /* remove after sometime 12.07.19 */\n          colsFromStorage[device.device_type_id].forEach((col) => {\n            if (col.name === 'timestamp') {\n              let locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n              col.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n            }\n          })\n          cols = colsFromStorage[device.device_type_id]\n        } else {\n          if (device.device_type_id) {\n            /* getting protocol id */\n            let protocolResp = await Vue.connector.gw.getProtocolsDeviceTypes('all', device.device_type_id, { fields: 'protocol_id' })\n            let protocolData = protocolResp.data\n            errorsCheck(protocolData)\n            let protocolId = protocolData.result && protocolData.result[0] && protocolData.result[0].protocol_id\n            /* gettings messages parameters */\n            let messageParamsResp = await Vue.connector.gw.getProtocols(protocolId, { fields: 'message_parameters' })\n            let messageParamsData = messageParamsResp.data\n            errorsCheck(messageParamsData)\n            let messageParams = messageParamsData.result && messageParamsData.result[0] && messageParamsData.result[0].message_parameters\n            /* initing columns by message parameters */\n            cols = messageParams.reduce((cols, param) => {\n              let name = param.name\n              if (name === 'timestamp') {\n                let locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n                cols.unshift({\n                  name,\n                  width: 190,\n                  display: false,\n                  addition: `${locale.slice(0, 3)}:${locale.slice(3)}`\n                })\n                return cols\n              }\n              cols.push({\n                name,\n                width: 150,\n                display: false\n              })\n              return cols\n            }, [])\n            /* enable cols by active telemetry */\n            if (telemetry) {\n              /* remove position object */\n              if (telemetry.position) {\n                delete telemetry.position\n              }\n              let colNames = Object.keys(telemetry)\n              if (cols.length && colNames) {\n                /* merging existed columns with telemetry for creating actual columns */\n                cols.forEach(col => {\n                  if (telemetry[col.name]) {\n                    col.display = true\n                  }\n                })\n              }\n            } else { /* enable default cols w/o saving */\n              cols = DEFAULT_COL_NAMES.reduce((cols, name) => {\n                let index = cols.findIndex((col) => col.name === name)\n                if (index === -1) {\n                  cols.push({\n                    name,\n                    width: 150,\n                    display: true\n                  })\n                } else {\n                  cols[index].display = true\n                }\n                return cols\n              }, cols)\n            }\n          }\n        }\n\n        if (telemetry) {\n          commit('setCols', cols)\n        } else {\n          Vue.set(state, 'cols', cols)\n        }\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  function getFromTo (val) {\n    let now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86399999\n    return { from, to }\n  }\n\n  async function initTime ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let params = {\n          reverse: true,\n          count: 1,\n          fields: 'timestamp'\n        }\n        let resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        let data = resp.data\n        errorsCheck(data)\n        let date = Date.now()\n        if (data.result.length) {\n          date = Math.round(data.result[0].timestamp * 1000)\n        }\n        let day = getFromTo(date)\n        commit('setFrom', day.from)\n        commit('setTo', day.to)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function getMessages ({ state, commit, rootState }, params) {\n    commit('reqStart')\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let currentMode = JSON.parse(JSON.stringify(state.mode))\n        let resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        /* if mode changed in time request */\n        if (currentMode !== state.mode) { return false }\n        let data = resp.data\n        errorsCheck(data)\n        Vue.set(state, 'isLoading', false)\n        return data.result\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function get ({ state, commit, rootState }) {\n    let messages = await getMessages({ state, commit, rootState }, getParams(state))\n    commit('setMessages', messages)\n  }\n\n  async function getPrevPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      let to = Math.floor(_get(state, 'messages[0].timestamp', state.to) - 1)\n      let params = getParams(state)\n      params.to = to\n      params.reverse = true\n      let messages = await getMessages({ state, commit, rootState }, params)\n      commit('prependMessages', messages)\n      return messages.length\n    }\n  }\n\n  async function getNextPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      let from = Math.floor(_get(state, `messages[${state.messages.length - 1}].timestamp`, state.from) + 1)\n      let params = getParams(state)\n      params.from = from\n      let messages = await getMessages({ state, commit, rootState }, params)\n      commit('appendMessages', messages)\n      return messages.length\n    }\n  }\n\n  async function getHistory ({ state, commit, rootState }, count) {\n    let limit = state.limit,\n      filter = state.filter\n    commit('setReverse', true)\n    commit('setLimit', count)\n    commit('setFilter', '')\n    await get({ state, commit, rootState })\n    commit('setReverse', false)\n    commit('setLimit', limit)\n    commit('setFilter', filter)\n  }\n\n  let messagesBuffer = [],\n    loopId = 0\n  function initRenderLoop (state, commit) {\n    return setInterval(() => {\n      if (messagesBuffer.length) {\n        if (state.mode === 1) {\n          commit('setMessages', [...messagesBuffer])\n        }\n        messagesBuffer = []\n      }\n    }, 500)\n  }\n\n  async function pollingGet ({ state, commit, rootState }) {\n    loopId = initRenderLoop(state, commit)\n    await Vue.connector.subscribeMessagesDevices(state.active, (message) => {\n      if (state.mode === 1) {\n        messagesBuffer.push(JSON.parse(message))\n      }\n    }, { rh: 2 })\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    if (loopId) { clearInterval(loopId) }\n    await Vue.connector.unsubscribeMessagesDevices(state.active)\n  }\n\n  /* getting missed messages after offline */\n  async function getMissedMessages ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let lastIndexOffline = state.messages.reduceRight((result, value, index) => {\n          if (result) {\n            return result\n          }\n          if (value.__connectionStatus === 'offline') {\n            result = index\n          }\n          return result\n        }, 0)\n        let params = {\n          from: !lastIndexOffline ? 0 : Math.floor(state.messages[lastIndexOffline - 1].timestamp) + 1,\n          to: Math.floor(state.messages[lastIndexOffline + 1].timestamp)\n        }\n        let resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        let data = resp.data\n        errorsCheck(data)\n        commit('setMissingMessages', { data: data.result, index: lastIndexOffline })\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  return {\n    getMessages,\n    get,\n    getPrevPage,\n    getNextPage,\n    pollingGet,\n    getCols,\n    getHistory,\n    initTime,\n    unsubscribePooling,\n    getMissedMessages\n  }\n}\n","export default function ({ Vue, LocalStorage, filterHandler, newMessagesInterseptor }) {\n  function getFromTo (val) {\n    let now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86400000\n    return { from, to }\n  }\n\n  function setRTMessages (state, data) {\n    if (data && data.length) {\n      if (state.reverse) {\n        data.reverse()\n        data[data.length - 1].delimiter = true\n      }\n      Vue.set(state, 'from', Math.floor((data[data.length - 1].timestamp + 1) * 1000))\n      if (state.filter && filterHandler) {\n        data = filterHandler(state.filter, data)\n      }\n      let messages = state.messages\n      if (state.sortBy) {\n        if (data.length > 1) {\n          /* write history for rt mode */\n          messages = messages.concat(data)\n        } else {\n          /* write by sorted field */\n          let message = data[0],\n            fieldName = state.sortBy,\n            length = state.messages.length - 1,\n            index = null,\n            escapeFlag = true\n          if (length > 0) {\n            for (let i = length; i !== 0 || escapeFlag; i--) {\n              if (messages[i][fieldName] > message[fieldName]) {\n                index = i\n                if (i === 0) {\n                  escapeFlag = false\n                }\n              } else {\n                escapeFlag = false\n              }\n            }\n          }\n          if (index) {\n            messages.splice(index, 0, message)\n          } else {\n            messages.push(message)\n          }\n        }\n      } else {\n        messages = messages.concat(data)\n      }\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      if (state.limit && messages.length >= state.limit + (state.limit * 0.1)) { // rt limiting\n        let count = (messages.length - 1) - (state.limit - 1)\n        messages = messages.slice(count)\n        Vue.set(state, 'selected', state.selected.map((index) => index - count))\n      }\n      Vue.set(state, 'messages', messages)\n    } else {\n      Vue.set(state, 'from', state.to + 1000)\n    }\n  }\n\n  function prependMessages (state, data) {\n    if (data && data.length) {\n      data.reverse()\n      let messages = state.messages\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(0, 0, ...data)\n      if (state.limit && (state.limit * 3) < messages.length) {\n        let limit = state.limit * 3 // 3 pages in memory\n        let overCount = messages.length - limit\n        messages.splice(messages.length - overCount, overCount)\n      }\n    }\n  }\n\n  function appendMessages (state, data) {\n    if (data && data.length) {\n      let messages = state.messages\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(messages.length, 0, ...data)\n      if (state.limit && (state.limit * 3) < messages.length) {\n        let limit = state.limit * 3 // 3 pages in memory\n        messages.splice(0, messages.length - limit)\n      }\n    }\n  }\n\n  function setHistoryMessages (state, data) {\n    if (data && data.length) {\n      if (state.reverse) {\n        data.reverse()\n      }\n      let messages = state.messages\n      messages = messages.concat(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      Vue.set(state, 'messages', messages)\n    } else {\n      Vue.set(state, 'messages', [])\n    }\n  }\n\n  function setMessages (state, data) {\n    if (state.mode === 1) {\n      setRTMessages(state, data)\n    } else {\n      setHistoryMessages(state, data)\n    }\n  }\n\n  function clearMessages (state) {\n    Vue.set(state, 'messages', [])\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      if (state.mode === 1) {\n        if (state.filter) {\n          state.messages.push({ 'x-flespi-filter-prev': state.filter })\n        }\n        if (value) {\n          state.messages.push({ 'x-flespi-filter-next': value })\n        }\n      }\n      Vue.set(state, 'filter', value)\n    }\n  }\n\n  function setMode (state, mode) {\n    switch (mode) {\n      case 0: {\n        let timeObj = state.from ? getFromTo(state.from) : getFromTo()\n        state.from = timeObj.from\n        state.to = timeObj.to\n        clearMessages(state)\n        break\n      }\n      case 1: {\n        let now = Date.now() - 4000\n        state.from = now - 1000\n        state.to = now\n        break\n      }\n    }\n    Vue.set(state, 'mode', mode)\n  }\n\n  function setFrom (state, from) {\n    Vue.set(state, 'from', from)\n  }\n\n  function setTo (state, to) {\n    Vue.set(state, 'to', to)\n  }\n\n  function reqStart () {\n    if (DEV) {\n      console.log('Start Request Devices messages')\n    }\n  }\n\n  function setActive (state, id) {\n    Vue.set(state, 'active', id)\n  }\n\n  function setReverse (state, val) {\n    Vue.set(state, 'reverse', val)\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.mode = null\n    state.from = 0\n    state.to = 0\n    state.limit = 1000\n    state.reverse = false\n    await Vue.connector.unsubscribeMessagesDevices(state.active)\n  }\n\n  function setCols (state, cols) {\n    let colsFromStorage = LocalStorage.getItem(state.name)\n    if (!colsFromStorage) {\n      colsFromStorage = {}\n    }\n    colsFromStorage[state.settings.device_type_id] = cols\n    LocalStorage.set(state.name, colsFromStorage)\n    Vue.set(state, 'cols', cols)\n  }\n\n  function setSettings (state, device) {\n    Vue.set(state, 'settings', device)\n  }\n\n  let updateCols = setCols\n\n  function setOffline (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      setMessages(state, [{ __connectionStatus: 'offline', timestamp: Date.now() / 1000 }])\n    }\n    state.offline = true\n  }\n\n  function setReconnected (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      setMessages(state, [{ __connectionStatus: 'reconnected', timestamp: Date.now() / 1000 }])\n    }\n    state.offline = false\n  }\n\n  function setMissingMessages (state, { data, index }) {\n    data.forEach((val) => {\n      val.__status = 'missed'\n    })\n    state.messages.splice(index + 1, 0, ...data)\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setSortBy (state, field) {\n    Vue.set(state, 'sortBy', field)\n  }\n\n  function clearSortBy (state) {\n    Vue.set(state, 'sortBy', null)\n  }\n\n  return {\n    setOffline,\n    setReconnected,\n    setMissingMessages,\n    setMessages,\n    prependMessages,\n    appendMessages,\n    clearMessages,\n    setLimit,\n    setFilter,\n    setMode,\n    setFrom,\n    setTo,\n    reqStart,\n    setReverse,\n    clear,\n    setActive,\n    setCols,\n    updateCols,\n    setSelected,\n    clearSelected,\n    setSortBy,\n    clearSortBy,\n    setSettings\n  }\n}\n","import getActions from './actions'\nimport getMutations from './mutations'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, filterHandler, newMessagesInterseptor }) {\n  let actions = getActions({ Vue, LocalStorage, errorHandler }),\n    mutations = getMutations({ Vue, LocalStorage, filterHandler, newMessagesInterseptor })\n\n  const state = {\n    name: name,\n    isLoading: false,\n    active: 0,\n    messages: [],\n    filter: '',\n    settings: {},\n    mode: null,\n    from: 0,\n    to: 0,\n    limit: 1000,\n    reverse: false,\n    cols: [],\n    offline: false,\n    selected: [],\n    sortBy: null\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n"],"names":["require$$0","arr","_Array$isArray","i","arr2","Array","length","iter","_isIterable","Object","prototype","toString","call","_Array$from","TypeError","arrayWithoutHoles","iterableToArray","nonIterableSpread","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","_Promise","then","fn","self","this","args","arguments","apply","err","undefined","Vue","LocalStorage","errorHandler","getParams","state","params","limit","count","filter","mode","from","reverse","Math","floor","to","Date","now","errorsCheck","data","errors","forEach","errObject","Error","reason","commit","rootState","DEFAULT_COL_NAMES","token","active","set","connector","gw","getDevicesTelemetry","deviceTelemetryResp","deviceTelemetryData","telemetry","result","getDevices","deviceResp","deviceData","device","cols","colsFromStorage","getItem","name","device_type_id","col","locale","match","addition","slice","getProtocolsDeviceTypes","fields","protocolResp","protocolData","protocolId","protocol_id","getProtocols","messageParamsResp","messageParamsData","messageParams","message_parameters","reduce","param","push","width","display","unshift","position","colNames","keys","index","findIndex","DEV","console","log","getDevicesMessages","JSON","stringify","resp","date","round","timestamp","setHours","day","getMessages","currentMode","parse","get","messages","isLoading","_get","messagesBuffer","loopId","initRenderLoop","setInterval","subscribeMessagesDevices","message","rh","clearInterval","unsubscribeMessagesDevices","lastIndexOffline","reduceRight","__connectionStatus","getPrevPage","getNextPage","pollingGet","getCols","getHistory","initTime","unsubscribePooling","getMissedMessages","filterHandler","newMessagesInterseptor","getFromTo","val","setMessages","delimiter","sortBy","concat","fieldName","escapeFlag","splice","selected","map","setRTMessages","setHistoryMessages","clearMessages","clearSelected","setCols","settings","setOffline","needPostOfflineMessage","offline","setReconnected","setMissingMessages","__status","prependMessages","overCount","appendMessages","setLimit","setFilter","setMode","timeObj","setFrom","setTo","reqStart","setReverse","clear","setActive","id","updateCols","setSelected","indexes","setSortBy","field","clearSortBy","setSettings","namespaced","actions","getActions","mutations","getMutations"],"mappings":"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"}