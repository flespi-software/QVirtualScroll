{"version":3,"file":"devicesMessages.js","sources":["../src/store/modules/ls.js","../src/store/modules/devicesMessages/actions.js","../src/store/modules/devicesMessages/mutations.js","../src/infrastructure/logger.js","../src/store/modules/devicesMessages/index.js"],"sourcesContent":["import get from 'lodash/get'\nimport set from 'lodash/set'\n\nfunction splitSchemas (cols) {\n  const customColsSchema = {\n    ...cols.schemas,\n    _default: undefined,\n    _protocol: undefined,\n    _unsaved: undefined\n  }\n  const defaultColsSchema = {\n    activeSchema: cols.activeSchema,\n    schemas: {\n      _default: cols.schemas._default,\n      _protocol: cols.schemas._protocol,\n      _unsaved: cols.schemas._unsaved\n    }\n  }\n  return { customColsSchema, defaultColsSchema }\n}\nfunction getColsLS (LocalStorage, lsNamespace, name) {\n  let colsFromStorage = {}\n  if (lsNamespace) {\n    const lsPath = lsNamespace.split('.'),\n      lsItemName = lsPath.shift(),\n      lsRouteToItem = `${lsPath.join('.')}.${name}`,\n      appStorage = LocalStorage.getItem(lsItemName)\n    colsFromStorage = get(appStorage, lsRouteToItem, colsFromStorage)\n  } else {\n    colsFromStorage = LocalStorage.getItem(name) || colsFromStorage\n  }\n  return colsFromStorage\n}\n\nfunction setColsLS (LocalStorage, lsNamespace, name, active, cols) {\n  const colsFromStorage = getColsLS(LocalStorage, lsNamespace, name) || {}\n  const { customColsSchema, defaultColsSchema } = splitSchemas(cols)\n  colsFromStorage[active] = defaultColsSchema\n  colsFromStorage['custom-cols-schemas'] = { ...customColsSchema }\n  if (lsNamespace) {\n    const lsPath = lsNamespace.split('.'),\n      lsItemName = lsPath.shift(),\n      lsRouteToItem = `${lsPath.join('.')}.${name}`,\n      appStorage = LocalStorage.getItem(lsItemName) || {}\n    set(appStorage, lsRouteToItem, colsFromStorage)\n    LocalStorage.set(lsItemName, appStorage)\n  } else {\n    LocalStorage.set(name, colsFromStorage)\n  }\n}\n\nexport {\n  getColsLS,\n  setColsLS\n}\n","import _get from 'lodash/get'\nimport { getColsLS, setColsLS } from '../ls'\n\nconst defaultCols = ['timestamp', 'server.timestamp', 'ident', 'position.latitude', 'position.longitude', 'position.altitude', 'position.speed']\n\nexport default function ({ Vue, LocalStorage, errorHandler, logger }) {\n  function getParams (state) {\n    const params = {}\n    if (state.limit) {\n      params.count = state.limit\n    }\n    if (state.filter) {\n      params.filter = `${state.filter}`\n    }\n    if (state.from) {\n      params.from = state.from / 1000\n    }\n    if (state.to) {\n      params.to = state.to / 1000\n    }\n    if (state.reverse) {\n      params.reverse = state.reverse\n    }\n    return params\n  }\n\n  function errorsCheck (commit, data) {\n    if (data.errors) {\n      commit('reqError', data.errors)\n      data.errors.forEach((error) => {\n        const errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    } else {\n      commit('reqFullfiled')\n    }\n  }\n\n  function getDefaultEnum () {\n    const locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n    return defaultCols.reduce((res, name) => {\n      res[name] = { name }\n      if (name.match(/timestamp$/)) {\n        res[name].addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n        res[name].type = ''\n        res[name].unit = ''\n      }\n      return res\n    }, {})\n  }\n\n  function getDefaultColsSchema () {\n    return {\n      activeSchema: '_default',\n      schemas: {\n        _default: {\n          name: '_default',\n          cols: defaultCols.map(name => ({ name, width: 150 }))\n        }\n      },\n      enum: getDefaultEnum()\n    }\n  }\n\n  async function getCols ({ state, commit, rootState }, sysColsNeedInitFlags) {\n    const needEtc = sysColsNeedInitFlags.etc\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        /* getting device info */\n        const deviceResp = await Vue.connector.gw.getDevices(state.active)\n        const deviceData = deviceResp.data\n        errorsCheck(commit, deviceData)\n        const device = deviceData.result && deviceData.result[0]\n        commit('setSettings', device)\n        let colsFromStorage = getColsLS(LocalStorage, state.lsNamespace, state.name)\n        colsFromStorage = (colsFromStorage && colsFromStorage[device.device_type_id])\n        const colsSchema = colsFromStorage || getDefaultColsSchema()\n        const customColsSchemas = (colsFromStorage && colsFromStorage['custom-cols-schemas'])\n          ? colsFromStorage['custom-cols-schemas'] : {}\n        colsSchema.schemas = { ...colsSchema.schemas, ...customColsSchemas }\n        if (!colsSchema.enum) {\n          colsSchema.enum = getDefaultEnum()\n        }\n        if (device.device_type_id) {\n          /* getting protocol id */\n          const protocolResp = await Vue.connector.gw.getChannelProtocolsDeviceTypes('all', device.device_type_id, { fields: 'protocol_id' })\n          commit('reqStart', { endpoint: 'getChannelProtocolsDeviceTypes', active:  device.device_type_id, fields: 'protocol_id' })\n          const protocolData = protocolResp.data\n          errorsCheck(commit, protocolData)\n          const protocolId = protocolData.result && protocolData.result[0] && protocolData.result[0].protocol_id\n          /* gettings messages parameters */\n          const messageParamsResp = await Vue.connector.gw.getChannelProtocols(protocolId, { fields: 'message_parameters' })\n          commit('reqStart', { endpoint: 'getChannelProtocols', active: protocolId, fields: 'message_parameters' })\n          const messageParamsData = messageParamsResp.data\n          errorsCheck(commit, messageParamsData)\n          const messageParams = messageParamsData.result && messageParamsData.result[0] && messageParamsData.result[0].message_parameters\n          /* initing columns by message parameters */\n          colsSchema.schemas._protocol = {\n            name: '_protocol',\n            cols: []\n          }\n          const locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n          messageParams.forEach((param) => {\n            const name = param.name\n            const enumCol = {\n              name,\n              type: param.type || '',\n              unit: param.unit || '',\n              description: param.info || ''\n            }\n            const schemaCol = {\n              name,\n              width: 150\n            }\n            if (name.match(/timestamp$/)) {\n              enumCol.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n              enumCol.type = ''\n              enumCol.unit = ''\n              schemaCol.width = 190\n              if (name === 'timestamp') {\n                colsSchema.schemas._protocol.cols.unshift(schemaCol)\n                colsSchema.enum.timestamp = enumCol\n                return\n              }\n            }\n            colsSchema.schemas._protocol.cols.push(schemaCol)\n            colsSchema.enum[name] = enumCol\n          })\n        }\n        if (needEtc) {\n          device.device_type_id && colsSchema.schemas._protocol.cols.push({ name: 'etc', width: 150, __dest: 'etc' })\n          !colsFromStorage && colsSchema.schemas._default.cols.push({ name: 'etc', width: 150, __dest: 'etc' })\n        }\n        colsSchema.enum.etc = { name: 'etc', __dest: 'etc' }\n        commit('setCols', colsSchema)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  function getFromTo (val) {\n    const now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86399999.999\n    return { from, to }\n  }\n\n  async function initTime ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const params = {\n          reverse: true,\n          count: 1,\n          fields: 'timestamp'\n        }\n        const resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        commit('reqStart', { endpoint: 'getDevicesMessages-initTime', active: state.active, data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(commit, data)\n        let date = Date.now()\n        if (data.result.length) {\n          date = Math.round(data.result[0].timestamp * 1000)\n        }\n        const day = getFromTo(date)\n        commit('setFrom', day.from)\n        commit('setTo', day.to)\n        if (day.to < Date.now()) {\n          await newMessagesCheck({ state })\n        }\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function getMessages ({ state, commit, rootState }, params) {\n    let result = []\n    if (rootState.token && state.active) {\n      const isLoadingActive = state.isLoading\n      try {\n        !isLoadingActive && Vue.set(state, 'isLoading', true)\n        const resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        commit('reqStart', { endpoint: 'getDevicesMessages', active: state.active, data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(commit, data)\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n        result = data.result || []\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n      }\n    }\n    return result\n  }\n\n  async function getMessagesByInitTimestamp ({ state, commit, rootState }, initTimestamp) {\n    const params = getParams(state)\n    const beforeMessagesParams = {\n      ...params,\n      from: state.from / 1000,\n      to: initTimestamp,\n      reverse: true,\n      count: state.limit / 2\n    }\n    const beforeMessages = await getMessages({ state, commit, rootState }, beforeMessagesParams)\n    const afterMessagesParams = {\n      from: initTimestamp + 0.000001,\n      to: state.to / 1000,\n      count: state.limit - beforeMessages.length\n    }\n    const afterMessages = await getMessages({ state, commit, rootState }, afterMessagesParams)\n    const messages = [...beforeMessages.reverse(), ...afterMessages]\n    return messages\n  }\n\n  async function get ({ state, commit, rootState }, initTimestamp) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      if (loopId) {\n        await unsubscribePooling({ state, commit, rootState })\n      }\n      const start = (Date.now() + 0.000999) / 1000\n      let messagesCount = 0\n      let messages = []\n      const params = getParams(state)\n      if (initTimestamp) {\n        messages = await getMessagesByInitTimestamp({ state, commit, rootState }, initTimestamp)\n      } else {\n        messages = await getMessages({ state, commit, rootState }, params)\n      }\n      messagesCount += messages.length\n      const now = (Date.now() + 0.000999) / 1000\n      const needRT = (params.to >= now && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        if (initTimestamp) {\n          const stop = (Date.now() + 0.000999) / 1000\n          const params = getParams(state)\n          params.from = start\n          params.to = stop\n          const missedMessages = await getMessages({ state, commit, rootState }, params)\n          messagesCount += missedMessages.length\n          messages.splice(0, 0, ...missedMessages)\n        }\n      } else if ((params.to < now || (state.limit && messages.length >= state.limit)) && loopId) {\n        await unsubscribePooling({ state, commit, rootState })\n      }\n      commit('limiting', { type: 'init', count: messagesCount })\n      commit('setHistoryMessages', messages)\n      if (needRT || state.realtimeEnabled) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n    }\n  }\n\n  async function getPrevPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      const to = _get(state, 'messages[0].timestamp', state.to) - 0.000001\n      const params = getParams(state)\n      params.to = to\n      params.reverse = true\n      if (loopId && state.messages.length > state.limit * 2) {\n        await unsubscribePooling({ state, commit, rootState })\n        commit('limiting', { type: 'rt_deinit' })\n      }\n      const messages = await getMessages({ state, commit, rootState }, params)\n      if (!messages.length) {\n        Vue.set(state, 'isLoading', false)\n        return 0\n      }\n      commit('limiting', { type: 'prev', count: messages.length })\n      commit('prependMessages', messages)\n      Vue.set(state, 'isLoading', false)\n      return messages.length\n    }\n  }\n\n  async function getNextPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      if (state.realtimeEnabled) { return }\n      Vue.set(state, 'isLoading', true)\n      const start = Date.now()\n      const from = _get(state, `messages[${state.messages.length - 1}].timestamp`, state.from) + 0.000001\n      const params = getParams(state)\n      let messagesCount = 0\n      params.from = from\n      const messages = await getMessages({ state, commit, rootState }, params)\n      messagesCount += messages.length\n      const needRT = (params.to > Math.floor(Date.now() / 1000) && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        const stop = Date.now()\n        const params = getParams(state)\n        params.from = start / 1000\n        params.to = stop / 1000\n        const missedMessages = await getMessages({ state, commit, rootState }, params)\n        messagesCount += missedMessages.length\n        messages.splice(messages.length, 0, ...missedMessages)\n      }\n      commit('limiting', { type: 'next', count: messagesCount })\n      commit('appendMessages', messages)\n      if (needRT) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n      return messagesCount\n    }\n  }\n\n  async function getHistory ({ state, commit, rootState }, count) {\n    const limit = state.limit\n    commit('clearMessages')\n    commit('setReverse', true)\n    commit('setLimit', count)\n    await get({ state, commit, rootState })\n    commit('setReverse', false)\n    commit('setLimit', limit)\n  }\n\n  let messagesBuffer = [],\n    loopId = 0\n  function initRenderLoop (state, commit) {\n    return setInterval(() => {\n      if (messagesBuffer.length) {\n        commit('setRTMessages', [...messagesBuffer])\n        messagesBuffer = []\n      }\n    }, 500)\n  }\n\n  async function pollingGet ({ state, commit, rootState }) {\n    const filter = state.filter ? `$filter/payload=${encodeURIComponent(state.filter)}` : undefined\n    await Vue.connector.subscribeMessagesDevices(state.active, (message) => {\n      messagesBuffer.push(JSON.parse(message))\n    }, { rh: 2, prefix: filter })\n    state.realtimeEnabled = true\n    logger.info(`subscribed to messagesDevices ${state.active} ${filter || ''}`)\n    return () => {\n      loopId = initRenderLoop(state, commit)\n    }\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    if (loopId) {\n      clearInterval(loopId)\n      messagesBuffer = []\n      loopId = 0\n    }\n    const filter = state.filter ? `$filter/payload=${encodeURIComponent(state.filter)}` : undefined\n    await Vue.connector.unsubscribeMessagesDevices(state.active, undefined, { prefix: filter })\n    state.realtimeEnabled = false\n    logger.info(`unsubscribed to messagesDevices ${state.active} ${filter || ''}`)\n  }\n\n  /* getting missed messages after offline */\n  async function getMissedMessages ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const { start, end, lastMessageIndex } = state.offline\n        const params = {\n          from: start,\n          to: end\n        }\n        if (state.filter) { params.data.filter = state.filter }\n        const resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        commit('reqStart', { endpoint: 'getDevicesMessages', active: state.active, data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(commit, data)\n        commit('setMissingMessages', { data: data.result, index: lastMessageIndex })\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function newMessagesCheck ({ state }) {\n    state.hasNewMessages = false\n    await Vue.connector.subscribeMessagesDevices(state.active, () => {\n      state.hasNewMessages = true\n      unsubscribePooling({ state })\n    }, { rh: 2 })\n    logger.info(`newMessagesCheck subscribed to messagesDevice ${state.active}`)\n  }\n\n  return {\n    getMessages,\n    get,\n    getPrevPage,\n    getNextPage,\n    pollingGet,\n    getCols,\n    getHistory,\n    getMessagesByInitTimestamp,\n    initTime,\n    unsubscribePooling,\n    getMissedMessages\n  }\n}\n","import { setColsLS } from '../ls'\nexport default function ({ Vue, LocalStorage, newMessagesInterseptor, logger }) {\n  let messagesKeyPointer = 0\n  function messagesIndexing (messages) {\n    if (!messages.length) { return }\n    messages.forEach((message, index) => {\n      Object.defineProperty(messages[index], 'x-flespi-message-key', {\n        value: messagesKeyPointer++,\n        enumerable: false\n      })\n    })\n  }\n\n  function setRTMessages (state, data) {\n    if (data && data.length) {\n      messagesIndexing(data)\n      const messages = state.messages\n      if (state.sortBy) {\n        /* write by sorted field */\n        const message = data[0],\n          fieldName = state.sortBy,\n          length = state.messages.length - 1\n        let index = null,\n          escapeFlag = true\n        if (length > 0) {\n          for (let i = length; i !== 0 || escapeFlag; i--) {\n            if (messages[i][fieldName] > message[fieldName]) {\n              index = i\n              if (i === 0) {\n                escapeFlag = false\n              }\n            } else {\n              escapeFlag = false\n            }\n          }\n        }\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        if (index) {\n          messages.splice(index, 0, ...data)\n        } else {\n          messages.splice(messages.length, 0, ...data)\n        }\n      } else {\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        messages.splice(messages.length, 0, ...data)\n      }\n      limiting(state, { type: 'rt', count: data.length })\n      logger.info(`setRTMessages: length: ${data.length}`)\n    }\n  }\n\n  function prependMessages (state, data) {\n    if (data && data.length) {\n      data.reverse()\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(0, 0, ...data)\n    }\n    logger.info(`prependMessages: length: ${data.length}`)\n  }\n\n  function appendMessages (state, data) {\n    if (data && data.length) {\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(messages.length, 0, ...data)\n    }\n    logger.info(`appendMessages: length: ${data.length}`)\n  }\n\n  function setHistoryMessages (state, data) {\n    if (state.reverse) {\n      data.reverse()\n    }\n    messagesIndexing(data)\n    newMessagesInterseptor && newMessagesInterseptor(data)\n    state.messages = data\n    logger.info(`setHistoryMessages: length: ${data.length}, reverse:${state.reverse}`)\n  }\n\n  function clearMessages (state) {\n    state.messages.splice(0, state.messages.length)\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n    logger.info(`clearMessages`)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function limiting (state, { type, count }) {\n    if (!state.limit) { return false }\n    const messages = state.messages\n    const pages = state.pages\n    switch (type) {\n      case 'init': {\n        state.pages = count ? [count] : []\n        break\n      }\n      case 'prev': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[2]\n          state.pages = [count, ...pages.slice(0, -1)]\n          messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        } else {\n          state.pages = [count, ...pages]\n        }\n        break\n      }\n      case 'next': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[0]\n          state.pages = [...pages.slice(1, 3), count]\n          messages.splice(0, removeMessagesCount)\n        } else if (pagesCount < 3) {\n          pages.push(count)\n        }\n        break\n      }\n      case 'rt_init': {\n        pages.push(0)\n        break\n      }\n      case 'rt_deinit': {\n        const removeMessagesCount = pages.pop()\n        messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        break\n      }\n      case 'rt': {\n        const pagesCount = pages.length\n        const rtCount = pages[pagesCount - 1] || 0\n        if (rtCount + count > state.limit) {\n          if (pagesCount > 3) {\n            const removeMessagesCount = pages[0]\n            state.pages = [...pages.slice(1, -1), rtCount + count, 0]\n            messages.splice(0, removeMessagesCount)\n          } else {\n            state.pages = [...pages.slice(0, -1), rtCount + count, 0]\n          }\n        } else {\n          state.pages[pagesCount - 1] = rtCount + count\n        }\n      }\n    }\n    logger.info(`limiting: ${type} - count: ${count}`)\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      Vue.set(state, 'filter', value)\n    }\n    logger.info(`setFilter: ${value}`)\n  }\n\n  function setFrom (state, from) {\n    Vue.set(state, 'from', from)\n    logger.info(`setFrom: ${from}`)\n  }\n\n  function setTo (state, to) {\n    Vue.set(state, 'to', to)\n    logger.info(`setTo: ${to}`)\n  }\n\n  function reqStart (state, params) {\n    logger.info(`reqStart: ${JSON.stringify(params)}`)\n  }\n\n  function reqFullfiled () {\n    logger.info(`reqFullfiled`)\n  }\n\n  function reqError (state, error) {\n    logger.info(`reqError: ${JSON.stringify(error)}`)\n  }\n\n  function setActive (state, id) {\n    Vue.set(state, 'active', id)\n    logger.info(`setActive: ${id}`)\n  }\n\n  function setReverse (state, val) {\n    Vue.set(state, 'reverse', val)\n    logger.info(`setReverse: ${val}`)\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.from = 0\n    state.to = 0\n    state.limit = 1000\n    state.reverse = false\n    await Vue.connector.unsubscribeMessagesDevices(state.active)\n    logger.info(`clear module`)\n    logger.info(`unsubscribeMessagesDevices ${state.active}`)\n  }\n\n  function setCols (state, cols) {\n    setColsLS(LocalStorage, state.lsNamespace, state.name, state.settings.device_type_id, cols)\n    Vue.set(state, 'cols', cols)\n  }\n\n  function setSettings (state, device) {\n    Vue.set(state, 'settings', device)\n    logger.info(`setSettings: ${device}`)\n  }\n\n  const updateCols = setCols\n\n  function setOffline (state) {\n    state.offline = {\n      start: Date.now() / 1000,\n      lastMessageIndex: state.messages.length - 1\n    }\n    logger.info(`setOffline`)\n  }\n\n  function setReconnected (state) {\n    state.offline.end = Date.now() / 1000\n    logger.info(`setReconnected`)\n  }\n\n  function clearOfflineState (state) {\n    state.offline = false\n  }\n\n  function setMissingMessages (state, { data, index }) {\n    state.messages.splice(index + 1, 0, ...data)\n    logger.info(`setMissingMessages: ${data.length}`)\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setSortBy (state, field) {\n    Vue.set(state, 'sortBy', field)\n  }\n\n  function clearSortBy (state) {\n    Vue.set(state, 'sortBy', null)\n  }\n\n  return {\n    setOffline,\n    setReconnected,\n    clearOfflineState,\n    setMissingMessages,\n    setHistoryMessages,\n    setRTMessages,\n    prependMessages,\n    appendMessages,\n    clearMessages,\n    setLimit,\n    limiting,\n    setFilter,\n    setFrom,\n    setTo,\n    reqStart,\n    reqFullfiled,\n    reqError,\n    setReverse,\n    clear,\n    setActive,\n    setCols,\n    updateCols,\n    setSelected,\n    clearSelected,\n    setSortBy,\n    clearSortBy,\n    setSettings\n  }\n}\n","export class Logger {\n  constructor (name = 'ModuleLogger') {\n    this.name = `[${name}]`\n  }\n\n  extendName (suffix) {\n    return new Logger(`${this.name}[${suffix}]`)\n  }\n\n  info () {\n    console.info(...Array.from(arguments).map(msg => `${this.name} ${msg}`))\n  }\n\n  error () {\n    console.error(...Array.from(arguments).map(msg => `${this.name} ${msg}`))\n  }\n\n  warn () {\n    console.warn(...Array.from(arguments).map(msg => `${this.name} ${msg}`))\n  }\n}\n","import getActions from './actions'\nimport getMutations from './mutations'\nimport get from 'lodash/get'\nimport Vue from 'vue'\nimport { Logger } from '../../../infrastructure/logger'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, newMessagesInterseptor }) {\n  const lsNamespace = get(name, 'lsNamespace', undefined)\n  name = get(name, 'name', name)\n  const logger = Vue.$logger ? Vue.$logger.extendName(name) : new Logger(name)\n  const actions = getActions({ Vue, LocalStorage, errorHandler, logger }),\n    mutations = getMutations({ Vue, LocalStorage, newMessagesInterseptor, logger })\n\n  const state = {\n    name,\n    lsNamespace,\n    isLoading: false,\n    active: 0,\n    messages: [],\n    pages: [],\n    filter: '',\n    settings: {},\n    realtimeEnabled: false,\n    from: 0,\n    to: 0,\n    limit: 1000,\n    reverse: false,\n    cols: undefined,\n    offline: false,\n    selected: [],\n    sortBy: null,\n    hasNewMessages: null\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n"],"names":["getColsLS","LocalStorage","lsNamespace","name","colsFromStorage","lsPath","split","lsItemName","shift","lsRouteToItem","join","appStorage","getItem","get","defaultCols","getActions","Vue","errorHandler","logger","getParams","state","params","limit","count","filter","from","to","reverse","errorsCheck","commit","data","errors","forEach","error","errObject","Error","reason","getDefaultEnum","locale","Date","toString","match","reduce","res","addition","slice","type","unit","async","getMessages","rootState","result","token","active","isLoadingActive","isLoading","set","resp","connector","gw","getDevicesMessages","JSON","stringify","endpoint","e","DEV","console","log","getMessagesByInitTimestamp","initTimestamp","beforeMessagesParams","beforeMessages","afterMessagesParams","length","afterMessages","loopId","unsubscribePooling","start","now","messagesCount","messages","needRT","startRTRender","pollingGet","stop","missedMessages","splice","realtimeEnabled","messagesBuffer","encodeURIComponent","undefined","subscribeMessagesDevices","message","push","parse","rh","prefix","info","setInterval","initRenderLoop","clearInterval","unsubscribeMessagesDevices","getPrevPage","_get","getNextPage","Math","floor","getCols","sysColsNeedInitFlags","needEtc","etc","deviceData","getDevices","device","device_type_id","colsSchema","activeSchema","schemas","_default","cols","map","width","enum","customColsSchemas","protocolResp","getChannelProtocolsDeviceTypes","fields","protocolData","protocolId","protocol_id","messageParamsResp","getChannelProtocols","messageParamsData","messageParams","message_parameters","_protocol","param","enumCol","description","schemaCol","unshift","timestamp","__dest","getHistory","initTime","date","round","day","val","setHours","getFromTo","hasNewMessages","newMessagesCheck","getMissedMessages","end","lastMessageIndex","offline","index","getMutations","newMessagesInterseptor","messagesKeyPointer","messagesIndexing","Object","defineProperty","value","enumerable","clearMessages","clearSelected","limiting","pages","removeMessagesCount","pagesCount","pop","rtCount","setCols","customColsSchema","defaultColsSchema","_unsaved","splitSchemas","setColsLS","settings","setOffline","setReconnected","clearOfflineState","setMissingMessages","setHistoryMessages","setRTMessages","sortBy","fieldName","escapeFlag","i","prependMessages","appendMessages","setLimit","setFilter","setFrom","setTo","reqStart","reqFullfiled","reqError","setReverse","clear","setActive","id","updateCols","setSelected","indexes","setSortBy","field","clearSortBy","setSettings","Logger","constructor","this","extendName","suffix","Array","arguments","msg","warn","$logger","namespaced","selected","actions","mutations"],"mappings":"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"}