{"version":3,"file":"devicesMessages.js","sources":["../src/store/modules/devicesMessages/index.js","../src/store/modules/devicesMessages/actions.js","../src/store/modules/devicesMessages/mutations.js"],"sourcesContent":["import getActions from './actions'\nimport getMutations from './mutations'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, filterHandler, newMessagesInterseptor }) {\n  let actions = getActions({ Vue, LocalStorage, errorHandler }),\n    mutations = getMutations({ Vue, LocalStorage, filterHandler, newMessagesInterseptor })\n\n  const state = {\n    name: name,\n    isLoading: false,\n    active: 0,\n    messages: [],\n    filter: '',\n    sysFilter: '',\n    settings: {},\n    mode: null,\n    from: 0,\n    to: 0,\n    limit: 1000,\n    reverse: false,\n    cols: [],\n    newMessagesCount: 0,\n    offline: false,\n    selected: [],\n    sortBy: null\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n","export default function ({ Vue, LocalStorage, errorHandler }) {\n  function getParams (state) {\n    let params = {}\n    if (state.limit) {\n      params.count = state.limit\n    }\n    if (state.filter && state.sysFilter) {\n      if (state.mode === 1) {\n        params.filter = `${state.sysFilter}`\n      } else {\n        params.filter = `${state.sysFilter},${state.filter}`\n      }\n    } else if (state.sysFilter && !state.filter) {\n      params.filter = `${state.sysFilter}`\n    } else if (!state.sysFilter && state.filter) {\n      if (state.mode === 0) {\n        params.filter = `${state.filter}`\n      }\n    }\n    if (state.from && (!state.reverse || state.mode === 1)) {\n      if (!state.reverse) {\n        params.from = Math.floor(state.from / 1000)\n      }\n    }\n    if (state.to) {\n      if (state.mode === 1) {\n        state.to = Date.now()\n      }\n      params.to = Math.floor(state.to / 1000)\n    }\n    if (state.reverse) {\n      params.reverse = state.reverse\n    }\n    return params\n  }\n\n  function errorsCheck (data) {\n    if (data.errors) {\n      data.errors.forEach((error) => {\n        let errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    }\n  }\n\n  async function getCols ({ state, commit, rootState }) {\n    const DEFAULT_COL_NAMES = ['timestamp', 'position.latitude', 'position.longitude', 'position.altitude', 'position.speed']\n    commit('reqStart')\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        /* getting telemetry */\n        let deviceTelemetryResp = await Vue.connector.gw.getDevicesTelemetry(state.active)\n        let deviceTelemetryData = deviceTelemetryResp.data\n        errorsCheck(deviceTelemetryData)\n        let telemetry = deviceTelemetryData.result && deviceTelemetryData.result[0] && deviceTelemetryData.result[0].telemetry\n        /* getting device info */\n        let deviceResp = await Vue.connector.gw.getDevices(state.active)\n        let deviceData = deviceResp.data\n        errorsCheck(deviceData)\n        let device = deviceData.result && deviceData.result[0]\n        commit('setSettings', device)\n        let cols = [],\n          colsFromStorage = LocalStorage.get.item(state.name)\n        if (colsFromStorage && colsFromStorage[device.device_type_id] && colsFromStorage[device.device_type_id].length) {\n          /* remove after sometime 12.07.19 */\n          colsFromStorage[device.device_type_id].forEach((col) => {\n            if (col.name === 'timestamp') {\n              let locale = new Date().toString().match(/([-\\+][0-9]+)\\s/)[1]\n              col.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n            }\n          })\n          cols = colsFromStorage[device.device_type_id]\n        } else {\n          if (device.device_type_id) {\n            /* getting protocol id */\n            let protocolResp = await Vue.connector.gw.getProtocolsDeviceTypes('all', device.device_type_id, { fields: 'protocol_id' })\n            let protocolData = protocolResp.data\n            errorsCheck(protocolData)\n            let protocolId = protocolData.result && protocolData.result[0] && protocolData.result[0].protocol_id\n            /* gettings messages parameters */\n            let messageParamsResp = await Vue.connector.gw.getProtocols(protocolId, { fields: 'message_parameters' })\n            let messageParamsData = messageParamsResp.data\n            errorsCheck(messageParamsData)\n            let messageParams = messageParamsData.result && messageParamsData.result[0] && messageParamsData.result[0].message_parameters\n            /* initing columns by message parameters */\n            cols = messageParams.reduce((cols, param) => {\n              let name = param.name\n              if (name === 'timestamp') {\n                let locale = new Date().toString().match(/([-\\+][0-9]+)\\s/)[1]\n                cols.unshift({\n                  name,\n                  width: 190,\n                  display: false,\n                  addition: `${locale.slice(0, 3)}:${locale.slice(3)}`\n                })\n                return cols\n              }\n              cols.push({\n                name,\n                width: 150,\n                display: false\n              })\n              return cols\n            }, [])\n            /* enable cols by active telemetry */\n            if (telemetry) {\n              /* remove position object */\n              if (telemetry.position) {\n                delete telemetry.position\n              }\n              let colNames = Object.keys(telemetry)\n              if (cols.length && colNames) {\n                /* merging existed columns with telemetry for creating actual columns */\n                cols.forEach(col => {\n                  if (telemetry[col.name]) {\n                    col.display = true\n                  }\n                })\n              }\n            } else { /* enable default cols w/o saving */\n              cols = DEFAULT_COL_NAMES.reduce((cols, name) => {\n                let index = cols.findIndex((col) => col.name === name)\n                if (index === -1) {\n                  cols.push({\n                    name,\n                    width: 150,\n                    display: true\n                  })\n                } else {\n                  cols[index].display = true\n                }\n                return cols\n              }, cols)\n            }\n          }\n        }\n\n        if (telemetry) {\n          commit('setCols', cols)\n        } else {\n          Vue.set(state, 'cols', cols)\n        }\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  function getFromTo (val) {\n    let now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86400000\n    return { from, to }\n  }\n\n  async function initTime ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let params = {\n          reverse: true,\n          count: 1,\n          fields: 'timestamp'\n        }\n        let resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        let data = resp.data\n        errorsCheck(data)\n        let date = Date.now()\n        if (data.result.length) {\n          date = Math.round(data.result[0].timestamp * 1000)\n        }\n        commit('setDate', getFromTo(date).from)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function get ({ state, commit, rootState }, preaction) {\n    commit('reqStart')\n    if (preaction) {\n      let { name: preactionName, payload: preactionPayload } = preaction\n      commit('clearMessages')\n      commit(preactionName, preactionPayload)\n    }\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let currentMode = JSON.parse(JSON.stringify(state.mode))\n        let resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(getParams(state)) })\n        /* if mode changed in time request */\n        if (currentMode !== state.mode) { return false }\n        let data = resp.data\n        errorsCheck(data)\n        if (preaction) {\n          if (data.result.length) {\n            commit('setMessages', data.result)\n            commit('postaction')\n          } else {\n            commit('postaction')\n            switch (preaction.name) { // logic for empty response after pagination scroll\n              case 'paginationPrev': {\n                commit('datePrev')\n                commit('paginationPrev')\n                await get({ state, commit, rootState })\n                commit('postaction')\n                break\n              }\n              case 'paginationNext': {\n                get({ state, commit, rootState }, { name: 'dateNext' })\n                commit('postaction')\n                break\n              }\n              default: {\n                commit('setMessages', data.result)\n                commit('postaction')\n              }\n            }\n          }\n        } else {\n          commit('setMessages', data.result)\n        }\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function getHistory ({ state, commit, rootState }, count) {\n    let limit = state.limit,\n      filter = state.filter\n    commit('setReverse', true)\n    commit('setLimit', count)\n    commit('setFilter', '')\n    await get({ state, commit, rootState })\n    commit('setReverse', false)\n    commit('setLimit', limit)\n    commit('setFilter', filter)\n  }\n\n  let messagesBuffer = [],\n    loopId = 0\n  function initRenderLoop (state, commit) {\n    return setInterval(() => {\n      if (messagesBuffer.length) {\n        if (state.mode === 1) {\n          commit('setMessages', [...messagesBuffer])\n        }\n        messagesBuffer = []\n      }\n    }, 500)\n  }\n\n  async function pollingGet ({ state, commit, rootState }) {\n    loopId = initRenderLoop(state, commit)\n    await Vue.connector.subscribeMessagesDevices(state.active, (message) => {\n      if (state.mode === 1) {\n        messagesBuffer.push(JSON.parse(message))\n      } else {\n        commit('setNewMessagesCount', state.newMessagesCount + 1)\n      }\n    }, { rh: 2 })\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    if (loopId) { clearInterval(loopId) }\n    await Vue.connector.unsubscribeMessagesDevices(state.active)\n  }\n\n  /* getting missed messages after offline */\n  async function getMissedMessages ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let lastIndexOffline = state.messages.reduceRight((result, value, index) => {\n          if (result) {\n            return result\n          }\n          if (value.__connectionStatus === 'offline') {\n            result = index\n          }\n          return result\n        }, 0)\n        let params = {\n          from: !lastIndexOffline ? 0 : Math.floor(state.messages[lastIndexOffline - 1].timestamp) + 1,\n          to: Math.floor(state.messages[lastIndexOffline + 1].timestamp)\n        }\n        let resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        let data = resp.data\n        errorsCheck(data)\n        commit('setMissingMessages', { data: data.result, index: lastIndexOffline })\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  return {\n    get,\n    pollingGet,\n    getCols,\n    getHistory,\n    initTime,\n    unsubscribePooling,\n    getMissedMessages\n  }\n}\n","export default function ({ Vue, LocalStorage, filterHandler, newMessagesInterseptor }) {\n  function getFromTo (val) {\n    let now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86400000\n    return { from, to }\n  }\n\n  function setMessages (state, data) {\n    if (data && data.length) {\n      if (state.reverse) {\n        data.reverse()\n        if (state.mode === 1) {\n          data[data.length - 1].delimiter = true\n        }\n      }\n      if (state.mode === 1) {\n        Vue.set(state, 'from', Math.floor((data[data.length - 1].timestamp + 1) * 1000))\n        if (state.filter && filterHandler) {\n          data = filterHandler(state.filter, data)\n        }\n      }\n      let messages = state.messages\n      if (state.sortBy && state.mode === 1) {\n        if (data.length > 1) {\n          /* write history for rt mode */\n          messages = messages.concat(data)\n        } else {\n          /* write by sorted field */\n          let message = data[0],\n            fieldName = state.sortBy,\n            length = state.messages.length - 1,\n            index = null,\n            escapeFlag = true\n          if (length > 0) {\n            for (let i = length; i !== 0 || escapeFlag; i--) {\n              if (messages[i][fieldName] > message[fieldName]) {\n                index = i\n                if (i === 0) {\n                  escapeFlag = false\n                }\n              } else {\n                escapeFlag = false\n              }\n            }\n          }\n          if (index) {\n            messages.splice(index, 0, message)\n          } else {\n            messages.push(message)\n          }\n        }\n      } else {\n        messages = messages.concat(data)\n      }\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      if (state.limit && state.mode === 1 && messages.length >= state.limit + (state.limit * 0.1)) { // rt limiting\n        let count = (messages.length - 1) - (state.limit - 1)\n        messages = messages.slice(count)\n        Vue.set(state, 'selected', state.selected.map((index) => index - count))\n      }\n      Vue.set(state, 'messages', messages)\n    } else {\n      if (state.mode === 1) {\n        Vue.set(state, 'from', state.to + 1000)\n      }\n      Vue.set(state, 'messages', [])\n    }\n  }\n\n  function clearMessages (state) {\n    Vue.set(state, 'messages', [])\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      if (state.mode === 1) {\n        if (state.filter) {\n          state.messages.push({ 'x-flespi-filter-prev': state.filter })\n        }\n        if (value) {\n          state.messages.push({ 'x-flespi-filter-next': value })\n        }\n      }\n      Vue.set(state, 'filter', value)\n    }\n  }\n\n  function setMode (state, mode) {\n    switch (mode) {\n      case 0: {\n        let timeObj = state.from ? getFromTo(state.from) : getFromTo()\n        state.from = timeObj.from\n        state.to = timeObj.to\n        clearMessages(state)\n        break\n      }\n      case 1: {\n        let now = Date.now() - 4000\n        state.from = now - 1000\n        state.to = now\n        state.newMessagesCount = 0\n        break\n      }\n    }\n    Vue.set(state, 'mode', mode)\n  }\n\n  function setFrom (state, from) {\n    Vue.set(state, 'from', from)\n  }\n\n  function setTo (state, to) {\n    Vue.set(state, 'to', to)\n  }\n\n  function reqStart () {\n    if (DEV) {\n      console.log('Start Request Devices messages')\n    }\n  }\n\n  function setActive (state, id) {\n    state.newMessagesCount = 0\n    Vue.set(state, 'active', id)\n  }\n\n  function setReverse (state, val) {\n    Vue.set(state, 'reverse', val)\n  }\n\n  function setDate (state, date) {\n    let timeObj = getFromTo(date)\n    state.from = timeObj.from\n    state.to = timeObj.to\n  }\n\n  function dateNext (state) {\n    let timeObj = getFromTo(state.from + 86400000)\n    state.from = timeObj.from\n    state.to = timeObj.to\n  }\n\n  function datePrev (state) {\n    let timeObj = getFromTo(state.from - 86400000)\n    state.from = timeObj.from\n    state.to = timeObj.to\n  }\n\n  function paginationPrev (state, firstTimestamp) {\n    state.reverse = true\n    state.sysFilter += `timestamp>=${getFromTo(state.from).from / 1000}`\n    if (firstTimestamp) {\n      state.from = getFromTo(firstTimestamp).from\n      state.to = firstTimestamp - 1000\n    }\n  }\n\n  function paginationNext (state, lastTimestamp) {\n    state.sysFilter += `timestamp<=${state.to / 1000}`\n    if (lastTimestamp) {\n      state.to = getFromTo(lastTimestamp).to\n      state.from = lastTimestamp + 1000\n    }\n  }\n\n  function postaction (state) {\n    let timeObj = getFromTo(state.from)\n    setFrom(state, state.from || timeObj.from)\n    setTo(state, timeObj.to)\n    if (state.reverse) {\n      setReverse(state, false)\n    }\n    state.sysFilter = ''\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.mode = null\n    state.from = 0\n    state.to = 0\n    state.limit = 1000\n    state.reverse = false\n    await Vue.connector.unsubscribeMessagesDevices(state.active)\n  }\n\n  function setCols (state, cols) {\n    let colsFromStorage = LocalStorage.get.item(state.name)\n    if (!colsFromStorage) {\n      colsFromStorage = {}\n    }\n    colsFromStorage[state.settings.device_type_id] = cols\n    LocalStorage.set(state.name, colsFromStorage)\n    Vue.set(state, 'cols', cols)\n  }\n\n  function setSettings (state, device) {\n    Vue.set(state, 'settings', device)\n  }\n\n  let updateCols = setCols\n\n  function setNewMessagesCount (state, count) {\n    Vue.set(state, 'newMessagesCount', count)\n  }\n\n  function setOffline (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      setMessages(state, [{ __connectionStatus: 'offline', timestamp: Date.now() / 1000 }])\n    }\n    state.offline = true\n  }\n\n  function setReconnected (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      setMessages(state, [{ __connectionStatus: 'reconnected', timestamp: Date.now() / 1000 }])\n    }\n    state.offline = false\n  }\n\n  function setMissingMessages (state, { data, index }) {\n    data.forEach((val) => {\n      val.__status = 'missed'\n    })\n    state.messages.splice(index + 1, 0, ...data)\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setSortBy (state, field) {\n    Vue.set(state, 'sortBy', field)\n  }\n\n  function clearSortBy (state) {\n    Vue.set(state, 'sortBy', null)\n  }\n\n  return {\n    setOffline,\n    setReconnected,\n    setMissingMessages,\n    setMessages,\n    clearMessages,\n    setLimit,\n    setFilter,\n    setMode,\n    setFrom,\n    setTo,\n    reqStart,\n    setReverse,\n    dateNext,\n    datePrev,\n    paginationPrev,\n    paginationNext,\n    setDate,\n    postaction,\n    clear,\n    setActive,\n    setCols,\n    updateCols,\n    setNewMessagesCount,\n    setSelected,\n    clearSelected,\n    setSortBy,\n    clearSortBy,\n    setSettings\n  }\n}\n"],"names":["Vue","LocalStorage","name","errorHandler","filterHandler","newMessagesInterseptor","namespaced","state","isLoading","active","messages","filter","sysFilter","settings","mode","from","to","limit","reverse","cols","newMessagesCount","offline","selected","sortBy","actions","errorsCheck","data","errors","forEach","error","errObject","Error","reason","commit","rootState","DEFAULT_COL_NAMES","token","set","connector","gw","getDevicesTelemetry","deviceTelemetryResp","deviceTelemetryData","telemetry","result","getDevices","deviceResp","deviceData","device","colsFromStorage","get","item","device_type_id","length","col","locale","Date","toString","match","addition","slice","getProtocolsDeviceTypes","fields","protocolResp","protocolData","protocolId","protocol_id","getProtocols","messageParamsResp","messageParamsData","messageParams","message_parameters","reduce","param","push","width","display","unshift","position","colNames","Object","keys","index","findIndex","DEV","console","log","params","count","getDevicesMessages","JSON","stringify","resp","date","now","Math","round","timestamp","val","setHours","preaction","preactionName","preactionPayload","payload","currentMode","parse","floor","messagesBuffer","loopId","initRenderLoop","setInterval","subscribeMessagesDevices","message","rh","clearInterval","unsubscribeMessagesDevices","lastIndexOffline","reduceRight","value","__connectionStatus","pollingGet","getCols","getHistory","initTime","unsubscribePooling","getMissedMessages","getActions","mutations","getFromTo","setMessages","delimiter","concat","fieldName","escapeFlag","i","splice","map","clearMessages","clearSelected","setFrom","setTo","setReverse","setCols","setOffline","needPostOfflineMessage","setReconnected","setMissingMessages","__status","setLimit","setFilter","setMode","timeObj","reqStart","dateNext","datePrev","paginationPrev","firstTimestamp","paginationNext","lastTimestamp","setDate","postaction","clear","setActive","id","updateCols","setNewMessagesCount","setSelected","indexes","setSortBy","field","clearSortBy","setSettings","getMutations"],"mappings":"i0CAG2BA,IAAAA,IAAKC,IAAAA,aAAcC,IAAAA,KAAMC,IAAAA,aAAcC,IAAAA,cAAeC,IAAAA,6BAwBxE,CACLC,YAAY,EACZC,MAtBY,CACZL,KAAMA,EACNM,WAAW,EACXC,OAAQ,EACRC,SAAU,GACVC,OAAQ,GACRC,UAAW,GACXC,SAAU,GACVC,KAAM,KACNC,KAAM,EACNC,GAAI,EACJC,MAAO,IACPC,SAAS,EACTC,KAAM,GACNC,iBAAkB,EAClBC,SAAS,EACTC,SAAU,GACVC,OAAQ,MAMRC,QC9BW,gBAAYxB,IAAAA,IAAKC,IAAAA,aAAcE,IAAAA,sBAoCnCsB,EAAaC,GAChBA,EAAKC,QACPD,EAAKC,OAAOC,QAAQ,SAACC,OACfC,EAAY,IAAIC,MAAMF,EAAMG,QAChC7B,GAAgBA,EAAa2B,qDAKnC,0IAA0BvB,IAAAA,MAAO0B,IAAAA,OAAQC,IAAAA,UACjCC,EAAoB,CAAC,YAAa,oBAAqB,qBAAsB,oBAAqB,kBACxGF,EAAO,YACHC,EAAUE,OAAS7B,EAAME,uBAEzBT,EAAIqC,IAAI9B,EAAO,aAAa,YAEIP,EAAIsC,UAAUC,GAAGC,oBAAoBjC,EAAME,sCAAvEgC,SAEJhB,EADIiB,EAAsBD,EAAoBf,MAE1CiB,EAAYD,EAAoBE,QAAUF,EAAoBE,OAAO,IAAMF,EAAoBE,OAAO,GAAGD,oBAEtF3C,EAAIsC,UAAUC,GAAGM,WAAWtC,EAAME,mBAArDqC,SAEJrB,EADIsB,EAAaD,EAAWpB,MAExBsB,EAASD,EAAWH,QAAUG,EAAWH,OAAO,GACpDX,EAAO,cAAee,GAClB7B,EAAO,MACT8B,EAAkBhD,EAAaiD,IAAIC,KAAK5C,EAAML,QACzB+C,EAAgBD,EAAOI,iBAAmBH,EAAgBD,EAAOI,gBAAgBC,yBAEtGJ,EAAgBD,EAAOI,gBAAgBxB,QAAQ,SAAC0B,MAC7B,cAAbA,EAAIpD,KAAsB,KACxBqD,GAAS,IAAIC,MAAOC,WAAWC,MAAM,mBAAmB,GAC5DJ,EAAIK,mBAAcJ,EAAOK,MAAM,EAAG,eAAML,EAAOK,MAAM,OAGzDzC,EAAO8B,EAAgBD,EAAOI,2CAE1BJ,EAAOI,gCAEgBpD,EAAIsC,UAAUC,GAAGsB,wBAAwB,MAAOb,EAAOI,eAAgB,CAAEU,OAAQ,+CAAtGC,SAEJtC,EADIuC,EAAeD,EAAarC,MAE5BuC,EAAaD,EAAapB,QAAUoB,EAAapB,OAAO,IAAMoB,EAAapB,OAAO,GAAGsB,sBAE3DlE,EAAIsC,UAAUC,GAAG4B,aAAaF,EAAY,CAAEH,OAAQ,+BAA9EM,SAEJ3C,EADI4C,EAAoBD,EAAkB1C,MAEtC4C,EAAgBD,EAAkBzB,QAAUyB,EAAkBzB,OAAO,IAAMyB,EAAkBzB,OAAO,GAAG2B,mBAE3GpD,EAAOmD,EAAcE,OAAO,SAACrD,EAAMsD,OAC7BvE,EAAOuE,EAAMvE,QACJ,cAATA,SAUJiB,EAAKuD,KAAK,CACRxE,KAAAA,EACAyE,MAAO,IACPC,SAAS,IAEJzD,MAdDoC,GAAS,IAAIC,MAAOC,WAAWC,MAAM,mBAAmB,UAC5DvC,EAAK0D,QAAQ,CACX3E,KAAAA,EACAyE,MAAO,IACPC,SAAS,EACTjB,mBAAaJ,EAAOK,MAAM,EAAG,eAAML,EAAOK,MAAM,MAE3CzC,GAQR,IAECwB,GAEEA,EAAUmC,iBACLnC,EAAUmC,SAEfC,EAAWC,OAAOC,KAAKtC,GACvBxB,EAAKkC,QAAU0B,GAEjB5D,EAAKS,QAAQ,SAAA0B,GACPX,EAAUW,EAAIpD,QAChBoD,EAAIsB,SAAU,MAKpBzD,EAAOgB,EAAkBqC,OAAO,SAACrD,EAAMjB,OACjCgF,EAAQ/D,EAAKgE,UAAU,SAAC7B,UAAQA,EAAIpD,OAASA,WAClC,IAAXgF,EACF/D,EAAKuD,KAAK,CACRxE,KAAAA,EACAyE,MAAO,IACPC,SAAS,IAGXzD,EAAK+D,GAAON,SAAU,EAEjBzD,GACNA,WAKLwB,EACFV,EAAO,UAAWd,GAElBnB,EAAIqC,IAAI9B,EAAO,OAAQY,GAEzBnB,EAAIqC,IAAI9B,EAAO,aAAa,qDAE5BJ,GAAgBA,QACZiF,KAAOC,QAAQC,UACnBtF,EAAIqC,IAAI9B,EAAO,aAAa,kIAYlC,gHAA2BA,IAAAA,MAAO0B,IAAAA,SAAQC,UAC1BE,OAAS7B,EAAME,uBAEzBT,EAAIqC,IAAI9B,EAAO,aAAa,GACxBgF,EAAS,CACXrE,SAAS,EACTsE,MAAO,EACP1B,OAAQ,sBAEO9D,EAAIsC,UAAUC,GAAGkD,mBAAmBlF,EAAME,OAAQ,CAAEiB,KAAMgE,KAAKC,UAAUJ,4BAAtFK,SAEJnE,EADIC,EAAOkE,EAAKlE,MAEZmE,EAAOrC,KAAKsC,MACZpE,EAAKkB,OAAOS,SACdwC,EAAOE,KAAKC,MAAiC,IAA3BtE,EAAKkB,OAAO,GAAGqD,YAEnChE,EAAO,WAvBOiE,EAuBcL,EAtB5BC,EAAMI,GAAO1C,KAAKsC,MACpB/E,EAAO,IAAIyC,KAAKsC,GAAKK,SAAS,EAAG,EAAG,EAAG,GAElC,CAAEpF,KAAAA,EAAMC,GADRD,EAAO,QAoBwBA,MAClCf,EAAIqC,IAAI9B,EAAO,aAAa,qDAE5BJ,GAAgBA,QACZiF,KAAOC,QAAQC,UACnBtF,EAAIqC,IAAI9B,EAAO,aAAa,yCA5Bd2F,EACdJ,EACF/E,uDA+BWmC,sFAAf,aAAkDkD,yGAA5B7F,IAAAA,MAAO0B,IAAAA,OAAQC,IAAAA,UACnCD,EAAO,YACHmE,IACUC,EAA6CD,EAAnDlG,KAA8BoG,EAAqBF,EAA9BG,QAC3BtE,EAAO,iBACPA,EAAOoE,EAAeC,IAEpBpE,EAAUE,OAAS7B,EAAME,uBAEzBT,EAAIqC,IAAI9B,EAAO,aAAa,GACxBiG,EAAcd,KAAKe,MAAMf,KAAKC,UAAUpF,EAAMO,gBACjCd,EAAIsC,UAAUC,GAAGkD,mBAAmBlF,EAAME,OAAQ,CAAEiB,KAAMgE,KAAKC,WAnMlEpF,EAmMsFA,EAlMpGgF,OAAAA,EAAAA,EAAS,GACThF,EAAMU,QACRsE,EAAOC,MAAQjF,EAAMU,OAEnBV,EAAMI,QAAUJ,EAAMK,UACL,IAAfL,EAAMO,KACRyE,EAAO5E,iBAAYJ,EAAMK,WAEzB2E,EAAO5E,iBAAYJ,EAAMK,sBAAaL,EAAMI,QAErCJ,EAAMK,YAAcL,EAAMI,OACnC4E,EAAO5E,iBAAYJ,EAAMK,YACfL,EAAMK,WAAaL,EAAMI,QAChB,IAAfJ,EAAMO,OACRyE,EAAO5E,iBAAYJ,EAAMI,UAGzBJ,EAAMQ,MAAUR,EAAMW,SAA0B,IAAfX,EAAMO,MACpCP,EAAMW,UACTqE,EAAOxE,KAAOgF,KAAKW,MAAMnG,EAAMQ,KAAO,MAGtCR,EAAMS,KACW,IAAfT,EAAMO,OACRP,EAAMS,GAAKwC,KAAKsC,OAElBP,EAAOvE,GAAK+E,KAAKW,MAAMnG,EAAMS,GAAK,MAEhCT,EAAMW,UACRqE,EAAOrE,QAAUX,EAAMW,SAElBqE,gCAmKCK,SAEAY,IAAgBjG,EAAMO,+BAAe,8BAEzCW,EADIC,EAAOkE,EAAKlE,OAEZ0E,uBACE1E,EAAKkB,OAAOS,wBACdpB,EAAO,cAAeP,EAAKkB,QAC3BX,EAAO,sCAEPA,EAAO,mBACCmE,EAAUlG,YACX,2BAOA,mDANH+B,EAAO,YACPA,EAAO,4BACDiB,EAAI,CAAE3C,MAAAA,EAAO0B,OAAAA,EAAQC,UAAAA,mBAC3BD,EAAO,kDAIPiB,EAAI,CAAE3C,MAAAA,EAAO0B,OAAAA,EAAQC,UAAAA,GAAa,CAAEhC,KAAM,aAC1C+B,EAAO,2CAIPA,EAAO,cAAeP,EAAKkB,QAC3BX,EAAO,8CAKbA,EAAO,cAAeP,EAAKkB,gBAE7B5C,EAAIqC,IAAI9B,EAAO,aAAa,qDAE5BJ,GAAgBA,QACZiF,KAAOC,QAAQC,UACnBtF,EAAIqC,IAAI9B,EAAO,aAAa,yCAxOdA,EACdgF,8FA4ON,aAAyDC,uGAA5BjF,IAAAA,MAAO0B,IAAAA,OAAQC,IAAAA,UACtCjB,EAAQV,EAAMU,MAChBN,EAASJ,EAAMI,OACjBsB,EAAO,cAAc,GACrBA,EAAO,WAAYuD,GACnBvD,EAAO,YAAa,aACdiB,EAAI,CAAE3C,MAAAA,EAAO0B,OAAAA,EAAQC,UAAAA,WAC3BD,EAAO,cAAc,GACrBA,EAAO,WAAYhB,GACnBgB,EAAO,YAAatB,wEAGlBgG,EAAiB,GACnBC,EAAS,WACFC,EAAgBtG,EAAO0B,UACvB6E,YAAY,WACbH,EAAetD,SACE,IAAf9C,EAAMO,MACRmB,EAAO,gBAAmB0E,IAE5BA,EAAiB,KAElB,qDAGL,4GAA6BpG,IAAAA,MAAO0B,IAAAA,SAAQC,UAC1C0E,EAASC,EAAetG,EAAO0B,YACzBjC,EAAIsC,UAAUyE,yBAAyBxG,EAAME,OAAQ,SAACuG,GACvC,IAAfzG,EAAMO,KACR6F,EAAejC,KAAKgB,KAAKe,MAAMO,IAE/B/E,EAAO,sBAAuB1B,EAAMa,iBAAmB,IAExD,CAAE6F,GAAI,oHAIX,0GAAqC1G,IAAAA,MAC/BqG,GAAUM,cAAcN,YACtB5G,EAAIsC,UAAU6E,2BAA2B5G,EAAME,wHAIvD,gHAAoCF,IAAAA,MAAO0B,IAAAA,SAAQC,UACnCE,OAAS7B,EAAME,uBAEzBT,EAAIqC,IAAI9B,EAAO,aAAa,GACxB6G,EAAmB7G,EAAMG,SAAS2G,YAAY,SAACzE,EAAQ0E,EAAOpC,UAC5DtC,IAG6B,YAA7B0E,EAAMC,qBACR3E,EAASsC,GAEJtC,IACN,GACC2C,EAAS,CACXxE,KAAOqG,EAAuBrB,KAAKW,MAAMnG,EAAMG,SAAS0G,EAAmB,GAAGnB,WAAa,EAAjE,EAC1BjF,GAAI+E,KAAKW,MAAMnG,EAAMG,SAAS0G,EAAmB,GAAGnB,qBAErCjG,EAAIsC,UAAUC,GAAGkD,mBAAmBlF,EAAME,OAAQ,CAAEiB,KAAMgE,KAAKC,UAAUJ,4BAAtFK,SAEJnE,EADIC,EAAOkE,EAAKlE,MAEhBO,EAAO,qBAAsB,CAAEP,KAAMA,EAAKkB,OAAQsC,MAAOkC,IACzDpH,EAAIqC,IAAI9B,EAAO,aAAa,qDAE5BJ,GAAgBA,QACZiF,KAAOC,QAAQC,UACnBtF,EAAIqC,IAAI9B,EAAO,aAAa,wFAK3B,CACL2C,IAAAA,EACAsE,uDACAC,oDACAC,yDACAC,qDACAC,+DACAC,+DD1TYC,CAAW,CAAE9H,IAAAA,EAAKC,aAAAA,EAAcE,aAAAA,IA2B5C4H,0BE/BuB/H,IAAAA,IAAKC,IAAAA,aAAcG,IAAAA,cAAeC,IAAAA,gCAClD2H,EAAW9B,OACdJ,EAAMI,GAAO1C,KAAKsC,MACpB/E,EAAO,IAAIyC,KAAKsC,GAAKK,SAAS,EAAG,EAAG,EAAG,SAElC,CAAEpF,KAAAA,EAAMC,GADRD,EAAO,gBAIPkH,EAAa1H,EAAOmB,MACvBA,GAAQA,EAAK2B,OAAQ,CACnB9C,EAAMW,UACRQ,EAAKR,UACc,IAAfX,EAAMO,OACRY,EAAKA,EAAK2B,OAAS,GAAG6E,WAAY,IAGnB,IAAf3H,EAAMO,OACRd,EAAIqC,IAAI9B,EAAO,OAAQwF,KAAKW,MAA8C,KAAvChF,EAAKA,EAAK2B,OAAS,GAAG4C,UAAY,KACjE1F,EAAMI,QAAUP,IAClBsB,EAAOtB,EAAcG,EAAMI,OAAQe,SAGnChB,EAAWH,EAAMG,YACjBH,EAAMgB,QAAyB,IAAfhB,EAAMO,QACN,EAAdY,EAAK2B,OAEP3C,EAAWA,EAASyH,OAAOzG,OACtB,KAEDsF,EAAUtF,EAAK,GACjB0G,EAAY7H,EAAMgB,OAClB8B,EAAS9C,EAAMG,SAAS2C,OAAS,EACjC6B,EAAQ,KACRmD,GAAa,KACF,EAAThF,MACG,IAAIiF,EAAIjF,EAAc,IAANiF,GAAWD,EAAYC,IACtC5H,EAAS4H,GAAGF,GAAapB,EAAQoB,GAEzB,KADVlD,EAAQoD,KAEND,GAAa,GAGfA,GAAa,EAIfnD,EACFxE,EAAS6H,OAAOrD,EAAO,EAAG8B,GAE1BtG,EAASgE,KAAKsC,QAIlBtG,EAAWA,EAASyH,OAAOzG,MAE7BrB,GAA0BA,EAAuBqB,GAC7CnB,EAAMU,OAAwB,IAAfV,EAAMO,MAAcJ,EAAS2C,QAAU9C,EAAMU,MAAuB,GAAdV,EAAMU,MAAc,KACvFuE,EAAS9E,EAAS2C,OAAS,GAAM9C,EAAMU,MAAQ,GACnDP,EAAWA,EAASkD,MAAM4B,GAC1BxF,EAAIqC,IAAI9B,EAAO,WAAYA,EAAMe,SAASkH,IAAI,SAACtD,UAAUA,EAAQM,KAEnExF,EAAIqC,IAAI9B,EAAO,WAAYG,QAER,IAAfH,EAAMO,MACRd,EAAIqC,IAAI9B,EAAO,OAAQA,EAAMS,GAAK,KAEpChB,EAAIqC,IAAI9B,EAAO,WAAY,aAItBkI,EAAelI,GACtBP,EAAIqC,IAAI9B,EAAO,WAAY,IAC3BF,GAA0BA,EAAuB,IACjDqI,EAAcnI,YAyCPoI,EAASpI,EAAOQ,GACvBf,EAAIqC,IAAI9B,EAAO,OAAQQ,YAGhB6H,EAAOrI,EAAOS,GACrBhB,EAAIqC,IAAI9B,EAAO,KAAMS,YAcd6H,EAAYtI,EAAO2F,GAC1BlG,EAAIqC,IAAI9B,EAAO,UAAW2F,mDAgD5B,WAAsB3F,yFACpBkI,EAAclI,GACdA,EAAMI,OAAS,GACfJ,EAAMO,KAAO,KACbP,EAAMQ,KAAO,EACbR,EAAMS,GAAK,EACXT,EAAMU,MAAQ,IACdV,EAAMW,SAAU,WACVlB,EAAIsC,UAAU6E,2BAA2B5G,EAAME,iFAG9CqI,EAASvI,EAAOY,OACnB8B,EAAkBhD,EAAaiD,IAAIC,KAAK5C,EAAML,MAC7C+C,IACHA,EAAkB,IAEpBA,EAAgB1C,EAAMM,SAASuC,gBAAkBjC,EACjDlB,EAAaoC,IAAI9B,EAAML,KAAM+C,GAC7BjD,EAAIqC,IAAI9B,EAAO,OAAQY,YAsChBuH,EAAenI,GACtBP,EAAIqC,IAAI9B,EAAO,WAAY,UAWtB,CACLwI,oBAtCmBxI,EAAOyI,GACtBA,GACFf,EAAY1H,EAAO,CAAC,CAAEgH,mBAAoB,UAAWtB,UAAWzC,KAAKsC,MAAQ,OAE/EvF,EAAMc,SAAU,GAmChB4H,wBAhCuB1I,EAAOyI,GAC1BA,GACFf,EAAY1H,EAAO,CAAC,CAAEgH,mBAAoB,cAAetB,UAAWzC,KAAKsC,MAAQ,OAEnFvF,EAAMc,SAAU,GA6BhB6H,4BA1B2B3I,WAASmB,IAAAA,KAAMwD,IAAAA,MAC1CxD,EAAKE,QAAQ,SAACsE,GACZA,EAAIiD,SAAW,cAEjB5I,EAAMG,UAAS6H,gBAAOrD,EAAQ,EAAG,YAAMxD,MAuBvCuG,YAAAA,EACAQ,cAAAA,EACAW,kBApLiB7I,EAAOiF,GACxBxF,EAAIqC,IAAI9B,EAAO,QAASiF,IAoLxB6D,mBAjLkB9I,EAAO+G,GACrB/G,EAAMI,SAAW2G,IACA,IAAf/G,EAAMO,OACJP,EAAMI,QACRJ,EAAMG,SAASgE,KAAK,wBAA0BnE,EAAMI,SAElD2G,GACF/G,EAAMG,SAASgE,KAAK,wBAA0B4C,KAGlDtH,EAAIqC,IAAI9B,EAAO,SAAU+G,KAwK3BgC,iBApKgB/I,EAAOO,UACfA,QACD,MACCyI,EAAUhJ,EAAMQ,KAAOiH,EAAUzH,EAAMQ,MAAQiH,IACnDzH,EAAMQ,KAAOwI,EAAQxI,KACrBR,EAAMS,GAAKuI,EAAQvI,GACnByH,EAAclI,cAGX,MACCuF,EAAMtC,KAAKsC,MAAQ,IACvBvF,EAAMQ,KAAO+E,EAAM,IACnBvF,EAAMS,GAAK8E,EACXvF,EAAMa,iBAAmB,EAI7BpB,EAAIqC,IAAI9B,EAAO,OAAQO,IAoJvB6H,QAAAA,EACAC,MAAAA,EACAY,oBA1IIpE,KACFC,QAAQC,IAAI,mCA0IduD,WAAAA,EACAY,kBAxHiBlJ,OACbgJ,EAAUvB,EAAUzH,EAAMQ,KAAO,OACrCR,EAAMQ,KAAOwI,EAAQxI,KACrBR,EAAMS,GAAKuI,EAAQvI,IAsHnB0I,kBAnHiBnJ,OACbgJ,EAAUvB,EAAUzH,EAAMQ,KAAO,OACrCR,EAAMQ,KAAOwI,EAAQxI,KACrBR,EAAMS,GAAKuI,EAAQvI,IAiHnB2I,wBA9GuBpJ,EAAOqJ,GAC9BrJ,EAAMW,SAAU,EAChBX,EAAMK,gCAA2BoH,EAAUzH,EAAMQ,MAAMA,KAAO,KAC1D6I,IACFrJ,EAAMQ,KAAOiH,EAAU4B,GAAgB7I,KACvCR,EAAMS,GAAK4I,EAAiB,MA0G9BC,wBAtGuBtJ,EAAOuJ,GAC9BvJ,EAAMK,gCAA2BL,EAAMS,GAAK,KACxC8I,IACFvJ,EAAMS,GAAKgH,EAAU8B,GAAe9I,GACpCT,EAAMQ,KAAO+I,EAAgB,MAmG/BC,iBAlIgBxJ,EAAOsF,OACnB0D,EAAUvB,EAAUnC,GACxBtF,EAAMQ,KAAOwI,EAAQxI,KACrBR,EAAMS,GAAKuI,EAAQvI,IAgInBgJ,oBAhGmBzJ,OACfgJ,EAAUvB,EAAUzH,EAAMQ,MAC9B4H,EAAQpI,EAAOA,EAAMQ,MAAQwI,EAAQxI,MACrC6H,EAAMrI,EAAOgJ,EAAQvI,IACjBT,EAAMW,SACR2H,EAAWtI,GAAO,GAEpBA,EAAMK,UAAY,IA0FlBqJ,kDACAC,mBA9IkB3J,EAAO4J,GACzB5J,EAAMa,iBAAmB,EACzBpB,EAAIqC,IAAI9B,EAAO,SAAU4J,IA6IzBrB,QAAAA,EACAsB,WAjEetB,EAkEfuB,6BAhE4B9J,EAAOiF,GACnCxF,EAAIqC,IAAI9B,EAAO,mBAAoBiF,IAgEnC8E,qBAxCoB/J,EAAOgK,GAC3BvK,EAAIqC,IAAI9B,EAAO,WAAYgK,IAwC3B7B,cAAAA,EACA8B,mBAlCkBjK,EAAOkK,GACzBzK,EAAIqC,IAAI9B,EAAO,SAAUkK,IAkCzBC,qBA/BoBnK,GACpBP,EAAIqC,IAAI9B,EAAO,SAAU,OA+BzBoK,qBA3EoBpK,EAAOyC,GAC3BhD,EAAIqC,IAAI9B,EAAO,WAAYyC,KFvMf4H,CAAa,CAAE5K,IAAAA,EAAKC,aAAAA,EAAcG,cAAAA,EAAeC,uBAAAA"}