{"version":3,"file":"devicesMessages.js","sources":["../node_modules/@babel/runtime-corejs2/core-js/array/is-array.js","../node_modules/@babel/runtime-corejs2/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime-corejs2/core-js/array/from.js","../node_modules/@babel/runtime-corejs2/core-js/is-iterable.js","../node_modules/@babel/runtime-corejs2/helpers/iterableToArray.js","../node_modules/@babel/runtime-corejs2/helpers/nonIterableSpread.js","../node_modules/@babel/runtime-corejs2/helpers/toConsumableArray.js","../src/store/modules/devicesMessages/actions.js","../src/store/modules/devicesMessages/mutations.js","../src/store/modules/devicesMessages/index.js"],"sourcesContent":["module.exports = require(\"core-js/library/fn/array/is-array\");","var _Array$isArray = require(\"../core-js/array/is-array\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (_Array$isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","module.exports = require(\"core-js/library/fn/array/from\");","module.exports = require(\"core-js/library/fn/is-iterable\");","var _Array$from = require(\"../core-js/array/from\");\n\nvar _isIterable = require(\"../core-js/is-iterable\");\n\nfunction _iterableToArray(iter) {\n  if (_isIterable(Object(iter)) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return _Array$from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","export default function ({ Vue, LocalStorage, errorHandler }) {\n  function getParams (state) {\n    let params = {}\n    if (state.limit) {\n      params.count = state.limit\n    }\n    if (state.filter && state.sysFilter) {\n      if (state.mode === 1) {\n        params.filter = `${state.sysFilter}`\n      } else {\n        params.filter = `${state.sysFilter},${state.filter}`\n      }\n    } else if (state.sysFilter && !state.filter) {\n      params.filter = `${state.sysFilter}`\n    } else if (!state.sysFilter && state.filter) {\n      if (state.mode === 0) {\n        params.filter = `${state.filter}`\n      }\n    }\n    if (state.from && (!state.reverse || state.mode === 1)) {\n      if (!state.reverse) {\n        params.from = Math.floor(state.from / 1000)\n      }\n    }\n    if (state.to) {\n      if (state.mode === 1) {\n        state.to = Date.now()\n      }\n      params.to = Math.floor(state.to / 1000)\n    }\n    if (state.reverse) {\n      params.reverse = state.reverse\n    }\n    return params\n  }\n\n  function errorsCheck (data) {\n    if (data.errors) {\n      data.errors.forEach((error) => {\n        let errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    }\n  }\n\n  async function getCols ({ state, commit, rootState }) {\n    const DEFAULT_COL_NAMES = ['timestamp', 'position.latitude', 'position.longitude', 'position.altitude', 'position.speed']\n    commit('reqStart')\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        /* getting telemetry */\n        let deviceTelemetryResp = await Vue.connector.gw.getDevicesTelemetry(state.active)\n        let deviceTelemetryData = deviceTelemetryResp.data\n        errorsCheck(deviceTelemetryData)\n        let telemetry = deviceTelemetryData.result && deviceTelemetryData.result[0] && deviceTelemetryData.result[0].telemetry\n        /* getting device info */\n        let deviceResp = await Vue.connector.gw.getDevices(state.active)\n        let deviceData = deviceResp.data\n        errorsCheck(deviceData)\n        let device = deviceData.result && deviceData.result[0]\n        commit('setSettings', device)\n        let cols = [],\n          colsFromStorage = LocalStorage.getItem(state.name)\n        if (colsFromStorage && colsFromStorage[device.device_type_id] && colsFromStorage[device.device_type_id].length) {\n          /* remove after sometime 12.07.19 */\n          colsFromStorage[device.device_type_id].forEach((col) => {\n            if (col.name === 'timestamp') {\n              let locale = new Date().toString().match(/([-\\+][0-9]+)\\s/)[1]\n              col.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n            }\n          })\n          cols = colsFromStorage[device.device_type_id]\n        } else {\n          if (device.device_type_id) {\n            /* getting protocol id */\n            let protocolResp = await Vue.connector.gw.getProtocolsDeviceTypes('all', device.device_type_id, { fields: 'protocol_id' })\n            let protocolData = protocolResp.data\n            errorsCheck(protocolData)\n            let protocolId = protocolData.result && protocolData.result[0] && protocolData.result[0].protocol_id\n            /* gettings messages parameters */\n            let messageParamsResp = await Vue.connector.gw.getProtocols(protocolId, { fields: 'message_parameters' })\n            let messageParamsData = messageParamsResp.data\n            errorsCheck(messageParamsData)\n            let messageParams = messageParamsData.result && messageParamsData.result[0] && messageParamsData.result[0].message_parameters\n            /* initing columns by message parameters */\n            cols = messageParams.reduce((cols, param) => {\n              let name = param.name\n              if (name === 'timestamp') {\n                let locale = new Date().toString().match(/([-\\+][0-9]+)\\s/)[1]\n                cols.unshift({\n                  name,\n                  width: 190,\n                  display: false,\n                  addition: `${locale.slice(0, 3)}:${locale.slice(3)}`\n                })\n                return cols\n              }\n              cols.push({\n                name,\n                width: 150,\n                display: false\n              })\n              return cols\n            }, [])\n            /* enable cols by active telemetry */\n            if (telemetry) {\n              /* remove position object */\n              if (telemetry.position) {\n                delete telemetry.position\n              }\n              let colNames = Object.keys(telemetry)\n              if (cols.length && colNames) {\n                /* merging existed columns with telemetry for creating actual columns */\n                cols.forEach(col => {\n                  if (telemetry[col.name]) {\n                    col.display = true\n                  }\n                })\n              }\n            } else { /* enable default cols w/o saving */\n              cols = DEFAULT_COL_NAMES.reduce((cols, name) => {\n                let index = cols.findIndex((col) => col.name === name)\n                if (index === -1) {\n                  cols.push({\n                    name,\n                    width: 150,\n                    display: true\n                  })\n                } else {\n                  cols[index].display = true\n                }\n                return cols\n              }, cols)\n            }\n          }\n        }\n\n        if (telemetry) {\n          commit('setCols', cols)\n        } else {\n          Vue.set(state, 'cols', cols)\n        }\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  function getFromTo (val) {\n    let now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86400000\n    return { from, to }\n  }\n\n  async function initTime ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let params = {\n          reverse: true,\n          count: 1,\n          fields: 'timestamp'\n        }\n        let resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        let data = resp.data\n        errorsCheck(data)\n        let date = Date.now()\n        if (data.result.length) {\n          date = Math.round(data.result[0].timestamp * 1000)\n        }\n        commit('setDate', getFromTo(date).from)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function get ({ state, commit, rootState }, preaction) {\n    commit('reqStart')\n    if (preaction) {\n      let { name: preactionName, payload: preactionPayload } = preaction\n      commit('clearMessages')\n      commit(preactionName, preactionPayload)\n    }\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let currentMode = JSON.parse(JSON.stringify(state.mode))\n        let resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(getParams(state)) })\n        /* if mode changed in time request */\n        if (currentMode !== state.mode) { return false }\n        let data = resp.data\n        errorsCheck(data)\n        if (preaction) {\n          if (data.result.length) {\n            commit('setMessages', data.result)\n            commit('postaction')\n          } else {\n            commit('postaction')\n            switch (preaction.name) { // logic for empty response after pagination scroll\n              case 'paginationPrev': {\n                commit('datePrev')\n                commit('paginationPrev')\n                await get({ state, commit, rootState })\n                commit('postaction')\n                break\n              }\n              case 'paginationNext': {\n                get({ state, commit, rootState }, { name: 'dateNext' })\n                commit('postaction')\n                break\n              }\n              default: {\n                commit('setMessages', data.result)\n                commit('postaction')\n              }\n            }\n          }\n        } else {\n          commit('setMessages', data.result)\n        }\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function getHistory ({ state, commit, rootState }, count) {\n    let limit = state.limit,\n      filter = state.filter\n    commit('setReverse', true)\n    commit('setLimit', count)\n    commit('setFilter', '')\n    await get({ state, commit, rootState })\n    commit('setReverse', false)\n    commit('setLimit', limit)\n    commit('setFilter', filter)\n  }\n\n  let messagesBuffer = [],\n    loopId = 0\n  function initRenderLoop (state, commit) {\n    return setInterval(() => {\n      if (messagesBuffer.length) {\n        if (state.mode === 1) {\n          commit('setMessages', [...messagesBuffer])\n        }\n        messagesBuffer = []\n      }\n    }, 500)\n  }\n\n  async function pollingGet ({ state, commit, rootState }) {\n    loopId = initRenderLoop(state, commit)\n    await Vue.connector.subscribeMessagesDevices(state.active, (message) => {\n      if (state.mode === 1) {\n        messagesBuffer.push(JSON.parse(message))\n      } else {\n        commit('setNewMessagesCount', state.newMessagesCount + 1)\n      }\n    }, { rh: 2 })\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    if (loopId) { clearInterval(loopId) }\n    await Vue.connector.unsubscribeMessagesDevices(state.active)\n  }\n\n  /* getting missed messages after offline */\n  async function getMissedMessages ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let lastIndexOffline = state.messages.reduceRight((result, value, index) => {\n          if (result) {\n            return result\n          }\n          if (value.__connectionStatus === 'offline') {\n            result = index\n          }\n          return result\n        }, 0)\n        let params = {\n          from: !lastIndexOffline ? 0 : Math.floor(state.messages[lastIndexOffline - 1].timestamp) + 1,\n          to: Math.floor(state.messages[lastIndexOffline + 1].timestamp)\n        }\n        let resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        let data = resp.data\n        errorsCheck(data)\n        commit('setMissingMessages', { data: data.result, index: lastIndexOffline })\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  return {\n    get,\n    pollingGet,\n    getCols,\n    getHistory,\n    initTime,\n    unsubscribePooling,\n    getMissedMessages\n  }\n}\n","export default function ({ Vue, LocalStorage, filterHandler, newMessagesInterseptor }) {\n  function getFromTo (val) {\n    let now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86400000\n    return { from, to }\n  }\n\n  function setMessages (state, data) {\n    if (data && data.length) {\n      if (state.reverse) {\n        data.reverse()\n        if (state.mode === 1) {\n          data[data.length - 1].delimiter = true\n        }\n      }\n      if (state.mode === 1) {\n        Vue.set(state, 'from', Math.floor((data[data.length - 1].timestamp + 1) * 1000))\n        if (state.filter && filterHandler) {\n          data = filterHandler(state.filter, data)\n        }\n      }\n      let messages = state.messages\n      if (state.sortBy && state.mode === 1) {\n        if (data.length > 1) {\n          /* write history for rt mode */\n          messages = messages.concat(data)\n        } else {\n          /* write by sorted field */\n          let message = data[0],\n            fieldName = state.sortBy,\n            length = state.messages.length - 1,\n            index = null,\n            escapeFlag = true\n          if (length > 0) {\n            for (let i = length; i !== 0 || escapeFlag; i--) {\n              if (messages[i][fieldName] > message[fieldName]) {\n                index = i\n                if (i === 0) {\n                  escapeFlag = false\n                }\n              } else {\n                escapeFlag = false\n              }\n            }\n          }\n          if (index) {\n            messages.splice(index, 0, message)\n          } else {\n            messages.push(message)\n          }\n        }\n      } else {\n        messages = messages.concat(data)\n      }\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      if (state.limit && state.mode === 1 && messages.length >= state.limit + (state.limit * 0.1)) { // rt limiting\n        let count = (messages.length - 1) - (state.limit - 1)\n        messages = messages.slice(count)\n        Vue.set(state, 'selected', state.selected.map((index) => index - count))\n      }\n      Vue.set(state, 'messages', messages)\n    } else {\n      if (state.mode === 1) {\n        Vue.set(state, 'from', state.to + 1000)\n      }\n      Vue.set(state, 'messages', [])\n    }\n  }\n\n  function clearMessages (state) {\n    Vue.set(state, 'messages', [])\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      if (state.mode === 1) {\n        if (state.filter) {\n          state.messages.push({ 'x-flespi-filter-prev': state.filter })\n        }\n        if (value) {\n          state.messages.push({ 'x-flespi-filter-next': value })\n        }\n      }\n      Vue.set(state, 'filter', value)\n    }\n  }\n\n  function setMode (state, mode) {\n    switch (mode) {\n      case 0: {\n        let timeObj = state.from ? getFromTo(state.from) : getFromTo()\n        state.from = timeObj.from\n        state.to = timeObj.to\n        clearMessages(state)\n        break\n      }\n      case 1: {\n        let now = Date.now() - 4000\n        state.from = now - 1000\n        state.to = now\n        state.newMessagesCount = 0\n        break\n      }\n    }\n    Vue.set(state, 'mode', mode)\n  }\n\n  function setFrom (state, from) {\n    Vue.set(state, 'from', from)\n  }\n\n  function setTo (state, to) {\n    Vue.set(state, 'to', to)\n  }\n\n  function reqStart () {\n    if (DEV) {\n      console.log('Start Request Devices messages')\n    }\n  }\n\n  function setActive (state, id) {\n    state.newMessagesCount = 0\n    Vue.set(state, 'active', id)\n  }\n\n  function setReverse (state, val) {\n    Vue.set(state, 'reverse', val)\n  }\n\n  function setDate (state, date) {\n    let timeObj = getFromTo(date)\n    state.from = timeObj.from\n    state.to = timeObj.to\n  }\n\n  function dateNext (state) {\n    let timeObj = getFromTo(state.from + 86400000)\n    state.from = timeObj.from\n    state.to = timeObj.to\n  }\n\n  function datePrev (state) {\n    let timeObj = getFromTo(state.from - 86400000)\n    state.from = timeObj.from\n    state.to = timeObj.to\n  }\n\n  function paginationPrev (state, firstTimestamp) {\n    state.reverse = true\n    state.sysFilter += `timestamp>=${getFromTo(state.from).from / 1000}`\n    if (firstTimestamp) {\n      state.from = getFromTo(firstTimestamp).from\n      state.to = firstTimestamp - 1000\n    }\n  }\n\n  function paginationNext (state, lastTimestamp) {\n    state.sysFilter += `timestamp<=${state.to / 1000}`\n    if (lastTimestamp) {\n      state.to = getFromTo(lastTimestamp).to\n      state.from = lastTimestamp + 1000\n    }\n  }\n\n  function postaction (state) {\n    let timeObj = getFromTo(state.from)\n    setFrom(state, state.from || timeObj.from)\n    setTo(state, timeObj.to)\n    if (state.reverse) {\n      setReverse(state, false)\n    }\n    state.sysFilter = ''\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.mode = null\n    state.from = 0\n    state.to = 0\n    state.limit = 1000\n    state.reverse = false\n    await Vue.connector.unsubscribeMessagesDevices(state.active)\n  }\n\n  function setCols (state, cols) {\n    let colsFromStorage = LocalStorage.getItem(state.name)\n    if (!colsFromStorage) {\n      colsFromStorage = {}\n    }\n    colsFromStorage[state.settings.device_type_id] = cols\n    LocalStorage.set(state.name, colsFromStorage)\n    Vue.set(state, 'cols', cols)\n  }\n\n  function setSettings (state, device) {\n    Vue.set(state, 'settings', device)\n  }\n\n  let updateCols = setCols\n\n  function setNewMessagesCount (state, count) {\n    Vue.set(state, 'newMessagesCount', count)\n  }\n\n  function setOffline (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      setMessages(state, [{ __connectionStatus: 'offline', timestamp: Date.now() / 1000 }])\n    }\n    state.offline = true\n  }\n\n  function setReconnected (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      setMessages(state, [{ __connectionStatus: 'reconnected', timestamp: Date.now() / 1000 }])\n    }\n    state.offline = false\n  }\n\n  function setMissingMessages (state, { data, index }) {\n    data.forEach((val) => {\n      val.__status = 'missed'\n    })\n    state.messages.splice(index + 1, 0, ...data)\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setSortBy (state, field) {\n    Vue.set(state, 'sortBy', field)\n  }\n\n  function clearSortBy (state) {\n    Vue.set(state, 'sortBy', null)\n  }\n\n  return {\n    setOffline,\n    setReconnected,\n    setMissingMessages,\n    setMessages,\n    clearMessages,\n    setLimit,\n    setFilter,\n    setMode,\n    setFrom,\n    setTo,\n    reqStart,\n    setReverse,\n    dateNext,\n    datePrev,\n    paginationPrev,\n    paginationNext,\n    setDate,\n    postaction,\n    clear,\n    setActive,\n    setCols,\n    updateCols,\n    setNewMessagesCount,\n    setSelected,\n    clearSelected,\n    setSortBy,\n    clearSortBy,\n    setSettings\n  }\n}\n","import getActions from './actions'\nimport getMutations from './mutations'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, filterHandler, newMessagesInterseptor }) {\n  let actions = getActions({ Vue, LocalStorage, errorHandler }),\n    mutations = getMutations({ Vue, LocalStorage, filterHandler, newMessagesInterseptor })\n\n  const state = {\n    name: name,\n    isLoading: false,\n    active: 0,\n    messages: [],\n    filter: '',\n    sysFilter: '',\n    settings: {},\n    mode: null,\n    from: 0,\n    to: 0,\n    limit: 1000,\n    reverse: false,\n    cols: [],\n    newMessagesCount: 0,\n    offline: false,\n    selected: [],\n    sortBy: null\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n"],"names":["require$$0","arr","_Array$isArray","i","arr2","Array","length","iter","_isIterable","Object","prototype","toString","call","_Array$from","TypeError","arrayWithoutHoles","iterableToArray","nonIterableSpread","Vue","LocalStorage","errorHandler","errorsCheck","data","errors","forEach","error","errObject","Error","reason","get","preaction","state","commit","rootState","preactionName","name","preactionPayload","payload","token","active","set","currentMode","JSON","parse","stringify","mode","connector","gw","getDevicesMessages","params","limit","count","filter","sysFilter","from","reverse","Math","floor","to","Date","now","resp","result","DEV","console","log","messagesBuffer","loopId","initRenderLoop","setInterval","pollingGet","subscribeMessagesDevices","message","push","newMessagesCount","rh","getCols","DEFAULT_COL_NAMES","getDevicesTelemetry","deviceTelemetryResp","deviceTelemetryData","telemetry","getDevices","deviceResp","deviceData","device","cols","colsFromStorage","getItem","device_type_id","col","locale","match","addition","slice","getProtocolsDeviceTypes","fields","protocolResp","protocolData","protocolId","protocol_id","getProtocols","messageParamsResp","messageParamsData","messageParams","message_parameters","reduce","param","width","display","unshift","position","colNames","keys","index","findIndex","getHistory","initTime","date","round","timestamp","setHours","unsubscribePooling","clearInterval","unsubscribeMessagesDevices","getMissedMessages","lastIndexOffline","messages","reduceRight","value","__connectionStatus","filterHandler","newMessagesInterseptor","getFromTo","val","setMessages","delimiter","sortBy","concat","fieldName","escapeFlag","splice","selected","map","clearMessages","clearSelected","setFrom","setTo","setReverse","setCols","settings","setOffline","needPostOfflineMessage","offline","setReconnected","setMissingMessages","__status","setLimit","setFilter","setMode","timeObj","reqStart","dateNext","datePrev","paginationPrev","firstTimestamp","paginationNext","lastTimestamp","setDate","postaction","clear","setActive","id","updateCols","setNewMessagesCount","setSelected","indexes","setSortBy","field","clearSortBy","setSettings","namespaced","isLoading","actions","getActions","mutations","getMutations"],"mappings":"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"}