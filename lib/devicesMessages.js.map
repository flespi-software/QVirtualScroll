{"version":3,"file":"devicesMessages.js","sources":["../node_modules/@babel/runtime-corejs2/core-js/array/is-array.js","../node_modules/@babel/runtime-corejs2/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime-corejs2/core-js/array/from.js","../node_modules/@babel/runtime-corejs2/core-js/is-iterable.js","../node_modules/@babel/runtime-corejs2/helpers/iterableToArray.js","../node_modules/@babel/runtime-corejs2/helpers/nonIterableSpread.js","../node_modules/@babel/runtime-corejs2/helpers/toConsumableArray.js","../node_modules/@babel/runtime-corejs2/core-js/promise.js","../node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator.js","../node_modules/@babel/runtime-corejs2/core-js/object/define-property.js","../node_modules/@babel/runtime-corejs2/helpers/defineProperty.js","../src/store/modules/devicesMessages/actions.js","../src/store/modules/devicesMessages/mutations.js","../src/store/modules/devicesMessages/index.js"],"sourcesContent":["module.exports = require(\"core-js/library/fn/array/is-array\");","var _Array$isArray = require(\"../core-js/array/is-array\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (_Array$isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","module.exports = require(\"core-js/library/fn/array/from\");","module.exports = require(\"core-js/library/fn/is-iterable\");","var _Array$from = require(\"../core-js/array/from\");\n\nvar _isIterable = require(\"../core-js/is-iterable\");\n\nfunction _iterableToArray(iter) {\n  if (_isIterable(Object(iter)) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return _Array$from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","module.exports = require(\"core-js/library/fn/promise\");","var _Promise = require(\"../core-js/promise\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    _Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new _Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","module.exports = require(\"core-js/library/fn/object/define-property\");","var _Object$defineProperty = require(\"../core-js/object/define-property\");\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","import _get from 'lodash/get'\n\nconst defaultCols = ['timestamp', 'server.timestamp', 'ident', 'position.latitude', 'position.longitude', 'position.altitude', 'position.speed']\n\nexport default function ({ Vue, LocalStorage, errorHandler }) {\n  function getParams (state) {\n    const params = {}\n    if (state.limit) {\n      params.count = state.limit\n    }\n    if (state.filter) {\n      params.filter = `${state.filter}`\n    }\n    if (state.from) {\n      params.from = Math.floor(state.from / 1000)\n    }\n    if (state.to) {\n      params.to = Math.floor(state.to / 1000)\n    }\n    if (state.reverse) {\n      params.reverse = state.reverse\n    }\n    return params\n  }\n\n  function errorsCheck (data) {\n    if (data.errors) {\n      data.errors.forEach((error) => {\n        const errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    }\n  }\n\n  /* migration to new format storing cols 28.12.20 */\n  function migrateCols (cols) {\n    const schema = {\n      activeSchema: '_default',\n      schemas: {\n        _default: {\n          name: '_default',\n          cols: defaultCols.map(name => ({ name, width: 150 }))\n        },\n        _protocol: {\n          name: '_protocol',\n          cols: cols.reduce((res, col) => {\n            if (!col.custom) {\n              res.push({ name: col.name, width: 150 })\n            }\n            return res\n          }, [])\n        }\n      },\n      enum: {}\n    }\n    if (cols.length) {\n      schema.activeSchema = '_unsaved'\n      schema.schemasÑŽ_unsaved = {\n        name: 'Modified',\n        cols: cols.reduce((res, col) => {\n          if (col.display) {\n            res.push({ name: col.name, width: col.width })\n          }\n          return res\n        }, [])\n      }\n      schema.enum = cols.reduce((res, col) => {\n        res[col.name] = { ...col }\n        delete res[col.name].display\n        delete res[col.name].width\n        return res\n      }, {})\n    }\n    return schema\n  }\n\n  function getDefaultColsSchema () {\n    return {\n      activeSchema: '_default',\n      schemas: {\n        _default: {\n          name: '_default',\n          cols: defaultCols.map(name => ({ name, width: 150 }))\n        }\n      },\n      enum: defaultCols.reduce((res, name) => {\n        res[name] = { name }\n        return res\n      }, {})\n    }\n  }\n\n  function getColsFromLS (state) {\n    let colsFromStorage = {}\n    if (state.lsNamespace) {\n      /* removing old store 12.03.20 */\n      const oldStore = LocalStorage.getItem(state.name)\n      if (oldStore) {\n        colsFromStorage = oldStore\n        LocalStorage.remove(state.name)\n      }\n      const lsPath = state.lsNamespace.split('.'),\n        lsItemName = lsPath.shift(),\n        lsRouteToItem = `${lsPath.join('.')}.${state.name}`,\n        appStorage = LocalStorage.getItem(lsItemName) || {}\n      colsFromStorage = _get(appStorage, lsRouteToItem, colsFromStorage)\n    } else {\n      colsFromStorage = LocalStorage.getItem(state.name)\n      if (!colsFromStorage || colsFromStorage === 'null') {\n        colsFromStorage = {}\n      }\n    }\n    return colsFromStorage\n  }\n\n  async function getCols ({ state, commit, rootState }, sysColsNeedInitFlags) {\n    const needEtc = sysColsNeedInitFlags.etc\n    commit('reqStart')\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        /* getting device info */\n        const deviceResp = await Vue.connector.gw.getDevices(state.active)\n        const deviceData = deviceResp.data\n        errorsCheck(deviceData)\n        const device = deviceData.result && deviceData.result[0]\n        commit('setSettings', device)\n        const colsFromStorage = getColsFromLS(state)\n        let colsSchema = (colsFromStorage && colsFromStorage[device.device_type_id])\n          ? colsFromStorage[device.device_type_id] : getDefaultColsSchema()\n        const customColsSchemas = (colsFromStorage && colsFromStorage['custom-cols-schemas'])\n          ? colsFromStorage['custom-cols-schemas'] : {}\n        colsSchema.schemas = { ...colsSchema.schemas, ...customColsSchemas }\n        if (Array.isArray(colsSchema)) {\n          colsSchema = migrateCols(colsSchema)\n          commit('setColsToLS', colsSchema)\n        }\n        const needMigration = !colsSchema.enum || (\n          _get(colsSchema.enum, 'timestamp.unit', undefined) === undefined\n        ) // type and unit adding 02.09.20\n\n        /* adding sys cols after migration. 12.11.20 */\n        if (_get(colsSchema.enum, 'action.__dest', undefined) === 'action') {\n          delete colsSchema.enum.action\n        }\n        if (needMigration) {\n          if (device.device_type_id) {\n            /* getting protocol id */\n            const protocolResp = await Vue.connector.gw.getChannelProtocolsDeviceTypes('all', device.device_type_id, { fields: 'protocol_id' })\n            const protocolData = protocolResp.data\n            errorsCheck(protocolData)\n            const protocolId = protocolData.result && protocolData.result[0] && protocolData.result[0].protocol_id\n            /* gettings messages parameters */\n            const messageParamsResp = await Vue.connector.gw.getChannelProtocols(protocolId, { fields: 'message_parameters' })\n            const messageParamsData = messageParamsResp.data\n            errorsCheck(messageParamsData)\n            const messageParams = messageParamsData.result && messageParamsData.result[0] && messageParamsData.result[0].message_parameters\n            /* initing columns by message parameters */\n            colsSchema.schemas._protocol = {\n              name: '_protocol',\n              cols: []\n            }\n            messageParams.forEach((param) => {\n              const name = param.name\n              const enumCol = {\n                name,\n                type: param.type || '',\n                unit: param.unit || '',\n                description: param.info || ''\n              }\n              const schemaCol = {\n                name,\n                width: 150\n              }\n              if (name === 'timestamp') {\n                const locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n                enumCol.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n                enumCol.type = ''\n                enumCol.unit = ''\n                schemaCol.width = 190\n                colsSchema.schemas._protocol.cols.unshift(schemaCol)\n                colsSchema.enum.timestamp = enumCol\n                return\n              }\n              if (name === 'server.timestamp') {\n                enumCol.type = ''\n                enumCol.unit = ''\n                schemaCol.width = 190\n              }\n              colsSchema.schemas._protocol.cols.push(schemaCol)\n              colsSchema.enum[name] = enumCol\n            })\n          }\n          if (needEtc) {\n            colsSchema.schemas._protocol.cols.push({ name: 'etc', width: 150, __dest: 'etc' })\n            colsSchema.schemas._default.cols.push({ name: 'etc', width: 150, __dest: 'etc' })\n          }\n          colsSchema.enum.etc = { name: 'etc', __dest: 'etc' }\n        }\n        commit('setCols', colsSchema)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  function getFromTo (val) {\n    const now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86399999\n    return { from, to }\n  }\n\n  async function initTime ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const params = {\n          reverse: true,\n          count: 1,\n          fields: 'timestamp'\n        }\n        const resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        let date = Date.now()\n        if (data.result.length) {\n          date = Math.round(data.result[0].timestamp * 1000)\n        }\n        const day = getFromTo(date)\n        commit('setFrom', day.from)\n        commit('setTo', day.to)\n        if (day.to < Date.now()) {\n          await newMessagesCheck({ state })\n        }\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function getMessages ({ state, commit, rootState }, params) {\n    commit('reqStart')\n    let result = []\n    if (rootState.token && state.active) {\n      const isLoadingActive = state.isLoading\n      try {\n        !isLoadingActive && Vue.set(state, 'isLoading', true)\n        const resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n        result = data.result || []\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n      }\n    }\n    return result\n  }\n\n  async function get ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      const start = Math.floor(Date.now() / 1000)\n      const params = getParams(state)\n      let messagesCount = 0\n      const messages = await getMessages({ state, commit, rootState }, params)\n      messagesCount += messages.length\n      const now = Math.floor(Date.now() / 1000)\n      const needRT = (params.to >= now && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        const stop = Math.floor(Date.now() / 1000)\n        const params = getParams(state)\n        params.from = start\n        params.to = stop\n        const missedMessages = await getMessages({ state, commit, rootState }, params)\n        messagesCount += missedMessages.length\n        messages.splice(messages.length, 0, ...missedMessages)\n      } else if ((params.to < now || (state.limit && messages.length >= state.limit)) && loopId) {\n        await unsubscribePooling({ state, commit, rootState })\n      }\n      commit('limiting', { type: 'init', count: messagesCount })\n      commit('setHistoryMessages', messages)\n      if (needRT || state.realtimeEnabled) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n    }\n  }\n\n  async function getPrevPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      const to = Math.floor(_get(state, 'messages[0].timestamp', state.to) - 1)\n      const params = getParams(state)\n      params.to = to\n      params.reverse = true\n      if (loopId && state.messages.length > state.limit * 2) {\n        await unsubscribePooling({ state, commit, rootState })\n        commit('limiting', { type: 'rt_deinit' })\n      }\n      const messages = await getMessages({ state, commit, rootState }, params)\n      if (!messages.length) {\n        Vue.set(state, 'isLoading', false)\n        return 0\n      }\n      commit('limiting', { type: 'prev', count: messages.length })\n      commit('prependMessages', messages)\n      Vue.set(state, 'isLoading', false)\n      return messages.length\n    }\n  }\n\n  async function getNextPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      if (state.realtimeEnabled) { return }\n      Vue.set(state, 'isLoading', true)\n      const start = Date.now()\n      const from = Math.floor(_get(state, `messages[${state.messages.length - 1}].timestamp`, state.from) + 1)\n      const params = getParams(state)\n      let messagesCount = 0\n      params.from = from\n      const messages = await getMessages({ state, commit, rootState }, params)\n      messagesCount += messages.length\n      const needRT = (params.to > Math.floor(Date.now() / 1000) && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        const stop = Date.now()\n        const params = getParams(state)\n        params.from = Math.floor(start / 1000)\n        params.to = Math.floor(stop / 1000)\n        const missedMessages = await getMessages({ state, commit, rootState }, params)\n        messagesCount += missedMessages.length\n        messages.splice(messages.length, 0, ...missedMessages)\n      }\n      commit('limiting', { type: 'next', count: messagesCount })\n      commit('appendMessages', messages)\n      if (needRT) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n      return messagesCount\n    }\n  }\n\n  async function getHistory ({ state, commit, rootState }, count) {\n    const limit = state.limit\n    commit('clearMessages')\n    commit('setReverse', true)\n    commit('setLimit', count)\n    await get({ state, commit, rootState })\n    commit('setReverse', false)\n    commit('setLimit', limit)\n  }\n\n  let messagesBuffer = [],\n    loopId = 0\n  function initRenderLoop (state, commit) {\n    return setInterval(() => {\n      if (messagesBuffer.length) {\n        commit('setRTMessages', [...messagesBuffer])\n        messagesBuffer = []\n      }\n    }, 500)\n  }\n\n  async function pollingGet ({ state, commit, rootState }) {\n    await Vue.connector.subscribeMessagesDevices(state.active, (message) => {\n      messagesBuffer.push(JSON.parse(message))\n    }, { rh: 2 })\n    state.realtimeEnabled = true\n    return () => {\n      loopId = initRenderLoop(state, commit)\n    }\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    if (loopId) {\n      clearInterval(loopId)\n      messagesBuffer = []\n      loopId = 0\n    }\n    await Vue.connector.unsubscribeMessagesDevices(state.active)\n    state.realtimeEnabled = false\n  }\n\n  /* getting missed messages after offline */\n  async function getMissedMessages ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const lastIndexOffline = state.messages.reduceRight((result, value, index) => {\n          if (result) {\n            return result\n          }\n          if (value.__connectionStatus === 'offline') {\n            result = index\n          }\n          return result\n        }, 0)\n        const params = {\n          from: !lastIndexOffline ? 0 : Math.floor(state.messages[lastIndexOffline - 1].timestamp) + 1,\n          to: Math.floor(state.messages[lastIndexOffline + 1].timestamp)\n        }\n        const resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        commit('setMissingMessages', { data: data.result, index: lastIndexOffline })\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function newMessagesCheck ({ state }) {\n    state.hasNewMessages = false\n    await Vue.connector.subscribeMessagesDevices(state.active, () => {\n      state.hasNewMessages = true\n      unsubscribePooling({ state })\n    }, { rh: 2 })\n  }\n\n  return {\n    getMessages,\n    get,\n    getPrevPage,\n    getNextPage,\n    pollingGet,\n    getCols,\n    getHistory,\n    initTime,\n    unsubscribePooling,\n    getMissedMessages\n  }\n}\n","import get from 'lodash/get'\nimport set from 'lodash/set'\nexport default function ({ Vue, LocalStorage, filterHandler, newMessagesInterseptor }) {\n  let messagesKeyPointer = 0\n  function messagesIndexing (messages) {\n    if (!messages.length) { return }\n    messages.forEach((message, index) => {\n      messages[index]['x-flespi-message-key'] = messagesKeyPointer++\n    })\n  }\n\n  function setRTMessages (state, data) {\n    if (data && data.length) {\n      if (state.filter && filterHandler) {\n        data = filterHandler(state.filter, data)\n      }\n      messagesIndexing(data)\n      const messages = state.messages\n      if (state.sortBy) {\n        /* write by sorted field */\n        const message = data[0],\n          fieldName = state.sortBy,\n          length = state.messages.length - 1\n        let index = null,\n          escapeFlag = true\n        if (length > 0) {\n          for (let i = length; i !== 0 || escapeFlag; i--) {\n            if (messages[i][fieldName] > message[fieldName]) {\n              index = i\n              if (i === 0) {\n                escapeFlag = false\n              }\n            } else {\n              escapeFlag = false\n            }\n          }\n        }\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        if (index) {\n          messages.splice(index, 0, ...data)\n        } else {\n          messages.splice(messages.length, 0, ...data)\n        }\n      } else {\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        messages.splice(messages.length, 0, ...data)\n      }\n      limiting(state, { type: 'rt', count: data.length })\n    }\n  }\n\n  function prependMessages (state, data) {\n    if (data && data.length) {\n      data.reverse()\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(0, 0, ...data)\n    }\n  }\n\n  function appendMessages (state, data) {\n    if (data && data.length) {\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(messages.length, 0, ...data)\n    }\n  }\n\n  function setHistoryMessages (state, data) {\n    if (state.reverse) {\n      data.reverse()\n    }\n    messagesIndexing(data)\n    newMessagesInterseptor && newMessagesInterseptor(data)\n    state.messages = data\n  }\n\n  function clearMessages (state) {\n    state.messages.splice(0, state.messages.length)\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function limiting (state, { type, count }) {\n    if (!state.limit) { return false }\n    const messages = state.messages\n    const pages = state.pages\n    switch (type) {\n      case 'init': {\n        state.pages = count ? [count] : []\n        break\n      }\n      case 'prev': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[2]\n          state.pages = [count, ...pages.slice(0, -1)]\n          messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        } else {\n          state.pages = [count, ...pages]\n        }\n        break\n      }\n      case 'next': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[0]\n          state.pages = [...pages.slice(1, 3), count]\n          messages.splice(0, removeMessagesCount)\n        } else if (pagesCount < 3) {\n          pages.push(count)\n        }\n        break\n      }\n      case 'rt_init': {\n        pages.push(0)\n        break\n      }\n      case 'rt_deinit': {\n        const removeMessagesCount = pages.pop()\n        messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        break\n      }\n      case 'rt': {\n        const pagesCount = pages.length\n        const rtCount = pages[pagesCount - 1] || 0\n        if (rtCount + count > state.limit) {\n          if (pagesCount > 3) {\n            const removeMessagesCount = pages[0]\n            state.pages = [...pages.slice(1, -1), rtCount + count, 0]\n            messages.splice(0, removeMessagesCount)\n          } else {\n            state.pages = [...pages.slice(0, -1), rtCount + count, 0]\n          }\n        } else {\n          state.pages[pagesCount - 1] = rtCount + count\n        }\n      }\n    }\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      Vue.set(state, 'filter', value)\n    }\n  }\n\n  function setFrom (state, from) {\n    Vue.set(state, 'from', from)\n  }\n\n  function setTo (state, to) {\n    Vue.set(state, 'to', to)\n  }\n\n  function reqStart () {\n    if (DEV) {\n      console.log('Start Request Devices messages')\n    }\n  }\n\n  function setActive (state, id) {\n    Vue.set(state, 'active', id)\n  }\n\n  function setReverse (state, val) {\n    Vue.set(state, 'reverse', val)\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.from = 0\n    state.to = 0\n    state.limit = 1000\n    state.reverse = false\n    await Vue.connector.unsubscribeMessagesDevices(state.active)\n  }\n\n  function getColsFromLS (state) {\n    let colsFromStorage = {}\n    if (state.lsNamespace) {\n      const lsPath = state.lsNamespace.split('.'),\n        lsItemName = lsPath.shift(),\n        lsRouteToItem = `${lsPath.join('.')}.${state.name}`,\n        appStorage = LocalStorage.getItem(lsItemName)\n      colsFromStorage = get(appStorage, lsRouteToItem, colsFromStorage)\n    } else {\n      colsFromStorage = LocalStorage.getItem(state.name) || colsFromStorage\n    }\n    return colsFromStorage\n  }\n\n  function splitSchemas (cols) {\n    const customColsSchema = {\n      ...cols.schemas,\n      _default: undefined,\n      _protocol: undefined\n    }\n    const defaultColsSchema = {\n      activeSchema: cols.activeSchema,\n      schemas: {\n        _default: cols.schemas._default,\n        _protocol: cols.schemas._protocol\n      },\n      enum: cols.enum\n    }\n    return { customColsSchema, defaultColsSchema }\n  }\n\n  function setColsToLS (state, cols) {\n    const colsFromStorage = getColsFromLS(state) || {}\n    const { customColsSchema, defaultColsSchema } = splitSchemas(cols)\n    colsFromStorage[state.settings.device_type_id] = defaultColsSchema\n    colsFromStorage['custom-cols-schemas'] = { ...colsFromStorage['custom-cols-schemas'], ...customColsSchema }\n    if (state.lsNamespace) {\n      const lsPath = state.lsNamespace.split('.'),\n        lsItemName = lsPath.shift(),\n        lsRouteToItem = `${lsPath.join('.')}.${state.name}`,\n        appStorage = LocalStorage.getItem(lsItemName) || {}\n      set(appStorage, lsRouteToItem, colsFromStorage)\n      LocalStorage.set(lsItemName, appStorage)\n    } else {\n      LocalStorage.set(state.name, colsFromStorage)\n    }\n  }\n\n  function setCols (state, cols) {\n    setColsToLS(state, cols)\n    Vue.set(state, 'cols', cols)\n  }\n\n  function setSettings (state, device) {\n    Vue.set(state, 'settings', device)\n  }\n\n  const updateCols = setCols\n\n  function setOffline (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      state.messages.push({ __connectionStatus: 'offline', timestamp: Date.now() / 1000 })\n    }\n    state.offline = true\n  }\n\n  function setReconnected (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      state.messages.push({ __connectionStatus: 'reconnected', timestamp: Date.now() / 1000 })\n    }\n    state.offline = false\n  }\n\n  function setMissingMessages (state, { data, index }) {\n    data.forEach((val) => {\n      val['x-flespi-status'] = 'missed'\n    })\n    state.messages.splice(index + 1, 0, ...data)\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setSortBy (state, field) {\n    Vue.set(state, 'sortBy', field)\n  }\n\n  function clearSortBy (state) {\n    Vue.set(state, 'sortBy', null)\n  }\n\n  return {\n    setOffline,\n    setReconnected,\n    setMissingMessages,\n    setHistoryMessages,\n    setRTMessages,\n    prependMessages,\n    appendMessages,\n    clearMessages,\n    setLimit,\n    limiting,\n    setFilter,\n    setFrom,\n    setTo,\n    reqStart,\n    setReverse,\n    clear,\n    setActive,\n    setCols,\n    setColsToLS,\n    updateCols,\n    setSelected,\n    clearSelected,\n    setSortBy,\n    clearSortBy,\n    setSettings\n  }\n}\n","import getActions from './actions'\nimport getMutations from './mutations'\nimport get from 'lodash/get'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, filterHandler, newMessagesInterseptor }) {\n  const lsNamespace = get(name, 'lsNamespace', undefined)\n  name = get(name, 'name', name)\n  const actions = getActions({ Vue, LocalStorage, errorHandler }),\n    mutations = getMutations({ Vue, LocalStorage, filterHandler, newMessagesInterseptor })\n\n  const state = {\n    name,\n    lsNamespace,\n    isLoading: false,\n    active: 0,\n    messages: [],\n    pages: [],\n    filter: '',\n    settings: {},\n    realtimeEnabled: false,\n    from: 0,\n    to: 0,\n    limit: 1000,\n    reverse: false,\n    cols: undefined,\n    offline: false,\n    selected: [],\n    sortBy: null,\n    hasNewMessages: null\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n"],"names":["require$$0","arr","_Array$isArray","i","arr2","Array","length","iter","_isIterable","Object","prototype","toString","call","_Array$from","TypeError","arrayWithoutHoles","iterableToArray","nonIterableSpread","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","_Promise","then","fn","self","this","args","arguments","apply","err","undefined","obj","_Object$defineProperty","enumerable","configurable","writable","defaultCols","Vue","LocalStorage","errorHandler","getParams","state","params","limit","count","filter","from","Math","floor","to","reverse","errorsCheck","data","errors","forEach","errObject","Error","reason","getColsFromLS","colsFromStorage","lsNamespace","oldStore","getItem","name","remove","lsPath","split","lsItemName","shift","lsRouteToItem","join","appStorage","_get","sysColsNeedInitFlags","commit","rootState","needEtc","etc","token","active","set","connector","gw","getDevices","deviceResp","deviceData","device","result","colsSchema","device_type_id","activeSchema","schemas","_default","cols","map","width","enum","reduce","res","customColsSchemas","isArray","schema","_protocol","col","custom","push","schemasÑŽ_unsaved","display","needMigration","action","getChannelProtocolsDeviceTypes","fields","protocolResp","protocolData","protocolId","protocol_id","getChannelProtocols","messageParamsResp","messageParamsData","messageParams","message_parameters","param","enumCol","type","unit","description","schemaCol","locale","Date","match","addition","slice","unshift","timestamp","__dest","DEV","console","log","getDevicesMessages","JSON","stringify","resp","date","now","round","setHours","day","newMessagesCheck","getMessages","isLoadingActive","isLoading","get","start","messagesCount","messages","needRT","loopId","startRTRender","pollingGet","stop","missedMessages","splice","unsubscribePooling","realtimeEnabled","messagesBuffer","subscribeMessagesDevices","message","parse","rh","setInterval","clearInterval","unsubscribeMessagesDevices","lastIndexOffline","reduceRight","index","__connectionStatus","hasNewMessages","getPrevPage","getNextPage","getCols","getHistory","initTime","getMissedMessages","filterHandler","newMessagesInterseptor","messagesKeyPointer","messagesIndexing","clearMessages","clearSelected","limiting","pages","removeMessagesCount","pagesCount","pop","rtCount","setColsToLS","customColsSchema","defaultColsSchema","settings","setCols","setOffline","needPostOfflineMessage","offline","setReconnected","setMissingMessages","val","setHistoryMessages","setRTMessages","sortBy","fieldName","escapeFlag","prependMessages","appendMessages","setLimit","setFilter","setFrom","setTo","reqStart","setReverse","clear","setActive","id","updateCols","setSelected","indexes","setSortBy","field","clearSortBy","setSettings","namespaced","selected","actions","getActions","mutations","getMutations"],"mappings":"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"}