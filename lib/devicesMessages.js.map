{"version":3,"file":"devicesMessages.js","sources":["../node_modules/@babel/runtime/helpers/defineProperty.js","../node_modules/@babel/runtime/helpers/objectSpread2.js","../src/store/modules/ls.js","../src/store/modules/devicesMessages/actions.js","../src/store/modules/devicesMessages/index.js","../src/store/modules/devicesMessages/mutations.js"],"sourcesContent":["function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var defineProperty = require(\"./defineProperty.js\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectSpread2;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","import get from 'lodash/get'\nimport set from 'lodash/set'\n\nfunction splitSchemas (cols) {\n  const customColsSchema = {\n    ...cols.schemas,\n    _default: undefined,\n    _protocol: undefined,\n    _unsaved: undefined\n  }\n  const defaultColsSchema = {\n    activeSchema: cols.activeSchema,\n    schemas: {\n      _default: cols.schemas._default,\n      _protocol: cols.schemas._protocol,\n      _unsaved: cols.schemas._unsaved\n    }\n  }\n  return { customColsSchema, defaultColsSchema }\n}\nfunction getColsLS (LocalStorage, lsNamespace, name) {\n  let colsFromStorage = {}\n  if (lsNamespace) {\n    const lsPath = lsNamespace.split('.'),\n      lsItemName = lsPath.shift(),\n      lsRouteToItem = `${lsPath.join('.')}.${name}`,\n      appStorage = LocalStorage.getItem(lsItemName)\n    colsFromStorage = get(appStorage, lsRouteToItem, colsFromStorage)\n  } else {\n    colsFromStorage = LocalStorage.getItem(name) || colsFromStorage\n  }\n  return colsFromStorage\n}\n\nfunction setColsLS (LocalStorage, lsNamespace, name, active, cols) {\n  const colsFromStorage = getColsLS(LocalStorage, lsNamespace, name) || {}\n  const { customColsSchema, defaultColsSchema } = splitSchemas(cols)\n  colsFromStorage[active] = defaultColsSchema\n  colsFromStorage['custom-cols-schemas'] = { ...customColsSchema }\n  if (lsNamespace) {\n    const lsPath = lsNamespace.split('.'),\n      lsItemName = lsPath.shift(),\n      lsRouteToItem = `${lsPath.join('.')}.${name}`,\n      appStorage = LocalStorage.getItem(lsItemName) || {}\n    set(appStorage, lsRouteToItem, colsFromStorage)\n    LocalStorage.set(lsItemName, appStorage)\n  } else {\n    LocalStorage.set(name, colsFromStorage)\n  }\n}\n\nexport {\n  getColsLS,\n  setColsLS\n}\n","import _get from 'lodash/get'\nimport { getColsLS, setColsLS } from '../ls'\n\nconst defaultCols = ['timestamp', 'server.timestamp', 'ident', 'position.latitude', 'position.longitude', 'position.altitude', 'position.speed']\n\nexport default function ({ Vue, LocalStorage, errorHandler, logger }) {\n  function getParams (state) {\n    const params = {}\n    if (state.limit) {\n      params.count = state.limit\n    }\n    if (state.filter) {\n      params.filter = `${state.filter}`\n    }\n    if (state.from) {\n      params.from = state.from / 1000\n    }\n    if (state.to) {\n      params.to = state.to / 1000\n    }\n    if (state.reverse) {\n      params.reverse = state.reverse\n    }\n    return params\n  }\n\n  function errorsCheck (commit, data) {\n    if (data.errors) {\n      commit('reqError', data.errors)\n      data.errors.forEach((error) => {\n        const errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    } else {\n      commit('reqFullfiled')\n    }\n  }\n\n  function getDefaultEnum () {\n    const locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n    return defaultCols.reduce((res, name) => {\n      res[name] = { name }\n      if (name.match(/timestamp$/)) {\n        res[name].addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n        res[name].type = ''\n        res[name].unit = ''\n      }\n      return res\n    }, {})\n  }\n\n  function getDefaultColsSchema () {\n    return {\n      activeSchema: '_default',\n      schemas: {\n        _default: {\n          name: '_default',\n          cols: defaultCols.map(name => ({ name, width: 150 }))\n        }\n      },\n      enum: getDefaultEnum()\n    }\n  }\n\n  async function getCols ({ state, commit, rootState }, sysColsNeedInitFlags) {\n    const needEtc = sysColsNeedInitFlags.etc\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        /* getting device info */\n        const deviceResp = await Vue.connector.gw.getDevices(state.active)\n        const deviceData = deviceResp.data\n        errorsCheck(commit, deviceData)\n        const device = deviceData.result && deviceData.result[0]\n        commit('setSettings', device)\n        let colsFromStorage = getColsLS(LocalStorage, state.lsNamespace, state.name)\n        colsFromStorage = (colsFromStorage && colsFromStorage[device.device_type_id])\n        const colsSchema = colsFromStorage || getDefaultColsSchema()\n        const customColsSchemas = (colsFromStorage && colsFromStorage['custom-cols-schemas'])\n          ? colsFromStorage['custom-cols-schemas'] : {}\n        colsSchema.schemas = { ...colsSchema.schemas, ...customColsSchemas }\n        if (!colsSchema.enum) {\n          colsSchema.enum = getDefaultEnum()\n        }\n        if (device.device_type_id) {\n          /* getting protocol id */\n          const protocolResp = await Vue.connector.gw.getChannelProtocolsDeviceTypes('all', device.device_type_id, { fields: 'protocol_id' })\n          commit('reqStart', { endpoint: 'getChannelProtocolsDeviceTypes', active:  device.device_type_id, fields: 'protocol_id' })\n          const protocolData = protocolResp.data\n          errorsCheck(commit, protocolData)\n          const protocolId = protocolData.result && protocolData.result[0] && protocolData.result[0].protocol_id\n          /* gettings messages parameters */\n          const messageParamsResp = await Vue.connector.gw.getChannelProtocols(protocolId, { fields: 'message_parameters' })\n          commit('reqStart', { endpoint: 'getChannelProtocols', active: protocolId, fields: 'message_parameters' })\n          const messageParamsData = messageParamsResp.data\n          errorsCheck(commit, messageParamsData)\n          const messageParams = messageParamsData.result && messageParamsData.result[0] && messageParamsData.result[0].message_parameters\n          /* initing columns by message parameters */\n          colsSchema.schemas._protocol = {\n            name: '_protocol',\n            cols: []\n          }\n          const locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n          messageParams.forEach((param) => {\n            const name = param.name\n            const enumCol = {\n              name,\n              type: param.type || '',\n              unit: param.unit || '',\n              description: param.info || ''\n            }\n            const schemaCol = {\n              name,\n              width: 150\n            }\n            if (name.match(/timestamp$/)) {\n              enumCol.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n              enumCol.type = ''\n              enumCol.unit = ''\n              schemaCol.width = 190\n              if (name === 'timestamp') {\n                colsSchema.schemas._protocol.cols.unshift(schemaCol)\n                colsSchema.enum.timestamp = enumCol\n                return\n              }\n            }\n            colsSchema.schemas._protocol.cols.push(schemaCol)\n            colsSchema.enum[name] = enumCol\n          })\n        }\n        if (needEtc) {\n          device.device_type_id && colsSchema.schemas._protocol.cols.push({ name: 'etc', width: 150, __dest: 'etc' })\n          !colsFromStorage && colsSchema.schemas._default.cols.push({ name: 'etc', width: 150, __dest: 'etc' })\n        }\n        colsSchema.enum.etc = { name: 'etc', __dest: 'etc' }\n        commit('setCols', colsSchema)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  function getFromTo (val) {\n    const now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86399999.999\n    return { from, to }\n  }\n\n  async function initTime ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const params = {\n          reverse: true,\n          count: 1,\n          fields: 'timestamp'\n        }\n        const resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        commit('reqStart', { endpoint: 'getDevicesMessages-initTime', active: state.active, data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(commit, data)\n        let date = Date.now()\n        if (data.result.length) {\n          date = Math.round(data.result[0].timestamp * 1000)\n        }\n        const day = getFromTo(date)\n        commit('setFrom', day.from)\n        commit('setTo', day.to)\n        if (day.to < Date.now()) {\n          await newMessagesCheck({ state })\n        }\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function getMessages ({ state, commit, rootState }, params) {\n    let result = []\n    if (rootState.token && state.active) {\n      const isLoadingActive = state.isLoading\n      try {\n        !isLoadingActive && Vue.set(state, 'isLoading', true)\n        const resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        commit('reqStart', { endpoint: 'getDevicesMessages', active: state.active, data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(commit, data)\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n        result = data.result || []\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n      }\n    }\n    return result\n  }\n\n  async function get ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      const start = Date.now() / 1000\n      const params = getParams(state)\n      let messagesCount = 0\n      const messages = await getMessages({ state, commit, rootState }, params)\n      messagesCount += messages.length\n      const now = Date.now() / 1000\n      const needRT = (params.to >= now && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        const stop = Date.now() / 1000\n        const params = getParams(state)\n        params.from = start\n        params.to = stop\n        const missedMessages = await getMessages({ state, commit, rootState }, params)\n        messagesCount += missedMessages.length\n        messages.splice(0, 0, ...missedMessages)\n      } else if ((params.to < now || (state.limit && messages.length >= state.limit)) && loopId) {\n        await unsubscribePooling({ state, commit, rootState })\n      }\n      commit('limiting', { type: 'init', count: messagesCount })\n      commit('setHistoryMessages', messages)\n      if (needRT || state.realtimeEnabled) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n    }\n  }\n\n  async function getPrevPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      const to = _get(state, 'messages[0].timestamp', state.to) - 0.000001\n      const params = getParams(state)\n      params.to = to\n      params.reverse = true\n      if (loopId && state.messages.length > state.limit * 2) {\n        await unsubscribePooling({ state, commit, rootState })\n        commit('limiting', { type: 'rt_deinit' })\n      }\n      const messages = await getMessages({ state, commit, rootState }, params)\n      if (!messages.length) {\n        Vue.set(state, 'isLoading', false)\n        return 0\n      }\n      commit('limiting', { type: 'prev', count: messages.length })\n      commit('prependMessages', messages)\n      Vue.set(state, 'isLoading', false)\n      return messages.length\n    }\n  }\n\n  async function getNextPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      if (state.realtimeEnabled) { return }\n      Vue.set(state, 'isLoading', true)\n      const start = Date.now()\n      const from = _get(state, `messages[${state.messages.length - 1}].timestamp`, state.from) + 0.000001\n      const params = getParams(state)\n      let messagesCount = 0\n      params.from = from\n      const messages = await getMessages({ state, commit, rootState }, params)\n      messagesCount += messages.length\n      const needRT = (params.to > Math.floor(Date.now() / 1000) && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        const stop = Date.now()\n        const params = getParams(state)\n        params.from = start / 1000\n        params.to = stop / 1000\n        const missedMessages = await getMessages({ state, commit, rootState }, params)\n        messagesCount += missedMessages.length\n        messages.splice(messages.length, 0, ...missedMessages)\n      }\n      commit('limiting', { type: 'next', count: messagesCount })\n      commit('appendMessages', messages)\n      if (needRT) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n      return messagesCount\n    }\n  }\n\n  async function getHistory ({ state, commit, rootState }, count) {\n    const limit = state.limit\n    commit('clearMessages')\n    commit('setReverse', true)\n    commit('setLimit', count)\n    await get({ state, commit, rootState })\n    commit('setReverse', false)\n    commit('setLimit', limit)\n  }\n\n  let messagesBuffer = [],\n    loopId = 0\n  function initRenderLoop (state, commit) {\n    return setInterval(() => {\n      if (messagesBuffer.length) {\n        commit('setRTMessages', [...messagesBuffer])\n        messagesBuffer = []\n      }\n    }, 500)\n  }\n\n  async function pollingGet ({ state, commit, rootState }) {\n    const filter = state.filter ? `$filter/payload=${encodeURIComponent(state.filter)}` : undefined\n    await Vue.connector.subscribeMessagesDevices(state.active, (message) => {\n      messagesBuffer.push(JSON.parse(message))\n    }, { rh: 2, prefix: filter })\n    state.realtimeEnabled = true\n    logger.info(`subscribed to messagesDevices ${state.active} ${filter || ''}`)\n    return () => {\n      loopId = initRenderLoop(state, commit)\n    }\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    if (loopId) {\n      clearInterval(loopId)\n      messagesBuffer = []\n      loopId = 0\n    }\n    const filter = state.filter ? `$filter/payload=${encodeURIComponent(state.filter)}` : undefined\n    await Vue.connector.unsubscribeMessagesDevices(state.active, undefined, { prefix: filter })\n    state.realtimeEnabled = false\n    logger.info(`unsubscribed to messagesDevices ${state.active} ${filter || ''}`)\n  }\n\n  /* getting missed messages after offline */\n  async function getMissedMessages ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const { start, end, lastMessageIndex } = state.offline\n        const params = {\n          from: start,\n          to: end\n        }\n        if (state.filter) { params.data.filter = state.filter }\n        const resp = await Vue.connector.gw.getDevicesMessages(state.active, { data: JSON.stringify(params) })\n        commit('reqStart', { endpoint: 'getDevicesMessages', active: state.active, data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(commit, data)\n        commit('setMissingMessages', { data: data.result, index: lastMessageIndex })\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function newMessagesCheck ({ state }) {\n    state.hasNewMessages = false\n    await Vue.connector.subscribeMessagesDevices(state.active, () => {\n      state.hasNewMessages = true\n      unsubscribePooling({ state })\n    }, { rh: 2 })\n    logger.info(`newMessagesCheck subscribed to messagesDevice ${state.active}`)\n  }\n\n  return {\n    getMessages,\n    get,\n    getPrevPage,\n    getNextPage,\n    pollingGet,\n    getCols,\n    getHistory,\n    initTime,\n    unsubscribePooling,\n    getMissedMessages\n  }\n}\n","import getActions from './actions'\nimport getMutations from './mutations'\nimport get from 'lodash/get'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, newMessagesInterseptor }) {\n  const lsNamespace = get(name, 'lsNamespace', undefined)\n  name = get(name, 'name', name)\n  const logger = Vue.$logger.extendName(name);\n  const actions = getActions({ Vue, LocalStorage, errorHandler, logger }),\n    mutations = getMutations({ Vue, LocalStorage, newMessagesInterseptor, logger })\n\n  const state = {\n    name,\n    lsNamespace,\n    isLoading: false,\n    active: 0,\n    messages: [],\n    pages: [],\n    filter: '',\n    settings: {},\n    realtimeEnabled: false,\n    from: 0,\n    to: 0,\n    limit: 1000,\n    reverse: false,\n    cols: undefined,\n    offline: false,\n    selected: [],\n    sortBy: null,\n    hasNewMessages: null\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n","import { setColsLS } from '../ls'\nexport default function ({ Vue, LocalStorage, newMessagesInterseptor, logger }) {\n  let messagesKeyPointer = 0\n  function messagesIndexing (messages) {\n    if (!messages.length) { return }\n    messages.forEach((message, index) => {\n      Object.defineProperty(messages[index], 'x-flespi-message-key', {\n        value: messagesKeyPointer++,\n        enumerable: false\n      })\n    })\n  }\n\n  function setRTMessages (state, data) {\n    if (data && data.length) {\n      messagesIndexing(data)\n      const messages = state.messages\n      if (state.sortBy) {\n        /* write by sorted field */\n        const message = data[0],\n          fieldName = state.sortBy,\n          length = state.messages.length - 1\n        let index = null,\n          escapeFlag = true\n        if (length > 0) {\n          for (let i = length; i !== 0 || escapeFlag; i--) {\n            if (messages[i][fieldName] > message[fieldName]) {\n              index = i\n              if (i === 0) {\n                escapeFlag = false\n              }\n            } else {\n              escapeFlag = false\n            }\n          }\n        }\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        if (index) {\n          messages.splice(index, 0, ...data)\n        } else {\n          messages.splice(messages.length, 0, ...data)\n        }\n      } else {\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        messages.splice(messages.length, 0, ...data)\n      }\n      limiting(state, { type: 'rt', count: data.length })\n      logger.info(`setRTMessages: length: ${data.length}`)\n    }\n  }\n\n  function prependMessages (state, data) {\n    if (data && data.length) {\n      data.reverse()\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(0, 0, ...data)\n    }\n    logger.info(`prependMessages: length: ${data.length}`)\n  }\n\n  function appendMessages (state, data) {\n    if (data && data.length) {\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(messages.length, 0, ...data)\n    }\n    logger.info(`appendMessages: length: ${data.length}`)\n  }\n\n  function setHistoryMessages (state, data) {\n    if (state.reverse) {\n      data.reverse()\n    }\n    messagesIndexing(data)\n    newMessagesInterseptor && newMessagesInterseptor(data)\n    state.messages = data\n    logger.info(`setHistoryMessages: length: ${data.length}, reverse:${state.reverse}`)\n  }\n\n  function clearMessages (state) {\n    state.messages.splice(0, state.messages.length)\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n    logger.info(`clearMessages`)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function limiting (state, { type, count }) {\n    if (!state.limit) { return false }\n    const messages = state.messages\n    const pages = state.pages\n    switch (type) {\n      case 'init': {\n        state.pages = count ? [count] : []\n        break\n      }\n      case 'prev': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[2]\n          state.pages = [count, ...pages.slice(0, -1)]\n          messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        } else {\n          state.pages = [count, ...pages]\n        }\n        break\n      }\n      case 'next': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[0]\n          state.pages = [...pages.slice(1, 3), count]\n          messages.splice(0, removeMessagesCount)\n        } else if (pagesCount < 3) {\n          pages.push(count)\n        }\n        break\n      }\n      case 'rt_init': {\n        pages.push(0)\n        break\n      }\n      case 'rt_deinit': {\n        const removeMessagesCount = pages.pop()\n        messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        break\n      }\n      case 'rt': {\n        const pagesCount = pages.length\n        const rtCount = pages[pagesCount - 1] || 0\n        if (rtCount + count > state.limit) {\n          if (pagesCount > 3) {\n            const removeMessagesCount = pages[0]\n            state.pages = [...pages.slice(1, -1), rtCount + count, 0]\n            messages.splice(0, removeMessagesCount)\n          } else {\n            state.pages = [...pages.slice(0, -1), rtCount + count, 0]\n          }\n        } else {\n          state.pages[pagesCount - 1] = rtCount + count\n        }\n      }\n    }\n    logger.info(`limiting: ${type} - count: ${count}`)\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      Vue.set(state, 'filter', value)\n    }\n    logger.info(`setFilter: ${value}`)\n  }\n\n  function setFrom (state, from) {\n    Vue.set(state, 'from', from)\n    logger.info(`setFrom: ${from}`)\n  }\n\n  function setTo (state, to) {\n    Vue.set(state, 'to', to)\n    logger.info(`setTo: ${to}`)\n  }\n\n  function reqStart (state, params) {\n    logger.info(`reqStart: ${JSON.stringify(params)}`)\n  }\n\n  function reqFullfiled () {\n    logger.info(`reqFullfiled`)\n  }\n\n  function reqError (state, error) {\n    logger.info(`reqError: ${JSON.stringify(error)}`)\n  }\n\n  function setActive (state, id) {\n    Vue.set(state, 'active', id)\n    logger.info(`setActive: ${id}`)\n  }\n\n  function setReverse (state, val) {\n    Vue.set(state, 'reverse', val)\n    logger.info(`setReverse: ${val}`)\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.from = 0\n    state.to = 0\n    state.limit = 1000\n    state.reverse = false\n    await Vue.connector.unsubscribeMessagesDevices(state.active)\n    logger.info(`clear module`)\n    logger.info(`unsubscribeMessagesDevices ${state.active}`)\n  }\n\n  function setCols (state, cols) {\n    setColsLS(LocalStorage, state.lsNamespace, state.name, state.settings.device_type_id, cols)\n    Vue.set(state, 'cols', cols)\n  }\n\n  function setSettings (state, device) {\n    Vue.set(state, 'settings', device)\n    logger.info(`setSettings: ${device}`)\n  }\n\n  const updateCols = setCols\n\n  function setOffline (state) {\n    state.offline = {\n      start: Date.now() / 1000,\n      lastMessageIndex: state.messages.length - 1\n    }\n    logger.info(`setOffline`)\n  }\n\n  function setReconnected (state) {\n    state.offline.end = Date.now() / 1000\n    logger.info(`setReconnected`)\n  }\n\n  function clearOfflineState (state) {\n    state.offline = false\n  }\n\n  function setMissingMessages (state, { data, index }) {\n    state.messages.splice(index + 1, 0, ...data)\n    logger.info(`setMissingMessages: ${data.length}`)\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setSortBy (state, field) {\n    Vue.set(state, 'sortBy', field)\n  }\n\n  function clearSortBy (state) {\n    Vue.set(state, 'sortBy', null)\n  }\n\n  return {\n    setOffline,\n    setReconnected,\n    clearOfflineState,\n    setMissingMessages,\n    setHistoryMessages,\n    setRTMessages,\n    prependMessages,\n    appendMessages,\n    clearMessages,\n    setLimit,\n    limiting,\n    setFilter,\n    setFrom,\n    setTo,\n    reqStart,\n    reqFullfiled,\n    reqError,\n    setReverse,\n    clear,\n    setActive,\n    setCols,\n    updateCols,\n    setSelected,\n    clearSelected,\n    setSortBy,\n    clearSortBy,\n    setSettings\n  }\n}\n"],"names":["module","obj","key","value","Object","defineProperty","enumerable","configurable","writable","exports","require$$0","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","getColsLS","LocalStorage","lsNamespace","name","colsFromStorage","lsPath","split","lsItemName","shift","lsRouteToItem","join","appStorage","getItem","get","setColsLS","active","cols","customColsSchema","defaultColsSchema","schemas","_default","undefined","_protocol","_unsaved","activeSchema","splitSchemas","set","defaultCols","Vue","errorHandler","logger","getParams","state","params","limit","count","from","to","reverse","errorsCheck","commit","data","errors","error","errObject","Error","reason","getDefaultEnum","locale","Date","toString","match","reduce","res","addition","slice","type","unit","getMessages","rootState","result","token","isLoadingActive","isLoading","resp","connector","gw","getDevicesMessages","JSON","stringify","endpoint","e","DEV","console","log","start","now","messagesCount","messages","needRT","loopId","startRTRender","pollingGet","stop","missedMessages","splice","unsubscribePooling","realtimeEnabled","messagesBuffer","encodeURIComponent","subscribeMessagesDevices","message","parse","rh","prefix","info","setInterval","initRenderLoop","clearInterval","unsubscribeMessagesDevices","getPrevPage","_get","getNextPage","Math","floor","getCols","sysColsNeedInitFlags","needEtc","etc","deviceData","getDevices","device","device_type_id","colsSchema","map","width","enum","customColsSchemas","protocolResp","getChannelProtocolsDeviceTypes","fields","protocolData","protocolId","protocol_id","messageParamsResp","getChannelProtocols","messageParamsData","messageParams","message_parameters","param","enumCol","description","schemaCol","unshift","timestamp","__dest","getHistory","initTime","date","round","day","val","setHours","getFromTo","hasNewMessages","newMessagesCheck","getMissedMessages","end","lastMessageIndex","offline","index","newMessagesInterseptor","$logger","extendName","actions","getActions","mutations","messagesKeyPointer","messagesIndexing","clearMessages","clearSelected","limiting","pages","removeMessagesCount","pagesCount","pop","rtCount","setCols","settings","setOffline","setReconnected","clearOfflineState","setMissingMessages","setHistoryMessages","setRTMessages","sortBy","fieldName","escapeFlag","prependMessages","appendMessages","setLimit","setFilter","setFrom","setTo","reqStart","reqFullfiled","reqError","setReverse","clear","setActive","id","updateCols","setSelected","indexes","setSortBy","field","clearSortBy","setSettings","getMutations","namespaced","selected"],"mappings":"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"}