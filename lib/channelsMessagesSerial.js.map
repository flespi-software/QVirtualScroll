{"version":3,"file":"channelsMessagesSerial.js","sources":["../node_modules/@babel/runtime-corejs2/core-js/array/is-array.js","../node_modules/@babel/runtime-corejs2/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime-corejs2/core-js/array/from.js","../node_modules/@babel/runtime-corejs2/core-js/is-iterable.js","../node_modules/@babel/runtime-corejs2/helpers/iterableToArray.js","../node_modules/@babel/runtime-corejs2/helpers/nonIterableSpread.js","../node_modules/@babel/runtime-corejs2/helpers/toConsumableArray.js","../src/store/modules/channelsMessagesSerial/actions.js","../src/store/modules/channelsMessagesSerial/mutations.js","../src/store/modules/channelsMessagesSerial/index.js"],"sourcesContent":["module.exports = require(\"core-js/library/fn/array/is-array\");","var _Array$isArray = require(\"../core-js/array/is-array\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (_Array$isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","module.exports = require(\"core-js/library/fn/array/from\");","module.exports = require(\"core-js/library/fn/is-iterable\");","var _Array$from = require(\"../core-js/array/from\");\n\nvar _isIterable = require(\"../core-js/is-iterable\");\n\nfunction _iterableToArray(iter) {\n  if (_isIterable(Object(iter)) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return _Array$from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","export default function ({ Vue, LocalStorage, errorHandler }) {\n  function getParams (state) {\n    let params = {}\n    if (state.limit) {\n      params.count = state.limit\n    }\n    if (state.filter && state.sysFilter) {\n      if (state.mode === 1) {\n        params.filter = `${state.sysFilter}`\n      } else {\n        params.filter = `${state.sysFilter},${state.filter}`\n      }\n    } else if (state.sysFilter && !state.filter) {\n      params.filter = `${state.sysFilter}`\n    } else if (!state.sysFilter && state.filter) {\n      if (state.mode === 0) {\n        params.filter = `${state.filter}`\n      }\n    }\n    if (state.from && (!state.reverse || state.mode === 1)) {\n      if (!state.reverse) {\n        params.from = Math.floor(state.from / 1000)\n      }\n    }\n    if (state.to) {\n      if (state.mode === 1) {\n        state.to = Date.now()\n      }\n      params.to = Math.floor(state.to / 1000)\n    }\n    if (state.reverse) {\n      params.reverse = state.reverse\n    }\n    return params\n  }\n\n  function errorsCheck (data) {\n    if (data.errors) {\n      data.errors.forEach((error) => {\n        let errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    }\n  }\n\n  async function getCols ({ state, commit, rootState }) {\n    commit('reqStart')\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let cols = [],\n          colsFromStorage = LocalStorage.getItem(state.name)\n        if (colsFromStorage && colsFromStorage[state.active] && colsFromStorage[state.active]) {\n          /* remove after sometime 12.07.19 */\n          colsFromStorage[state.active].forEach((col) => {\n            if (col.name === 'timestamp') {\n              let locale = new Date().toString().match(/([-\\+][0-9]+)\\s/)[1]\n              col.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n            }\n          })\n          cols = colsFromStorage[state.active]\n        } else {\n          let protocolIdResp = await Vue.connector.gw.getChannels(state.active, { fields: 'protocol_id' })\n          let protocolIdData = protocolIdResp.data\n          errorsCheck(protocolIdData)\n          if (protocolIdData.result && protocolIdData.result.length && protocolIdData.result[0].protocol_id) {\n            let colsResp = await Vue.connector.gw.getProtocols(protocolIdData.result[0].protocol_id, { fields: 'message_parameters' })\n            let colsData = colsResp.data\n            errorsCheck(colsData)\n            colsData.result[0].message_parameters.forEach(col => {\n              let colItem = {\n                name: col.name,\n                width: 160,\n                display: true,\n                description: col.info\n              }\n              if (colItem.name === 'timestamp') {\n                let locale = new Date().toString().match(/([-\\+][0-9]+)\\s/)[1]\n                colItem.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n              }\n              cols.push(colItem)\n            })\n          }\n        }\n        commit('setCols', cols)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  function getFromTo (val) {\n    let now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86400000\n    return { from, to }\n  }\n\n  async function initTime ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let params = {\n          reverse: true,\n          count: 1\n        }\n        let resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        let data = resp.data\n        errorsCheck(data)\n        let date = Date.now()\n        if (data.result.length) {\n          date = Math.round(data.result[0].timestamp * 1000)\n        }\n        commit('setDate', getFromTo(date).from)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function get ({ state, commit, rootState }, preaction) {\n    commit('reqStart')\n    if (preaction) {\n      let { name: preactionName, payload: preactionPayload } = preaction\n      commit('clearMessages')\n      commit(preactionName, preactionPayload)\n    }\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let currentMode = JSON.parse(JSON.stringify(state.mode))\n        let resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(getParams(state)) })\n        /* if mode changed in time request */\n        if (currentMode !== state.mode) { return false }\n        let data = resp.data\n        errorsCheck(data)\n        if (preaction) {\n          if (data.result.length) {\n            commit('setMessages', data.result)\n            commit('postaction')\n          } else {\n            commit('postaction')\n            switch (preaction.name) { // logic for empty response after pagination scroll\n              case 'paginationPrev': {\n                commit('datePrev')\n                commit('paginationPrev')\n                await get({ state, commit, rootState })\n                commit('postaction')\n                break\n              }\n              case 'paginationNext': {\n                get({ state, commit, rootState }, { name: 'dateNext' })\n                commit('postaction')\n                break\n              }\n              default: {\n                commit('setMessages', data.result)\n                commit('postaction')\n              }\n            }\n          }\n        } else {\n          commit('setMessages', data.result)\n        }\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function getHistory ({ state, commit, rootState }, count) {\n    let limit = state.limit,\n      filter = state.filter\n    commit('setReverse', true)\n    commit('setLimit', count)\n    commit('setFilter', '')\n    await get({ state, commit, rootState })\n    commit('setReverse', false)\n    commit('setLimit', limit)\n    commit('setFilter', filter)\n  }\n\n  let messagesBuffer = [],\n    loopId = 0\n  function initRenderLoop (state, commit) {\n    return setInterval(() => {\n      if (messagesBuffer.length) {\n        if (state.mode === 1) {\n          commit('setMessages', [...messagesBuffer])\n        }\n        messagesBuffer = []\n      }\n    }, 500)\n  }\n\n  async function pollingGet ({ state, commit, rootState }) {\n    loopId = initRenderLoop(state, commit)\n    await Vue.connector.subscribeMessagesChannels(state.active, '+', (message) => {\n      if (state.mode === 1) {\n        messagesBuffer.push(JSON.parse(message))\n      } else {\n        commit('setNewMessagesCount', state.newMessagesCount + 1)\n      }\n    }, { rh: 2 })\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    if (loopId) { clearInterval(loopId) }\n    await Vue.connector.unsubscribeMessagesChannels(state.active, '+')\n  }\n\n  /* getting missed messages after offline */\n  async function getMissedMessages ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let lastIndexOffline = state.messages.reduceRight((result, value, index) => {\n          if (result) {\n            return result\n          }\n          if (value.__connectionStatus === 'offline') {\n            result = index\n          }\n          return result\n        }, 0)\n        let params = {\n          from: !lastIndexOffline ? 0 : Math.floor(state.messages[lastIndexOffline - 1].timestamp) + 1,\n          to: Math.floor(state.messages[lastIndexOffline + 1].timestamp)\n        }\n        let resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        let data = resp.data\n        errorsCheck(data)\n        commit('setMissingMessages', { data: data.result, index: lastIndexOffline })\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  return {\n    get,\n    pollingGet,\n    getCols,\n    getHistory,\n    initTime,\n    unsubscribePooling,\n    getMissedMessages\n  }\n}\n","export default function ({ Vue, LocalStorage, filterHandler, newMessagesInterseptor }) {\n  function getFromTo (val) {\n    let now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86400000\n    return { from, to }\n  }\n\n  function setMessages (state, data) {\n    if (data && data.length) {\n      if (state.reverse) {\n        data.reverse()\n        if (state.mode === 1) {\n          data[data.length - 1].delimiter = true\n        }\n      }\n      if (state.mode === 1) {\n        Vue.set(state, 'from', Math.floor((data[data.length - 1].timestamp + 1) * 1000))\n        if (state.filter && filterHandler) {\n          data = filterHandler(state.filter, data)\n        }\n      }\n      let messages = state.messages\n      if (state.sortBy && state.mode === 1) {\n        if (data.length > 1) {\n          /* write history for rt mode */\n          messages = messages.concat(data)\n        } else {\n          /* write by sorted field */\n          let message = data[0],\n            fieldName = state.sortBy,\n            length = state.messages.length - 1,\n            index = null,\n            escapeFlag = true\n          if (length > 0) {\n            for (let i = length; i !== 0 || escapeFlag; i--) {\n              if (messages[i][fieldName] > message[fieldName]) {\n                index = i\n                if (i === 0) {\n                  escapeFlag = false\n                }\n              } else {\n                escapeFlag = false\n              }\n            }\n          }\n          if (index) {\n            messages.splice(index, 0, message)\n          } else {\n            messages.push(message)\n          }\n        }\n      } else {\n        messages = messages.concat(data)\n      }\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      if (state.limit && state.mode === 1 && messages.length >= state.limit + (state.limit * 0.1)) { // rt limiting\n        let count = (messages.length - 1) - (state.limit - 1)\n        messages = messages.slice(count)\n        Vue.set(state, 'selected', state.selected.map((index) => index - count))\n      }\n      Vue.set(state, 'messages', messages)\n    } else {\n      if (state.mode === 1) {\n        Vue.set(state, 'from', state.to + 1000)\n      }\n      Vue.set(state, 'messages', [])\n    }\n  }\n\n  function clearMessages (state) {\n    Vue.set(state, 'messages', [])\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      if (state.mode === 1) {\n        if (state.filter) {\n          state.messages.push({ 'x-flespi-filter-prev': state.filter })\n        }\n        if (value) {\n          state.messages.push({ 'x-flespi-filter-next': value })\n        }\n      }\n      Vue.set(state, 'filter', value)\n    }\n  }\n\n  function setMode (state, mode) {\n    switch (mode) {\n      case 0: {\n        let timeObj = state.from ? getFromTo(state.from) : getFromTo()\n        state.from = timeObj.from\n        state.to = timeObj.to\n        clearMessages(state)\n        break\n      }\n      case 1: {\n        let now = Date.now() - 4000\n        state.from = now - 1000\n        state.to = now\n        state.newMessagesCount = 0\n        break\n      }\n    }\n    Vue.set(state, 'mode', mode)\n  }\n\n  function setFrom (state, from) {\n    Vue.set(state, 'from', from)\n  }\n\n  function setTo (state, to) {\n    Vue.set(state, 'to', to)\n  }\n\n  function reqStart () {\n    if (DEV) {\n      console.log('Start Request Channels messages')\n    }\n  }\n\n  function setActive (state, id) {\n    state.newMessagesCount = 0\n    Vue.set(state, 'active', id)\n  }\n\n  function setReverse (state, val) {\n    Vue.set(state, 'reverse', val)\n  }\n\n  function setDate (state, date) {\n    let timeObj = getFromTo(date)\n    state.from = timeObj.from\n    state.to = timeObj.to\n  }\n\n  function dateNext (state) {\n    let timeObj = getFromTo(state.from + 86400000)\n    state.from = timeObj.from\n    state.to = timeObj.to\n  }\n\n  function datePrev (state) {\n    let timeObj = getFromTo(state.from - 86400000)\n    state.from = timeObj.from\n    state.to = timeObj.to\n  }\n\n  function paginationPrev (state, firstTimestamp) {\n    state.reverse = true\n    state.sysFilter += `timestamp>=${getFromTo(state.from).from / 1000}`\n    if (firstTimestamp) {\n      state.from = getFromTo(firstTimestamp).from\n      state.to = firstTimestamp - 1000\n    }\n  }\n\n  function paginationNext (state, lastTimestamp) {\n    state.sysFilter += `timestamp<=${state.to / 1000}`\n    if (lastTimestamp) {\n      state.to = getFromTo(lastTimestamp).to\n      state.from = lastTimestamp + 1000\n    }\n  }\n\n  function postaction (state) {\n    let timeObj = getFromTo(state.from)\n    setFrom(state, state.from || timeObj.from)\n    setTo(state, timeObj.to)\n    if (state.reverse) {\n      setReverse(state, false)\n    }\n    state.sysFilter = ''\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.mode = null\n    state.from = 0\n    state.to = 0\n    state.limit = 1000\n    state.reverse = false\n    await Vue.connector.unsubscribeMessagesChannels(state.active)\n  }\n\n  function setCols (state, cols) {\n    let colsFromStorage = LocalStorage.getItem(state.name)\n    if (!colsFromStorage) {\n      colsFromStorage = {}\n    }\n    colsFromStorage[state.active] = cols\n    LocalStorage.set(state.name, colsFromStorage)\n    Vue.set(state, 'cols', cols)\n  }\n\n  function setSettings (state, channel) {\n    Vue.set(state, 'settings', channel)\n  }\n\n  let updateCols = setCols\n\n  function setNewMessagesCount (state, count) {\n    Vue.set(state, 'newMessagesCount', count)\n  }\n\n  function setOffline (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      setMessages(state, [{ __connectionStatus: 'offline', timestamp: Date.now() / 1000 }])\n    }\n    state.offline = true\n  }\n\n  function setReconnected (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      setMessages(state, [{ __connectionStatus: 'reconnected', timestamp: Date.now() / 1000 }])\n    }\n    state.offline = false\n  }\n\n  function setMissingMessages (state, { data, index }) {\n    data.forEach((val) => {\n      val.__status = 'missed'\n    })\n    state.messages.splice(index + 1, 0, ...data)\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setSortBy (state, field) {\n    Vue.set(state, 'sortBy', field)\n  }\n\n  function clearSortBy (state) {\n    Vue.set(state, 'sortBy', null)\n  }\n\n  return {\n    setOffline,\n    setReconnected,\n    setMissingMessages,\n    setMessages,\n    clearMessages,\n    setLimit,\n    setFilter,\n    setMode,\n    setFrom,\n    setTo,\n    reqStart,\n    setReverse,\n    dateNext,\n    datePrev,\n    paginationPrev,\n    paginationNext,\n    setDate,\n    postaction,\n    clear,\n    setActive,\n    setCols,\n    updateCols,\n    setNewMessagesCount,\n    setSelected,\n    clearSelected,\n    setSortBy,\n    clearSortBy,\n    setSettings\n  }\n}\n","import getActions from './actions'\nimport getMutations from './mutations'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, filterHandler, newMessagesInterseptor }) {\n  let actions = getActions({ Vue, LocalStorage, errorHandler }),\n    mutations = getMutations({ Vue, LocalStorage, filterHandler, newMessagesInterseptor })\n\n  const state = {\n    name: name,\n    isLoading: false,\n    active: 0,\n    messages: [],\n    filter: '',\n    sysFilter: '',\n    settings: {},\n    mode: null,\n    from: 0,\n    to: 0,\n    limit: 1000,\n    reverse: false,\n    cols: [],\n    newMessagesCount: 0,\n    offline: false,\n    selected: [],\n    sortBy: null\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n"],"names":["require$$0","arr","_Array$isArray","i","arr2","Array","length","iter","_isIterable","Object","prototype","toString","call","_Array$from","TypeError","arrayWithoutHoles","iterableToArray","nonIterableSpread","Vue","LocalStorage","errorHandler","errorsCheck","data","errors","forEach","error","errObject","Error","reason","get","preaction","state","commit","rootState","preactionName","name","preactionPayload","payload","token","active","set","currentMode","JSON","parse","stringify","mode","connector","gw","getChannelsMessages","params","limit","count","filter","sysFilter","from","reverse","Math","floor","to","Date","now","resp","result","DEV","console","log","messagesBuffer","loopId","initRenderLoop","setInterval","pollingGet","subscribeMessagesChannels","message","push","newMessagesCount","rh","getCols","cols","colsFromStorage","getItem","col","locale","match","addition","slice","getChannels","fields","protocolIdResp","protocolIdData","protocol_id","getProtocols","colsResp","colsData","message_parameters","colItem","width","display","description","info","getHistory","initTime","date","round","timestamp","setHours","unsubscribePooling","clearInterval","unsubscribeMessagesChannels","getMissedMessages","lastIndexOffline","messages","reduceRight","value","index","__connectionStatus","filterHandler","newMessagesInterseptor","getFromTo","val","setMessages","delimiter","sortBy","concat","fieldName","escapeFlag","splice","selected","map","clearMessages","clearSelected","setFrom","setTo","setReverse","setCols","setOffline","needPostOfflineMessage","offline","setReconnected","setMissingMessages","__status","setLimit","setFilter","setMode","timeObj","reqStart","dateNext","datePrev","paginationPrev","firstTimestamp","paginationNext","lastTimestamp","setDate","postaction","clear","setActive","id","updateCols","setNewMessagesCount","setSelected","indexes","setSortBy","field","clearSortBy","setSettings","channel","namespaced","isLoading","settings","actions","getActions","mutations","getMutations"],"mappings":"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"}