{"version":3,"file":"channelsMessagesSerial.js","sources":["../node_modules/@babel/runtime/helpers/defineProperty.js","../node_modules/@babel/runtime/helpers/objectSpread2.js","../src/store/modules/ls.js","../src/store/modules/channelsMessagesSerial/actions.js","../src/store/modules/channelsMessagesSerial/index.js","../src/store/modules/channelsMessagesSerial/mutations.js"],"sourcesContent":["function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var defineProperty = require(\"./defineProperty.js\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectSpread2;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","import get from 'lodash/get'\nimport set from 'lodash/set'\n\nfunction splitSchemas (cols) {\n  const customColsSchema = {\n    ...cols.schemas,\n    _default: undefined,\n    _protocol: undefined,\n    _unsaved: undefined\n  }\n  const defaultColsSchema = {\n    activeSchema: cols.activeSchema,\n    schemas: {\n      _default: cols.schemas._default,\n      _protocol: cols.schemas._protocol,\n      _unsaved: cols.schemas._unsaved\n    }\n  }\n  return { customColsSchema, defaultColsSchema }\n}\nfunction getColsLS (LocalStorage, lsNamespace, name) {\n  let colsFromStorage = {}\n  if (lsNamespace) {\n    const lsPath = lsNamespace.split('.'),\n      lsItemName = lsPath.shift(),\n      lsRouteToItem = `${lsPath.join('.')}.${name}`,\n      appStorage = LocalStorage.getItem(lsItemName)\n    colsFromStorage = get(appStorage, lsRouteToItem, colsFromStorage)\n  } else {\n    colsFromStorage = LocalStorage.getItem(name) || colsFromStorage\n  }\n  return colsFromStorage\n}\n\nfunction setColsLS (LocalStorage, lsNamespace, name, active, cols) {\n  const colsFromStorage = getColsLS(LocalStorage, lsNamespace, name) || {}\n  const { customColsSchema, defaultColsSchema } = splitSchemas(cols)\n  colsFromStorage[active] = defaultColsSchema\n  colsFromStorage['custom-cols-schemas'] = { ...customColsSchema }\n  if (lsNamespace) {\n    const lsPath = lsNamespace.split('.'),\n      lsItemName = lsPath.shift(),\n      lsRouteToItem = `${lsPath.join('.')}.${name}`,\n      appStorage = LocalStorage.getItem(lsItemName) || {}\n    set(appStorage, lsRouteToItem, colsFromStorage)\n    LocalStorage.set(lsItemName, appStorage)\n  } else {\n    LocalStorage.set(name, colsFromStorage)\n  }\n}\n\nexport {\n  getColsLS,\n  setColsLS\n}\n","import _get from 'lodash/get'\nimport { getColsLS, setColsLS } from '../ls'\n\nconst defaultCols = ['timestamp', 'server.timestamp', 'ident', 'position.latitude', 'position.longitude', 'position.altitude', 'position.speed']\nexport default function ({ Vue, LocalStorage, errorHandler }) {\n  function getParams (state) {\n    const params = {}\n    if (state.limit) {\n      params.count = state.limit\n    }\n    if (state.filter) {\n      params.filter = `${state.filter}`\n    }\n    if (state.from) {\n      params.from = Math.floor(state.from / 1000)\n    }\n    if (state.to) {\n      params.to = Math.floor(state.to / 1000)\n    }\n    if (state.reverse) {\n      params.reverse = state.reverse\n    }\n    return params\n  }\n\n  function errorsCheck (data) {\n    if (data.errors) {\n      data.errors.forEach((error) => {\n        const errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    }\n  }\n\n  /* migration to new format storing cols 28.12.20 */\n  async function migrateCols (active, cols) {\n    const schema = {\n      activeSchema: '_default',\n      schemas: {\n        _default: {\n          name: '_default',\n          cols: cols.reduce((res, col) => {\n            if ((defaultCols.includes(col.name) || (!!col.__dest && col.display))) {\n              res.push({ name: col.name, width: col.width })\n            }\n            return res\n          }, [])\n        },\n        _protocol: {\n          name: '_protocol',\n          cols: cols.reduce((res, col) => {\n            if (!col.custom) {\n              res.push({ name: col.name, width: 150 })\n            }\n            return res\n          }, [])\n        }\n      },\n      enum: {}\n    }\n    if (cols.length) {\n      const processedSchemaByCols = cols.reduce((res, col) => {\n        const isColDefault = defaultCols.includes(col.name)\n        res.isDefault = res.isDefault && ((!col.display && !isColDefault) || (col.display && (isColDefault || !!col.__dest)))\n        res.isProtocol = res.isProtocol && !col.custom\n        if (col.display) {\n          res.schema.push({ name: col.name, width: col.width })\n        }\n        return res\n      }, {\n        schema: [],\n        isDefault: true,\n        isProtocol: true,\n        enum: {}\n      })\n      if (!processedSchemaByCols.isDefault || !processedSchemaByCols.isProtocol) {\n        const channelResp = await Vue.connector.gw.getChannels(active, { fields: 'name' })\n        const channelData = channelResp.data\n        errorsCheck(channelData)\n        let name = _get(channelData, 'result[0].name', `Channel-${active}`)\n        name = `${name}[${active}]`\n        schema.activeSchema = name\n        schema.schemas[name] = {\n          name,\n          cols: processedSchemaByCols.schema\n        }\n      }\n    }\n    return schema\n  }\n\n  function getDefaultEnum () {\n    return defaultCols.reduce((res, name) => {\n      res[name] = { name }\n      return res\n    }, {})\n  }\n\n  function getDefaultColsSchema () {\n    return {\n      activeSchema: '_default',\n      schemas: {\n        _default: {\n          name: '_default',\n          cols: defaultCols.map(name => ({ name, width: 150 }))\n        }\n      },\n      enum: getDefaultEnum()\n    }\n  }\n\n  async function migrateAll (state, data) {\n    for (const name in data) {\n      let colsSchema = data[name]\n      if (Array.isArray(colsSchema)) {\n        colsSchema = await migrateCols(state.active, colsSchema)\n        setColsLS(LocalStorage, state.lsNamespace, state.name, name, colsSchema)\n        data[name] = colsSchema\n      } else if (colsSchema.enum) {\n        delete colsSchema.enum\n        setColsLS(LocalStorage, state.lsNamespace, state.name, name, colsSchema)\n        data[name] = colsSchema\n      }\n    }\n    return data\n  }\n\n  async function getCols ({ state, commit, rootState }, sysColsNeedInitFlags) {\n    commit('reqStart')\n    const needEtc = sysColsNeedInitFlags.etc\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let colsFromStorage = getColsLS(LocalStorage, state.lsNamespace, state.name)\n        migrateAll(state, colsFromStorage)\n        colsFromStorage = (colsFromStorage && colsFromStorage[state.active])\n        const colsSchema = colsFromStorage || getDefaultColsSchema()\n        const customColsSchemas = (colsFromStorage && colsFromStorage['custom-cols-schemas'])\n          ? colsFromStorage['custom-cols-schemas'] : {}\n        colsSchema.schemas = { ...colsSchema.schemas, ...customColsSchemas }\n        if (!colsSchema.enum) {\n          colsSchema.enum = getDefaultEnum()\n        }\n        const protocolIdResp = await Vue.connector.gw.getChannels(state.active, { fields: 'protocol_id' })\n        const protocolIdData = protocolIdResp.data\n        errorsCheck(protocolIdData)\n        if (protocolIdData.result && protocolIdData.result.length && protocolIdData.result[0].protocol_id) {\n          const colsResp = await Vue.connector.gw.getChannelProtocols(protocolIdData.result[0].protocol_id, { fields: 'message_parameters' })\n          const colsData = colsResp.data\n          errorsCheck(colsData)\n          const messageParams = colsData.result[0].message_parameters\n          /* initing columns by message parameters */\n          colsSchema.schemas._protocol = {\n            name: '_protocol',\n            cols: []\n          }\n          const locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n          messageParams.forEach((param) => {\n            const name = param.name\n            const enumCol = {\n              name,\n              type: param.type || '',\n              unit: param.unit || '',\n              description: param.info || ''\n            }\n            const schemaCol = {\n              name,\n              width: 150\n            }\n            if (name.match(/timestamp$/)) {\n              enumCol.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n              enumCol.type = ''\n              enumCol.unit = ''\n              schemaCol.width = 190\n              if (name === 'timestamp') {\n                colsSchema.schemas._protocol.cols.unshift(schemaCol)\n                colsSchema.enum.timestamp = enumCol\n                return\n              }\n            }\n            colsSchema.schemas._protocol.cols.push(schemaCol)\n            colsSchema.enum[name] = enumCol\n          })\n        }\n        if (needEtc) {\n          colsSchema.schemas._protocol.cols.push({ name: 'etc', width: 150, __dest: 'etc' })\n          !colsFromStorage && colsSchema.schemas._default.cols.push({ name: 'etc', width: 150, __dest: 'etc' })\n        }\n        colsSchema.enum.etc = { name: 'etc', __dest: 'etc' }\n        commit('setCols', colsSchema)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  function getFromTo (val) {\n    const now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86399999\n    return { from, to }\n  }\n\n  async function initTime ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const params = {\n          reverse: true,\n          count: 1\n        }\n        const resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        let date = Date.now()\n        if (data.result.length) {\n          date = Math.round(data.result[0]['server.timestamp'] * 1000)\n        }\n        const day = getFromTo(date)\n        commit('setFrom', day.from)\n        commit('setTo', day.to)\n        if (day.to < Date.now()) {\n          await newMessagesCheck({ state })\n        }\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function getMessages ({ state, commit, rootState }, params) {\n    commit('reqStart')\n    let result = []\n    if (rootState.token && state.active) {\n      const isLoadingActive = state.isLoading\n      try {\n        !isLoadingActive && Vue.set(state, 'isLoading', true)\n        const resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n        result = data.result || []\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n      }\n    }\n    return result\n  }\n\n  async function get ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      const start = Math.floor(Date.now() / 1000)\n      const params = getParams(state)\n      let messagesCount = 0\n      const messages = await getMessages({ state, commit, rootState }, params)\n      messagesCount += messages.length\n      const now = Math.floor(Date.now() / 1000)\n      const needRT = (params.to >= now && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        const stop = Math.floor(Date.now() / 1000)\n        const params = getParams(state)\n        params.from = start\n        params.to = stop\n        const missedMessages = await getMessages({ state, commit, rootState }, params)\n        messagesCount += missedMessages.length\n        messages.splice(messages.length, 0, ...missedMessages)\n      } else if ((params.to < now || (state.limit && messages.length >= state.limit)) && loopId) {\n        await unsubscribePooling({ state, commit, rootState })\n      }\n      commit('limiting', { type: 'init', count: messagesCount })\n      commit('setHistoryMessages', messages)\n      if (needRT || state.realtimeEnabled) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n    }\n  }\n\n  async function getPrevPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      const to = Math.floor(_get(state, 'messages[0][\"server.timestamp\"]', state.to) - 1)\n      const params = getParams(state)\n      params.to = to\n      params.reverse = true\n      if (loopId && state.messages.length > state.limit * 2) {\n        await unsubscribePooling({ state, commit, rootState })\n        commit('limiting', { type: 'rt_deinit' })\n      }\n      const messages = await getMessages({ state, commit, rootState }, params)\n      if (!messages.length) {\n        Vue.set(state, 'isLoading', false)\n        return 0\n      }\n      commit('limiting', { type: 'prev', count: messages.length })\n      commit('prependMessages', messages)\n      Vue.set(state, 'isLoading', false)\n      return messages.length\n    }\n  }\n\n  async function getNextPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      if (state.realtimeEnabled) { return }\n      Vue.set(state, 'isLoading', true)\n      const start = Date.now()\n      const from = Math.floor(_get(state, `messages[${state.messages.length - 1}]['server.timestamp']`, state.from) + 1)\n      const params = getParams(state)\n      let messagesCount = 0\n      params.from = from\n      const messages = await getMessages({ state, commit, rootState }, params)\n      messagesCount += messages.length\n      const needRT = (params.to + 2 > Math.floor(Date.now() / 1000) && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        const stop = Date.now()\n        const params = getParams(state)\n        params.from = Math.floor(start / 1000)\n        params.to = Math.floor(stop / 1000)\n        const missedMessages = await getMessages({ state, commit, rootState }, params)\n        messagesCount += missedMessages.length\n        messages.splice(messages.length, 0, ...missedMessages)\n      }\n      commit('limiting', { type: 'next', count: messagesCount })\n      commit('appendMessages', messages)\n      if (needRT) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n      return messagesCount\n    }\n  }\n\n  async function getHistory ({ state, commit, rootState }, count) {\n    const limit = state.limit\n    commit('clearMessages')\n    commit('setReverse', true)\n    commit('setLimit', count)\n    await get({ state, commit, rootState })\n    commit('setReverse', false)\n    commit('setLimit', limit)\n  }\n\n  let messagesBuffer = [],\n    loopId = 0\n  function initRenderLoop (state, commit) {\n    return setInterval(() => {\n      if (messagesBuffer.length) {\n        commit('setRTMessages', [...messagesBuffer])\n        messagesBuffer = []\n      }\n    }, 500)\n  }\n\n  async function pollingGet ({ state, commit }) {\n    const filter = state.filter ? `$filter/payload=${encodeURIComponent(state.filter)}` : undefined\n    await Vue.connector.subscribeMessagesChannels(state.active, '+', (message) => {\n      messagesBuffer.push(JSON.parse(message))\n    }, { rh: 2, prefix: filter })\n    state.realtimeEnabled = true\n    return () => {\n      loopId = initRenderLoop(state, commit)\n    }\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    if (loopId) {\n      clearInterval(loopId)\n      messagesBuffer = []\n      loopId = 0\n    }\n    const filter = state.filter ? `$filter/payload=${encodeURIComponent(state.filter)}` : undefined\n    await Vue.connector.unsubscribeMessagesChannels(state.active, '+', undefined, { prefix: filter })\n    state.realtimeEnabled = false\n  }\n\n  /* getting missed messages after offline */\n  async function getMissedMessages ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const { start, end, lastMessageIndex } = state.offline\n        const params = {\n          from: start,\n          to: end\n        }\n        if (state.filter) { params.data.filter = state.filter }\n        const resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        commit('setMissingMessages', { data: data.result, index: lastMessageIndex })\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function newMessagesCheck ({ state }) {\n    state.hasNewMessages = false\n    await Vue.connector.subscribeMessagesChannels(state.active, '+', () => {\n      state.hasNewMessages = true\n      unsubscribePooling({ state })\n    }, { rh: 2 })\n  }\n\n  return {\n    getMessages,\n    get,\n    getPrevPage,\n    getNextPage,\n    pollingGet,\n    getCols,\n    getHistory,\n    initTime,\n    unsubscribePooling,\n    getMissedMessages\n  }\n}\n","import getActions from './actions'\nimport getMutations from './mutations'\nimport get from 'lodash/get'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, newMessagesInterseptor }) {\n  const lsNamespace = get(name, 'lsNamespace', undefined)\n  name = get(name, 'name', name)\n  const actions = getActions({ Vue, LocalStorage, errorHandler }),\n    mutations = getMutations({ Vue, LocalStorage, newMessagesInterseptor })\n\n  const state = {\n    name,\n    lsNamespace,\n    isLoading: false,\n    active: 0,\n    messages: [],\n    pages: [],\n    filter: '',\n    settings: {},\n    realtimeEnabled: false,\n    from: 0,\n    to: 0,\n    limit: 1000,\n    reverse: false,\n    cols: undefined,\n    offline: false,\n    selected: [],\n    sortBy: null,\n    hasNewMessages: null\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n","import { setColsLS } from '../ls'\nexport default function ({ Vue, LocalStorage, newMessagesInterseptor }) {\n  let messagesKeyPointer = 0\n  function messagesIndexing (messages) {\n    if (!messages.length) { return }\n    messages.forEach((message, index) => {\n      messages[index]['x-flespi-message-key'] = messagesKeyPointer++\n    })\n  }\n  function setRTMessages (state, data) {\n    if (data && data.length) {\n      messagesIndexing(data)\n      const messages = state.messages\n      if (state.sortBy) {\n        /* write by sorted field */\n        const message = data[0],\n          fieldName = state.sortBy,\n          length = state.messages.length - 1\n        let index = null,\n          escapeFlag = true\n        if (length > 0) {\n          for (let i = length; i !== 0 || escapeFlag; i--) {\n            if (messages[i][fieldName] > message[fieldName]) {\n              index = i\n              if (i === 0) {\n                escapeFlag = false\n              }\n            } else {\n              escapeFlag = false\n            }\n          }\n        }\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        if (index) {\n          messages.splice(index, 0, ...data)\n        } else {\n          messages.splice(messages.length, 0, ...data)\n        }\n      } else {\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        messages.splice(messages.length, 0, ...data)\n      }\n      limiting(state, { type: 'rt', count: data.length })\n    }\n  }\n\n  function prependMessages (state, data) {\n    if (data && data.length) {\n      data.reverse()\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(0, 0, ...data)\n    }\n  }\n\n  function appendMessages (state, data) {\n    if (data && data.length) {\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(messages.length, 0, ...data)\n    }\n  }\n\n  function setHistoryMessages (state, data) {\n    if (state.reverse) {\n      data.reverse()\n    }\n    messagesIndexing(data)\n    newMessagesInterseptor && newMessagesInterseptor(data)\n    state.messages = data\n  }\n\n  function clearMessages (state) {\n    state.messages.splice(0, state.messages.length)\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function limiting (state, { type, count }) {\n    if (!state.limit) { return false }\n    const messages = state.messages\n    const pages = state.pages\n    switch (type) {\n      case 'init': {\n        state.pages = count ? [count] : []\n        break\n      }\n      case 'prev': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[2]\n          state.pages = [count, ...pages.slice(0, -1)]\n          messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        } else {\n          state.pages = [count, ...pages]\n        }\n        break\n      }\n      case 'next': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[0]\n          state.pages = [...pages.slice(1, 3), count]\n          messages.splice(0, removeMessagesCount)\n        } else if (pagesCount < 3) {\n          pages.push(count)\n        }\n        break\n      }\n      case 'rt_init': {\n        pages.push(0)\n        break\n      }\n      case 'rt_deinit': {\n        const removeMessagesCount = pages.pop()\n        messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        break\n      }\n      case 'rt': {\n        const pagesCount = pages.length\n        const rtCount = pages[pagesCount - 1] || 0\n        if (rtCount + count > state.limit) {\n          if (pagesCount > 3) {\n            const removeMessagesCount = pages[0]\n            state.pages = [...pages.slice(1, -1), rtCount + count, 0]\n            messages.splice(0, removeMessagesCount)\n          } else {\n            state.pages = [...pages.slice(0, -1), rtCount + count, 0]\n          }\n        } else {\n          state.pages[pagesCount - 1] = rtCount + count\n        }\n      }\n    }\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      Vue.set(state, 'filter', value)\n    }\n  }\n\n  function setFrom (state, from) {\n    Vue.set(state, 'from', from)\n  }\n\n  function setTo (state, to) {\n    Vue.set(state, 'to', to)\n  }\n\n  function reqStart () {\n    if (DEV) {\n      console.log('Start Request Channels messages')\n    }\n  }\n\n  function setActive (state, id) {\n    Vue.set(state, 'active', id)\n  }\n\n  function setReverse (state, val) {\n    Vue.set(state, 'reverse', val)\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.from = 0\n    state.to = 0\n    state.limit = 1000\n    state.reverse = false\n    await Vue.connector.unsubscribeMessagesChannels(state.active)\n  }\n\n  function setCols (state, cols) {\n    setColsLS(LocalStorage, state.lsNamespace, state.name, state.active, cols)\n    Vue.set(state, 'cols', cols)\n  }\n\n  function setSettings (state, channel) {\n    Vue.set(state, 'settings', channel)\n  }\n\n  const updateCols = setCols\n\n  function setOffline (state) {\n    state.offline = {\n      start: Math.floor(Date.now() / 1000),\n      lastMessageIndex: state.messages.length - 1\n    }\n  }\n\n  function setReconnected (state) {\n    state.offline.end = Math.floor(Date.now() / 1000)\n  }\n\n  function clearOfflineState (state) {\n    state.offline = false\n  }\n\n  function setMissingMessages (state, { data, index }) {\n    state.messages.splice(index + 1, 0, ...data)\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setSortBy (state, field) {\n    Vue.set(state, 'sortBy', field)\n  }\n\n  function clearSortBy (state) {\n    Vue.set(state, 'sortBy', null)\n  }\n\n  return {\n    setOffline,\n    setReconnected,\n    clearOfflineState,\n    setHistoryMessages,\n    setRTMessages,\n    setMissingMessages,\n    prependMessages,\n    appendMessages,\n    clearMessages,\n    setLimit,\n    limiting,\n    setFilter,\n    setFrom,\n    setTo,\n    reqStart,\n    setReverse,\n    clear,\n    setActive,\n    setCols,\n    updateCols,\n    setSelected,\n    clearSelected,\n    setSortBy,\n    clearSortBy,\n    setSettings\n  }\n}\n"],"names":["module","obj","key","value","Object","defineProperty","enumerable","configurable","writable","exports","require$$0","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","getColsLS","LocalStorage","lsNamespace","name","colsFromStorage","lsPath","split","lsItemName","shift","lsRouteToItem","join","appStorage","getItem","get","setColsLS","active","cols","customColsSchema","defaultColsSchema","schemas","_default","undefined","_protocol","_unsaved","activeSchema","splitSchemas","set","defaultCols","Vue","errorHandler","getParams","state","params","limit","count","from","Math","floor","to","reverse","errorsCheck","data","errors","error","errObject","Error","reason","migrateCols","schema","reduce","res","col","includes","__dest","display","width","custom","enum","processedSchemaByCols","isColDefault","isDefault","isProtocol","channelData","connector","gw","getChannels","fields","_get","getDefaultEnum","getMessages","commit","rootState","result","token","isLoadingActive","isLoading","getChannelsMessages","JSON","stringify","e","DEV","console","log","start","Date","now","messagesCount","messages","needRT","loopId","startRTRender","pollingGet","stop","missedMessages","splice","unsubscribePooling","type","realtimeEnabled","messagesBuffer","encodeURIComponent","subscribeMessagesChannels","message","parse","rh","prefix","setInterval","initRenderLoop","clearInterval","unsubscribeMessagesChannels","getPrevPage","getNextPage","getCols","sysColsNeedInitFlags","needEtc","etc","colsSchema","Array","isArray","migrateAll","map","customColsSchemas","protocolIdData","protocol_id","colsData","getChannelProtocols","messageParams","message_parameters","locale","toString","match","param","enumCol","unit","description","info","schemaCol","addition","slice","unshift","timestamp","getHistory","initTime","date","round","day","val","setHours","getFromTo","hasNewMessages","newMessagesCheck","getMissedMessages","end","lastMessageIndex","offline","index","newMessagesInterseptor","actions","getActions","mutations","messagesKeyPointer","messagesIndexing","clearMessages","clearSelected","limiting","pages","removeMessagesCount","pagesCount","pop","rtCount","setCols","setOffline","setReconnected","clearOfflineState","setHistoryMessages","setRTMessages","sortBy","fieldName","escapeFlag","setMissingMessages","prependMessages","appendMessages","setLimit","setFilter","setFrom","setTo","reqStart","setReverse","clear","setActive","id","updateCols","setSelected","indexes","setSortBy","field","clearSortBy","setSettings","channel","getMutations","namespaced","settings","selected"],"mappings":"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"}