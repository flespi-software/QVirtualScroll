{"version":3,"file":"channelsMessagesSerial.js","sources":["../node_modules/@babel/runtime-corejs2/helpers/defineProperty.js","../node_modules/@babel/runtime-corejs2/helpers/arrayLikeToArray.js","../node_modules/@babel/runtime-corejs2/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime-corejs2/helpers/iterableToArray.js","../node_modules/@babel/runtime-corejs2/helpers/unsupportedIterableToArray.js","../node_modules/@babel/runtime-corejs2/helpers/nonIterableSpread.js","../node_modules/@babel/runtime-corejs2/helpers/toConsumableArray.js","../node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator.js","../src/store/modules/ls.js","../src/store/modules/channelsMessagesSerial/actions.js","../src/store/modules/channelsMessagesSerial/mutations.js","../src/store/modules/channelsMessagesSerial/index.js"],"sourcesContent":["var _Object$defineProperty = require(\"@babel/runtime-corejs2/core-js/object/define-property\");\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    _Object$defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nmodule.exports = _arrayLikeToArray;","var _Array$isArray = require(\"@babel/runtime-corejs2/core-js/array/is-array\");\n\nvar arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (_Array$isArray(arr)) return arrayLikeToArray(arr);\n}\n\nmodule.exports = _arrayWithoutHoles;","var _Array$from = require(\"@babel/runtime-corejs2/core-js/array/from\");\n\nvar _isIterable = require(\"@babel/runtime-corejs2/core-js/is-iterable\");\n\nvar _Symbol = require(\"@babel/runtime-corejs2/core-js/symbol\");\n\nfunction _iterableToArray(iter) {\n  if (typeof _Symbol !== \"undefined\" && _isIterable(Object(iter))) return _Array$from(iter);\n}\n\nmodule.exports = _iterableToArray;","var _Array$from = require(\"@babel/runtime-corejs2/core-js/array/from\");\n\nvar arrayLikeToArray = require(\"./arrayLikeToArray\");\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nmodule.exports = _unsupportedIterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","var _Promise = require(\"@babel/runtime-corejs2/core-js/promise\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    _Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new _Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","import get from 'lodash/get'\nimport set from 'lodash/set'\n\nfunction splitSchemas (cols) {\n  const customColsSchema = {\n    ...cols.schemas,\n    _default: undefined,\n    _protocol: undefined,\n    _unsaved: undefined\n  }\n  const defaultColsSchema = {\n    activeSchema: cols.activeSchema,\n    schemas: {\n      _default: cols.schemas._default,\n      _protocol: cols.schemas._protocol,\n      _unsaved: cols.schemas._unsaved\n    },\n    enum: cols.enum\n  }\n  return { customColsSchema, defaultColsSchema }\n}\nfunction getColsLS (LocalStorage, lsNamespace, name) {\n  let colsFromStorage = {}\n  if (lsNamespace) {\n    const lsPath = lsNamespace.split('.'),\n      lsItemName = lsPath.shift(),\n      lsRouteToItem = `${lsPath.join('.')}.${name}`,\n      appStorage = LocalStorage.getItem(lsItemName)\n    colsFromStorage = get(appStorage, lsRouteToItem, colsFromStorage)\n  } else {\n    colsFromStorage = LocalStorage.getItem(name) || colsFromStorage\n  }\n  return colsFromStorage\n}\n\nfunction setColsLS (LocalStorage, lsNamespace, name, active, cols) {\n  const colsFromStorage = getColsLS(LocalStorage, lsNamespace, name) || {}\n  const { customColsSchema, defaultColsSchema } = splitSchemas(cols)\n  colsFromStorage[active] = defaultColsSchema\n  colsFromStorage['custom-cols-schemas'] = { ...customColsSchema }\n  if (lsNamespace) {\n    const lsPath = lsNamespace.split('.'),\n      lsItemName = lsPath.shift(),\n      lsRouteToItem = `${lsPath.join('.')}.${name}`,\n      appStorage = LocalStorage.getItem(lsItemName) || {}\n    set(appStorage, lsRouteToItem, colsFromStorage)\n    LocalStorage.set(lsItemName, appStorage)\n  } else {\n    LocalStorage.set(name, colsFromStorage)\n  }\n}\n\nexport {\n  getColsLS,\n  setColsLS\n}\n","import _get from 'lodash/get'\nimport { getColsLS, setColsLS } from '../ls'\n\nconst defaultCols = ['timestamp', 'server.timestamp', 'ident', 'position.latitude', 'position.longitude', 'position.altitude', 'position.speed']\nexport default function ({ Vue, LocalStorage, errorHandler }) {\n  function getParams (state) {\n    const params = {}\n    if (state.limit) {\n      params.count = state.limit\n    }\n    if (state.filter) {\n      params.filter = `${state.filter}`\n    }\n    if (state.from) {\n      params.from = Math.floor(state.from / 1000)\n    }\n    if (state.to) {\n      params.to = Math.floor(state.to / 1000)\n    }\n    if (state.reverse) {\n      params.reverse = state.reverse\n    }\n    return params\n  }\n\n  function errorsCheck (data) {\n    if (data.errors) {\n      data.errors.forEach((error) => {\n        const errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    }\n  }\n\n  /* migration to new format storing cols 28.12.20 */\n  async function migrateCols (active, cols) {\n    const schema = {\n      activeSchema: '_default',\n      schemas: {\n        _default: {\n          name: '_default',\n          cols: cols.reduce((res, col) => {\n            if ((defaultCols.includes(col.name) || (!!col.__dest && col.display))) {\n              res.push({ name: col.name, width: col.width })\n            }\n            return res\n          }, [])\n        },\n        _protocol: {\n          name: '_protocol',\n          cols: cols.reduce((res, col) => {\n            if (!col.custom) {\n              res.push({ name: col.name, width: 150 })\n            }\n            return res\n          }, [])\n        }\n      },\n      enum: {}\n    }\n    if (cols.length) {\n      const processedSchemaByCols = cols.reduce((res, col) => {\n        const isColDefault = defaultCols.includes(col.name)\n        res.isDefault = res.isDefault && ((!col.display && !isColDefault) || (col.display && (isColDefault || !!col.__dest)))\n        res.isProtocol = res.isProtocol && !col.custom\n        if (col.display) {\n          res.schema.push({ name: col.name, width: col.width })\n        }\n        res.enum[col.name] = { ...col }\n        delete res.enum[col.name].display\n        delete res.enum[col.name].width\n        return res\n      }, {\n        schema: [],\n        enum: {},\n        isDefault: true,\n        isProtocol: true\n      })\n      if (!processedSchemaByCols.isDefault || !processedSchemaByCols.isProtocol) {\n        const channelResp = await Vue.connector.gw.getChannels(active, { fields: 'name' })\n        const channelData = channelResp.data\n        errorsCheck(channelData)\n        let name = _get(channelData, 'result[0].name', `Channel-${active}`)\n        name = `${name}[${active}]`\n        schema.activeSchema = name\n        schema.schemas[name] = {\n          name,\n          cols: processedSchemaByCols.schema\n        }\n      }\n      schema.enum = processedSchemaByCols.enum\n    }\n    return schema\n  }\n\n  function getDefaultColsSchema () {\n    return {\n      activeSchema: '_default',\n      schemas: {\n        _default: {\n          name: '_default',\n          cols: defaultCols.map(name => ({ name, width: 150 }))\n        }\n      },\n      enum: defaultCols.reduce((res, name) => {\n        res[name] = { name }\n        return res\n      }, {})\n    }\n  }\n\n  async function getCols ({ state, commit, rootState }, sysColsNeedInitFlags) {\n    commit('reqStart')\n    const needEtc = sysColsNeedInitFlags.etc\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const colsFromStorage = getColsLS(LocalStorage, state.lsNamespace, state.name)\n        let colsSchema = (colsFromStorage && colsFromStorage[state.active])\n          ? colsFromStorage[state.active] : getDefaultColsSchema()\n        const customColsSchemas = (colsFromStorage && colsFromStorage['custom-cols-schemas'])\n          ? colsFromStorage['custom-cols-schemas'] : {}\n        colsSchema.schemas = { ...colsSchema.schemas, ...customColsSchemas }\n        if (Array.isArray(colsSchema)) {\n          colsSchema = await migrateCols(state.active, colsSchema)\n          colsSchema.schemas = { ...colsSchema.schemas, ...customColsSchemas }\n          setColsLS(LocalStorage, state.lsNamespace, state.name, state.active, colsSchema)\n        }\n        const needMigration = !colsSchema.enum || (\n          _get(colsSchema.enum, 'timestamp.unit', undefined) === undefined\n        ) // type and unit adding 02.09.20\n\n        /* adding sys cols after migration. 12.11.20 */\n        if (_get(colsSchema.enum, 'action.__dest', undefined) === 'action') {\n          delete colsSchema.enum.action\n        }\n\n        if (needMigration) {\n          const protocolIdResp = await Vue.connector.gw.getChannels(state.active, { fields: 'protocol_id' })\n          const protocolIdData = protocolIdResp.data\n          errorsCheck(protocolIdData)\n          if (protocolIdData.result && protocolIdData.result.length && protocolIdData.result[0].protocol_id) {\n            const colsResp = await Vue.connector.gw.getChannelProtocols(protocolIdData.result[0].protocol_id, { fields: 'message_parameters' })\n            const colsData = colsResp.data\n            errorsCheck(colsData)\n            const messageParams = colsData.result[0].message_parameters\n            /* initing columns by message parameters */\n            colsSchema.schemas._protocol = {\n              name: '_protocol',\n              cols: []\n            }\n            messageParams.forEach((param) => {\n              const name = param.name\n              const enumCol = {\n                name,\n                type: param.type || '',\n                unit: param.unit || '',\n                description: param.info || ''\n              }\n              const schemaCol = {\n                name,\n                width: 150\n              }\n              if (name === 'timestamp') {\n                const locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n                enumCol.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n                enumCol.type = ''\n                enumCol.unit = ''\n                schemaCol.width = 190\n                colsSchema.schemas._protocol.cols.unshift(schemaCol)\n                colsSchema.enum.timestamp = enumCol\n                return\n              }\n              if (name === 'server.timestamp') {\n                enumCol.type = ''\n                enumCol.unit = ''\n                schemaCol.width = 190\n              }\n              colsSchema.schemas._protocol.cols.push(schemaCol)\n              colsSchema.enum[name] = enumCol\n            })\n          }\n          if (needEtc) {\n            colsSchema.schemas._protocol.cols.push({ name: 'etc', width: 150, __dest: 'etc' })\n            colsSchema.schemas._default.cols.push({ name: 'etc', width: 150, __dest: 'etc' })\n          }\n          colsSchema.enum.etc = { name: 'etc', __dest: 'etc' }\n        }\n        commit('setCols', colsSchema)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  function getFromTo (val) {\n    const now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86399999\n    return { from, to }\n  }\n\n  async function initTime ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const params = {\n          reverse: true,\n          count: 1\n        }\n        const resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        let date = Date.now()\n        if (data.result.length) {\n          date = Math.round(data.result[0]['server.timestamp'] * 1000)\n        }\n        const day = getFromTo(date)\n        commit('setFrom', day.from)\n        commit('setTo', day.to)\n        if (day.to < Date.now()) {\n          await newMessagesCheck({ state })\n        }\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function getMessages ({ state, commit, rootState }, params) {\n    commit('reqStart')\n    let result = []\n    if (rootState.token && state.active) {\n      const isLoadingActive = state.isLoading\n      try {\n        !isLoadingActive && Vue.set(state, 'isLoading', true)\n        const resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n        result = data.result || []\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n      }\n    }\n    return result\n  }\n\n  async function get ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      const start = Math.floor(Date.now() / 1000)\n      const params = getParams(state)\n      let messagesCount = 0\n      const messages = await getMessages({ state, commit, rootState }, params)\n      messagesCount += messages.length\n      const now = Math.floor(Date.now() / 1000)\n      const needRT = (params.to >= now && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        const stop = Math.floor(Date.now() / 1000)\n        const params = getParams(state)\n        params.from = start\n        params.to = stop\n        const missedMessages = await getMessages({ state, commit, rootState }, params)\n        messagesCount += missedMessages.length\n        messages.splice(messages.length, 0, ...missedMessages)\n      } else if ((params.to < now || (state.limit && messages.length >= state.limit)) && loopId) {\n        await unsubscribePooling({ state, commit, rootState })\n      }\n      commit('limiting', { type: 'init', count: messagesCount })\n      commit('setHistoryMessages', messages)\n      if (needRT || state.realtimeEnabled) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n    }\n  }\n\n  async function getPrevPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      const to = Math.floor(_get(state, 'messages[0][\"server.timestamp\"]', state.to) - 1)\n      const params = getParams(state)\n      params.to = to\n      params.reverse = true\n      if (loopId && state.messages.length > state.limit * 2) {\n        await unsubscribePooling({ state, commit, rootState })\n        commit('limiting', { type: 'rt_deinit' })\n      }\n      const messages = await getMessages({ state, commit, rootState }, params)\n      if (!messages.length) {\n        Vue.set(state, 'isLoading', false)\n        return 0\n      }\n      commit('limiting', { type: 'prev', count: messages.length })\n      commit('prependMessages', messages)\n      Vue.set(state, 'isLoading', false)\n      return messages.length\n    }\n  }\n\n  async function getNextPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      if (state.realtimeEnabled) { return }\n      Vue.set(state, 'isLoading', true)\n      const start = Date.now()\n      const from = Math.floor(_get(state, `messages[${state.messages.length - 1}]['server.timestamp']`, state.from) + 1)\n      const params = getParams(state)\n      let messagesCount = 0\n      params.from = from\n      const messages = await getMessages({ state, commit, rootState }, params)\n      messagesCount += messages.length\n      const needRT = (params.to > Math.floor(Date.now() / 1000) && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        const stop = Date.now()\n        const params = getParams(state)\n        params.from = Math.floor(start / 1000)\n        params.to = Math.floor(stop / 1000)\n        const missedMessages = await getMessages({ state, commit, rootState }, params)\n        messagesCount += missedMessages.length\n        messages.splice(messages.length, 0, ...missedMessages)\n      }\n      commit('limiting', { type: 'next', count: messagesCount })\n      commit('appendMessages', messages)\n      if (needRT) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n      return messagesCount\n    }\n  }\n\n  async function getHistory ({ state, commit, rootState }, count) {\n    const limit = state.limit\n    commit('clearMessages')\n    commit('setReverse', true)\n    commit('setLimit', count)\n    await get({ state, commit, rootState })\n    commit('setReverse', false)\n    commit('setLimit', limit)\n  }\n\n  let messagesBuffer = [],\n    loopId = 0\n  function initRenderLoop (state, commit) {\n    return setInterval(() => {\n      if (messagesBuffer.length) {\n        commit('setRTMessages', [...messagesBuffer])\n        messagesBuffer = []\n      }\n    }, 500)\n  }\n\n  async function pollingGet ({ state, commit, rootState }) {\n    await Vue.connector.subscribeMessagesChannels(state.active, '+', (message) => {\n      messagesBuffer.push(JSON.parse(message))\n    }, { rh: 2 })\n    state.realtimeEnabled = true\n    return () => {\n      loopId = initRenderLoop(state, commit)\n    }\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    if (loopId) {\n      clearInterval(loopId)\n      messagesBuffer = []\n      loopId = 0\n    }\n    await Vue.connector.unsubscribeMessagesChannels(state.active, '+')\n    state.realtimeEnabled = false\n  }\n\n  /* getting missed messages after offline */\n  async function getMissedMessages ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const lastIndexOffline = state.messages.reduceRight((result, value, index) => {\n          if (result) {\n            return result\n          }\n          if (value.__connectionStatus === 'offline') {\n            result = index\n          }\n          return result\n        }, 0)\n        const params = {\n          from: !lastIndexOffline ? 0 : Math.floor(state.messages[lastIndexOffline - 1]['server.timestamp']) + 1,\n          to: Math.floor(state.messages[lastIndexOffline + 1]['server.timestamp'])\n        }\n        const resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        commit('setMissingMessages', { data: data.result, index: lastIndexOffline })\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function newMessagesCheck ({ state }) {\n    state.hasNewMessages = false\n    await Vue.connector.subscribeMessagesChannels(state.active, '+', () => {\n      state.hasNewMessages = true\n      unsubscribePooling({ state })\n    }, { rh: 2 })\n  }\n\n  return {\n    getMessages,\n    get,\n    getPrevPage,\n    getNextPage,\n    pollingGet,\n    getCols,\n    getHistory,\n    initTime,\n    unsubscribePooling,\n    getMissedMessages\n  }\n}\n","import { setColsLS } from '../ls'\nexport default function ({ Vue, LocalStorage, filterHandler, newMessagesInterseptor }) {\n  let messagesKeyPointer = 0\n  function messagesIndexing (messages) {\n    if (!messages.length) { return }\n    messages.forEach((message, index) => {\n      messages[index]['x-flespi-message-key'] = messagesKeyPointer++\n    })\n  }\n  function setRTMessages (state, data) {\n    if (data && data.length) {\n      if (state.filter && filterHandler) {\n        data = filterHandler(state.filter, data)\n      }\n      messagesIndexing(data)\n      const messages = state.messages\n      if (state.sortBy) {\n        /* write by sorted field */\n        const message = data[0],\n          fieldName = state.sortBy,\n          length = state.messages.length - 1\n        let index = null,\n          escapeFlag = true\n        if (length > 0) {\n          for (let i = length; i !== 0 || escapeFlag; i--) {\n            if (messages[i][fieldName] > message[fieldName]) {\n              index = i\n              if (i === 0) {\n                escapeFlag = false\n              }\n            } else {\n              escapeFlag = false\n            }\n          }\n        }\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        if (index) {\n          messages.splice(index, 0, ...data)\n        } else {\n          messages.splice(messages.length, 0, ...data)\n        }\n      } else {\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        messages.splice(messages.length, 0, ...data)\n      }\n      limiting(state, { type: 'rt', count: data.length })\n    }\n  }\n\n  function prependMessages (state, data) {\n    if (data && data.length) {\n      data.reverse()\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(0, 0, ...data)\n    }\n  }\n\n  function appendMessages (state, data) {\n    if (data && data.length) {\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(messages.length, 0, ...data)\n    }\n  }\n\n  function setHistoryMessages (state, data) {\n    if (state.reverse) {\n      data.reverse()\n    }\n    messagesIndexing(data)\n    newMessagesInterseptor && newMessagesInterseptor(data)\n    state.messages = data\n  }\n\n  function clearMessages (state) {\n    state.messages.splice(0, state.messages.length)\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function limiting (state, { type, count }) {\n    if (!state.limit) { return false }\n    const messages = state.messages\n    const pages = state.pages\n    switch (type) {\n      case 'init': {\n        state.pages = count ? [count] : []\n        break\n      }\n      case 'prev': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[2]\n          state.pages = [count, ...pages.slice(0, -1)]\n          messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        } else {\n          state.pages = [count, ...pages]\n        }\n        break\n      }\n      case 'next': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[0]\n          state.pages = [...pages.slice(1, 3), count]\n          messages.splice(0, removeMessagesCount)\n        } else if (pagesCount < 3) {\n          pages.push(count)\n        }\n        break\n      }\n      case 'rt_init': {\n        pages.push(0)\n        break\n      }\n      case 'rt_deinit': {\n        const removeMessagesCount = pages.pop()\n        messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        break\n      }\n      case 'rt': {\n        const pagesCount = pages.length\n        const rtCount = pages[pagesCount - 1] || 0\n        if (rtCount + count > state.limit) {\n          if (pagesCount > 3) {\n            const removeMessagesCount = pages[0]\n            state.pages = [...pages.slice(1, -1), rtCount + count, 0]\n            messages.splice(0, removeMessagesCount)\n          } else {\n            state.pages = [...pages.slice(0, -1), rtCount + count, 0]\n          }\n        } else {\n          state.pages[pagesCount - 1] = rtCount + count\n        }\n      }\n    }\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      Vue.set(state, 'filter', value)\n    }\n  }\n\n  function setFrom (state, from) {\n    Vue.set(state, 'from', from)\n  }\n\n  function setTo (state, to) {\n    Vue.set(state, 'to', to)\n  }\n\n  function reqStart () {\n    if (DEV) {\n      console.log('Start Request Channels messages')\n    }\n  }\n\n  function setActive (state, id) {\n    Vue.set(state, 'active', id)\n  }\n\n  function setReverse (state, val) {\n    Vue.set(state, 'reverse', val)\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.from = 0\n    state.to = 0\n    state.limit = 1000\n    state.reverse = false\n    await Vue.connector.unsubscribeMessagesChannels(state.active)\n  }\n\n  function setCols (state, cols) {\n    setColsLS(LocalStorage, state.lsNamespace, state.name, state.active, cols)\n    Vue.set(state, 'cols', cols)\n  }\n\n  function setSettings (state, channel) {\n    Vue.set(state, 'settings', channel)\n  }\n\n  const updateCols = setCols\n\n  function setOffline (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      state.messages.push({ __connectionStatus: 'offline', timestamp: Date.now() / 1000 })\n    }\n    state.offline = true\n  }\n\n  function setReconnected (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      state.messages.push({ __connectionStatus: 'reconnected', timestamp: Date.now() / 1000 })\n    }\n    state.offline = false\n  }\n\n  function setMissingMessages (state, { data, index }) {\n    data.forEach((val) => {\n      val['x-flespi-status'] = 'missed'\n    })\n    state.messages.splice(index + 1, 0, ...data)\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setSortBy (state, field) {\n    Vue.set(state, 'sortBy', field)\n  }\n\n  function clearSortBy (state) {\n    Vue.set(state, 'sortBy', null)\n  }\n\n  return {\n    setOffline,\n    setReconnected,\n    setHistoryMessages,\n    setRTMessages,\n    setMissingMessages,\n    prependMessages,\n    appendMessages,\n    clearMessages,\n    setLimit,\n    limiting,\n    setFilter,\n    setFrom,\n    setTo,\n    reqStart,\n    setReverse,\n    clear,\n    setActive,\n    setCols,\n    updateCols,\n    setSelected,\n    clearSelected,\n    setSortBy,\n    clearSortBy,\n    setSettings\n  }\n}\n","import getActions from './actions'\nimport getMutations from './mutations'\nimport get from 'lodash/get'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, filterHandler, newMessagesInterseptor }) {\n  const lsNamespace = get(name, 'lsNamespace', undefined)\n  name = get(name, 'name', name)\n  const actions = getActions({ Vue, LocalStorage, errorHandler }),\n    mutations = getMutations({ Vue, LocalStorage, filterHandler, newMessagesInterseptor })\n\n  const state = {\n    name,\n    lsNamespace,\n    isLoading: false,\n    active: 0,\n    messages: [],\n    pages: [],\n    filter: '',\n    settings: {},\n    realtimeEnabled: false,\n    from: 0,\n    to: 0,\n    limit: 1000,\n    reverse: false,\n    cols: undefined,\n    offline: false,\n    selected: [],\n    sortBy: null,\n    hasNewMessages: null\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n"],"names":["obj","key","value","_Object$defineProperty","enumerable","configurable","writable","arr","len","length","i","arr2","Array","_Array$isArray","arrayLikeToArray","iter","_Symbol","_isIterable","Object","_Array$from","o","minLen","n","prototype","toString","call","slice","constructor","name","test","TypeError","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","error","done","_Promise","then","fn","self","this","args","arguments","apply","err","undefined","getColsLS","LocalStorage","lsNamespace","colsFromStorage","lsPath","split","lsItemName","shift","lsRouteToItem","join","appStorage","getItem","get","setColsLS","active","cols","customColsSchema","schemas","_default","_protocol","_unsaved","defaultColsSchema","activeSchema","enum","set","defaultCols","Vue","errorHandler","getParams","state","params","limit","count","filter","from","Math","floor","to","reverse","errorsCheck","data","errors","forEach","errObject","Error","reason","migrateCols","schema","reduce","res","col","includes","__dest","display","push","width","custom","processedSchemaByCols","isColDefault","isDefault","isProtocol","connector","gw","getChannels","fields","channelResp","channelData","_get","sysColsNeedInitFlags","commit","rootState","needEtc","etc","token","colsSchema","map","customColsSchemas","isArray","needMigration","action","protocolIdResp","protocolIdData","result","protocol_id","getChannelProtocols","colsResp","colsData","messageParams","message_parameters","param","enumCol","type","unit","description","schemaCol","locale","Date","match","addition","unshift","timestamp","DEV","console","log","getChannelsMessages","JSON","stringify","resp","date","now","round","setHours","day","newMessagesCheck","getMessages","isLoadingActive","isLoading","start","messagesCount","messages","needRT","loopId","startRTRender","pollingGet","stop","missedMessages","splice","unsubscribePooling","realtimeEnabled","messagesBuffer","subscribeMessagesChannels","message","parse","rh","setInterval","clearInterval","unsubscribeMessagesChannels","lastIndexOffline","reduceRight","index","__connectionStatus","hasNewMessages","getPrevPage","getNextPage","getCols","getHistory","initTime","getMissedMessages","filterHandler","newMessagesInterseptor","messagesKeyPointer","messagesIndexing","clearMessages","clearSelected","limiting","pages","removeMessagesCount","pagesCount","pop","rtCount","setCols","setOffline","needPostOfflineMessage","offline","setReconnected","setHistoryMessages","setRTMessages","sortBy","fieldName","escapeFlag","setMissingMessages","val","prependMessages","appendMessages","setLimit","setFilter","setFrom","setTo","reqStart","setReverse","clear","setActive","id","updateCols","setSelected","indexes","setSortBy","field","clearSortBy","setSettings","channel","namespaced","settings","selected","actions","getActions","mutations","getMutations"],"mappings":"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"}