{"version":3,"file":"channelsMessagesSerial.js","sources":["../node_modules/@babel/runtime-corejs2/core-js/array/is-array.js","../node_modules/@babel/runtime-corejs2/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime-corejs2/core-js/array/from.js","../node_modules/@babel/runtime-corejs2/core-js/is-iterable.js","../node_modules/@babel/runtime-corejs2/helpers/iterableToArray.js","../node_modules/@babel/runtime-corejs2/helpers/nonIterableSpread.js","../node_modules/@babel/runtime-corejs2/helpers/toConsumableArray.js","../node_modules/@babel/runtime-corejs2/core-js/promise.js","../node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator.js","../src/store/modules/channelsMessagesSerial/actions.js","../src/store/modules/channelsMessagesSerial/mutations.js","../src/store/modules/channelsMessagesSerial/index.js"],"sourcesContent":["module.exports = require(\"core-js/library/fn/array/is-array\");","var _Array$isArray = require(\"../core-js/array/is-array\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (_Array$isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","module.exports = require(\"core-js/library/fn/array/from\");","module.exports = require(\"core-js/library/fn/is-iterable\");","var _Array$from = require(\"../core-js/array/from\");\n\nvar _isIterable = require(\"../core-js/is-iterable\");\n\nfunction _iterableToArray(iter) {\n  if (_isIterable(Object(iter)) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return _Array$from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","module.exports = require(\"core-js/library/fn/promise\");","var _Promise = require(\"../core-js/promise\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    _Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new _Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","import _get from 'lodash/get'\n\nexport default function ({ Vue, LocalStorage, errorHandler }) {\n  function getParams (state) {\n    const params = {}\n    if (state.limit) {\n      params.count = state.limit\n    }\n    if (state.filter) {\n      params.filter = `${state.filter}`\n    }\n    if (state.from) {\n      params.from = Math.floor(state.from / 1000)\n    }\n    if (state.to) {\n      params.to = Math.floor(state.to / 1000)\n    }\n    if (state.reverse) {\n      params.reverse = state.reverse\n    }\n    return params\n  }\n\n  function errorsCheck (data) {\n    if (data.errors) {\n      data.errors.forEach((error) => {\n        const errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    }\n  }\n\n  function getColsFromLS (state) {\n    let colsFromStorage = {}\n    if (state.lsNamespace) {\n      /* removing old store 12.03.20 */\n      const oldStore = LocalStorage.getItem(state.name)\n      if (oldStore) {\n        colsFromStorage = oldStore\n        LocalStorage.remove(state.name)\n      }\n      const lsPath = state.lsNamespace.split('.'),\n        lsItemName = lsPath.shift(),\n        lsRouteToItem = `${lsPath.join('.')}.${state.name}`,\n        appStorage = LocalStorage.getItem(lsItemName)\n      colsFromStorage = _get(appStorage, lsRouteToItem, colsFromStorage)\n    } else {\n      colsFromStorage = LocalStorage.getItem(state.name) || colsFromStorage\n    }\n    return colsFromStorage\n  }\n\n  async function getCols ({ state, commit, rootState }, sysColsNeedInitFlags) {\n    commit('reqStart')\n    const needActions = sysColsNeedInitFlags.actions\n    const needEtc = sysColsNeedInitFlags.etc\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let cols = []\n        const colsFromStorage = getColsFromLS(state)\n        if (colsFromStorage && colsFromStorage[state.active] && colsFromStorage[state.active]) {\n          /* remove after sometime 12.07.19 */\n          colsFromStorage[state.active].forEach((col) => {\n            if (col.name === 'timestamp') {\n              const locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n              col.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n            }\n          })\n          cols = colsFromStorage[state.active]\n          /* adding sys cols after migration. 30.01.20 */\n          if (!cols[0].__dest && !cols[cols.length - 1].__dest) {\n            cols.unshift({ name: 'actions', width: 50, display: needActions, __dest: 'action' })\n            cols.push({ name: 'etc', width: 150, display: needEtc, __dest: 'etc' })\n          }\n        } else {\n          const protocolIdResp = await Vue.connector.gw.getChannels(state.active, { fields: 'protocol_id' })\n          const protocolIdData = protocolIdResp.data\n          errorsCheck(protocolIdData)\n          if (protocolIdData.result && protocolIdData.result.length && protocolIdData.result[0].protocol_id) {\n            const colsResp = await Vue.connector.gw.getProtocols(protocolIdData.result[0].protocol_id, { fields: 'message_parameters' })\n            const colsData = colsResp.data\n            errorsCheck(colsData)\n            colsData.result[0].message_parameters.forEach(col => {\n              const colItem = {\n                name: col.name,\n                width: 160,\n                display: state.defaultColsNames.includes(col.name),\n                description: col.info\n              }\n              if (colItem.name === 'timestamp') {\n                const locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n                colItem.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n              }\n              cols.push(colItem)\n            })\n          }\n          cols.unshift({ name: 'actions', width: 50, display: needActions, __dest: 'action' })\n          cols.push({ name: 'etc', width: 150, display: needEtc, __dest: 'etc' })\n        }\n        commit('setCols', cols)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  function getFromTo (val) {\n    const now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86399999\n    return { from, to }\n  }\n\n  async function initTime ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const params = {\n          reverse: true,\n          count: 1\n        }\n        const resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        let date = Date.now()\n        if (data.result.length) {\n          date = Math.round(data.result[0]['server.timestamp'] * 1000)\n        }\n        const day = getFromTo(date)\n        commit('setFrom', day.from)\n        commit('setTo', day.to)\n        if (day.to < Date.now()) {\n          await newMessagesCheck({ state })\n        }\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function getMessages ({ state, commit, rootState }, params) {\n    commit('reqStart')\n    let result = []\n    if (rootState.token && state.active) {\n      const isLoadingActive = state.isLoading\n      try {\n        !isLoadingActive && Vue.set(state, 'isLoading', true)\n        const resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n        result = data.result || []\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n      }\n    }\n    return result\n  }\n\n  async function get ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      const start = Math.floor(Date.now() / 1000)\n      const params = getParams(state)\n      let messagesCount = 0\n      const messages = await getMessages({ state, commit, rootState }, params)\n      messagesCount += messages.length\n      const now = Math.floor(Date.now() / 1000)\n      const needRT = (params.to >= now && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        const stop = Math.floor(Date.now() / 1000)\n        const params = getParams(state)\n        params.from = start\n        params.to = stop\n        const missedMessages = await getMessages({ state, commit, rootState }, params)\n        messagesCount += missedMessages.length\n        messages.splice(messages.length, 0, ...missedMessages)\n      } else if ((params.to < now || (state.limit && messages.length >= state.limit)) && loopId) {\n        await unsubscribePooling({ state, commit, rootState })\n      }\n      commit('limiting', { type: 'init', count: messagesCount })\n      commit('setHistoryMessages', messages)\n      if (needRT || state.realtimeEnabled) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n    }\n  }\n\n  async function getPrevPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      const to = Math.floor(_get(state, 'messages[0][\"server.timestamp\"]', state.to) - 1)\n      const params = getParams(state)\n      params.to = to\n      params.reverse = true\n      if (loopId && state.messages.length > state.limit * 2) {\n        await unsubscribePooling({ state, commit, rootState })\n        commit('limiting', { type: 'rt_deinit' })\n      }\n      const messages = await getMessages({ state, commit, rootState }, params)\n      if (!messages.length) {\n        Vue.set(state, 'isLoading', false)\n        return 0\n      }\n      commit('limiting', { type: 'prev', count: messages.length })\n      commit('prependMessages', messages)\n      Vue.set(state, 'isLoading', false)\n      return messages.length\n    }\n  }\n\n  async function getNextPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      if (state.realtimeEnabled) { return }\n      Vue.set(state, 'isLoading', true)\n      const start = Date.now()\n      const from = Math.floor(_get(state, `messages[${state.messages.length - 1}]['server.timestamp']`, state.from) + 1)\n      const params = getParams(state)\n      let messagesCount = 0\n      params.from = from\n      const messages = await getMessages({ state, commit, rootState }, params)\n      messagesCount += messages.length\n      const needRT = (params.to > Math.floor(Date.now() / 1000) && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        const stop = Date.now()\n        const params = getParams(state)\n        params.from = Math.floor(start / 1000)\n        params.to = Math.floor(stop / 1000)\n        const missedMessages = await getMessages({ state, commit, rootState }, params)\n        messagesCount += missedMessages.length\n        messages.splice(messages.length, 0, ...missedMessages)\n      }\n      commit('limiting', { type: 'next', count: messagesCount })\n      commit('appendMessages', messages)\n      if (needRT) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n      return messagesCount\n    }\n  }\n\n  async function getHistory ({ state, commit, rootState }, count) {\n    const limit = state.limit\n    commit('clearMessages')\n    commit('setReverse', true)\n    commit('setLimit', count)\n    await get({ state, commit, rootState })\n    commit('setReverse', false)\n    commit('setLimit', limit)\n  }\n\n  let messagesBuffer = [],\n    loopId = 0\n  function initRenderLoop (state, commit) {\n    return setInterval(() => {\n      if (messagesBuffer.length) {\n        commit('setRTMessages', [...messagesBuffer])\n        messagesBuffer = []\n      }\n    }, 500)\n  }\n\n  async function pollingGet ({ state, commit, rootState }) {\n    await Vue.connector.subscribeMessagesChannels(state.active, '+', (message) => {\n      messagesBuffer.push(JSON.parse(message))\n    }, { rh: 2 })\n    state.realtimeEnabled = true\n    return () => {\n      loopId = initRenderLoop(state, commit)\n    }\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    if (loopId) {\n      clearInterval(loopId)\n      messagesBuffer = []\n      loopId = 0\n    }\n    await Vue.connector.unsubscribeMessagesChannels(state.active, '+')\n    state.realtimeEnabled = false\n  }\n\n  /* getting missed messages after offline */\n  async function getMissedMessages ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const lastIndexOffline = state.messages.reduceRight((result, value, index) => {\n          if (result) {\n            return result\n          }\n          if (value.__connectionStatus === 'offline') {\n            result = index\n          }\n          return result\n        }, 0)\n        const params = {\n          from: !lastIndexOffline ? 0 : Math.floor(state.messages[lastIndexOffline - 1]['server.timestamp']) + 1,\n          to: Math.floor(state.messages[lastIndexOffline + 1]['server.timestamp'])\n        }\n        const resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        commit('setMissingMessages', { data: data.result, index: lastIndexOffline })\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function newMessagesCheck ({ state }) {\n    state.hasNewMessages = false\n    await Vue.connector.subscribeMessagesChannels(state.active, '+', () => {\n      state.hasNewMessages = true\n      unsubscribePooling({ state })\n    }, { rh: 2 })\n  }\n\n  return {\n    getMessages,\n    get,\n    getPrevPage,\n    getNextPage,\n    pollingGet,\n    getCols,\n    getHistory,\n    initTime,\n    unsubscribePooling,\n    getMissedMessages\n  }\n}\n","import get from 'lodash/get'\nimport set from 'lodash/set'\nexport default function ({ Vue, LocalStorage, filterHandler, newMessagesInterseptor }) {\n  let messagesKeyPointer = 0\n  function messagesIndexing (messages) {\n    if (!messages.length) { return }\n    messages.forEach((message, index) => {\n      messages[index]['x-flespi-message-key'] = messagesKeyPointer++\n    })\n  }\n  function setRTMessages (state, data) {\n    if (data && data.length) {\n      if (state.filter && filterHandler) {\n        data = filterHandler(state.filter, data)\n      }\n      messagesIndexing(data)\n      const messages = state.messages\n      if (state.sortBy) {\n        /* write by sorted field */\n        const message = data[0],\n          fieldName = state.sortBy,\n          length = state.messages.length - 1\n        let index = null,\n          escapeFlag = true\n        if (length > 0) {\n          for (let i = length; i !== 0 || escapeFlag; i--) {\n            if (messages[i][fieldName] > message[fieldName]) {\n              index = i\n              if (i === 0) {\n                escapeFlag = false\n              }\n            } else {\n              escapeFlag = false\n            }\n          }\n        }\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        if (index) {\n          messages.splice(index, 0, ...data)\n        } else {\n          messages.splice(messages.length, 0, ...data)\n        }\n      } else {\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        messages.splice(messages.length, 0, ...data)\n      }\n      limiting(state, { type: 'rt', count: data.length })\n    }\n  }\n\n  function prependMessages (state, data) {\n    if (data && data.length) {\n      data.reverse()\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(0, 0, ...data)\n    }\n  }\n\n  function appendMessages (state, data) {\n    if (data && data.length) {\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(messages.length, 0, ...data)\n    }\n  }\n\n  function setHistoryMessages (state, data) {\n    if (state.reverse) {\n      data.reverse()\n    }\n    messagesIndexing(data)\n    newMessagesInterseptor && newMessagesInterseptor(data)\n    state.messages = data\n  }\n\n  function clearMessages (state) {\n    state.messages.splice(0, state.messages.length)\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function limiting (state, { type, count }) {\n    if (!state.limit) { return false }\n    const messages = state.messages\n    const pages = state.pages\n    switch (type) {\n      case 'init': {\n        state.pages = count ? [count] : []\n        break\n      }\n      case 'prev': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[2]\n          state.pages = [count, ...pages.slice(0, -1)]\n          messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        } else {\n          state.pages = [count, ...pages]\n        }\n        break\n      }\n      case 'next': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[0]\n          state.pages = [...pages.slice(1, 3), count]\n          messages.splice(0, removeMessagesCount)\n        } else if (pagesCount < 3) {\n          pages.push(count)\n        }\n        break\n      }\n      case 'rt_init': {\n        pages.push(0)\n        break\n      }\n      case 'rt_deinit': {\n        const removeMessagesCount = pages.pop()\n        messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        break\n      }\n      case 'rt': {\n        const pagesCount = pages.length\n        const rtCount = pages[pagesCount - 1] || 0\n        if (rtCount + count > state.limit) {\n          if (pagesCount > 3) {\n            const removeMessagesCount = pages[0]\n            state.pages = [...pages.slice(1, -1), rtCount + count, 0]\n            messages.splice(0, removeMessagesCount)\n          } else {\n            state.pages = [...pages.slice(0, -1), rtCount + count, 0]\n          }\n        } else {\n          state.pages[pagesCount - 1] = rtCount + count\n        }\n      }\n    }\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      Vue.set(state, 'filter', value)\n    }\n  }\n\n  function setFrom (state, from) {\n    Vue.set(state, 'from', from)\n  }\n\n  function setTo (state, to) {\n    Vue.set(state, 'to', to)\n  }\n\n  function reqStart () {\n    if (DEV) {\n      console.log('Start Request Channels messages')\n    }\n  }\n\n  function setActive (state, id) {\n    Vue.set(state, 'active', id)\n  }\n\n  function setReverse (state, val) {\n    Vue.set(state, 'reverse', val)\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.from = 0\n    state.to = 0\n    state.limit = 1000\n    state.reverse = false\n    await Vue.connector.unsubscribeMessagesChannels(state.active)\n  }\n\n  function getColsFromLS (state) {\n    let colsFromStorage = {}\n    if (state.lsNamespace) {\n      const lsPath = state.lsNamespace.split('.'),\n        lsItemName = lsPath.shift(),\n        lsRouteToItem = `${lsPath.join('.')}.${state.name}`,\n        appStorage = LocalStorage.getItem(lsItemName)\n      colsFromStorage = get(appStorage, lsRouteToItem, colsFromStorage)\n    } else {\n      colsFromStorage = LocalStorage.getItem(state.name) || colsFromStorage\n    }\n    return colsFromStorage\n  }\n\n  function setColsToLS (state, cols) {\n    const colsFromStorage = getColsFromLS(state)\n    colsFromStorage[state.active] = cols\n    if (state.lsNamespace) {\n      const lsPath = state.lsNamespace.split('.'),\n        lsItemName = lsPath.shift(),\n        lsRouteToItem = `${lsPath.join('.')}.${state.name}`,\n        appStorage = LocalStorage.getItem(lsItemName)\n      set(appStorage, lsRouteToItem, colsFromStorage)\n      LocalStorage.set(lsItemName, appStorage)\n    } else {\n      LocalStorage.set(state.name, colsFromStorage)\n    }\n  }\n\n  function setCols (state, cols) {\n    setColsToLS(state, cols)\n    Vue.set(state, 'cols', cols)\n  }\n\n  function setDefaultCols (state) {\n    state.cols.forEach((col, index) => {\n      if (col.__dest) { return }\n      if (state.defaultColsNames.includes(col.name)) {\n        Vue.set(state.cols[index], 'display', true)\n      } else {\n        Vue.set(state.cols[index], 'display', false)\n      }\n    })\n    updateCols(state, state.cols)\n  }\n\n  function setSettings (state, channel) {\n    Vue.set(state, 'settings', channel)\n  }\n\n  const updateCols = setCols\n\n  function setOffline (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      state.messages.push({ __connectionStatus: 'offline', timestamp: Date.now() / 1000 })\n    }\n    state.offline = true\n  }\n\n  function setReconnected (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      state.messages.push({ __connectionStatus: 'reconnected', timestamp: Date.now() / 1000 })\n    }\n    state.offline = false\n  }\n\n  function setMissingMessages (state, { data, index }) {\n    data.forEach((val) => {\n      val['x-flespi-status'] = 'missed'\n    })\n    state.messages.splice(index + 1, 0, ...data)\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setSortBy (state, field) {\n    Vue.set(state, 'sortBy', field)\n  }\n\n  function clearSortBy (state) {\n    Vue.set(state, 'sortBy', null)\n  }\n\n  return {\n    setOffline,\n    setReconnected,\n    setHistoryMessages,\n    setRTMessages,\n    setMissingMessages,\n    prependMessages,\n    appendMessages,\n    clearMessages,\n    setLimit,\n    limiting,\n    setFilter,\n    setFrom,\n    setTo,\n    reqStart,\n    setReverse,\n    clear,\n    setActive,\n    setCols,\n    updateCols,\n    setDefaultCols,\n    setSelected,\n    clearSelected,\n    setSortBy,\n    clearSortBy,\n    setSettings\n  }\n}\n","import getActions from './actions'\nimport getMutations from './mutations'\nimport get from 'lodash/get'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, filterHandler, newMessagesInterseptor }) {\n  const lsNamespace = get(name, 'lsNamespace', undefined)\n  name = get(name, 'name', name)\n  const actions = getActions({ Vue, LocalStorage, errorHandler }),\n    mutations = getMutations({ Vue, LocalStorage, filterHandler, newMessagesInterseptor })\n\n  const state = {\n    name,\n    lsNamespace,\n    isLoading: false,\n    active: 0,\n    messages: [],\n    pages: [],\n    filter: '',\n    settings: {},\n    realtimeEnabled: false,\n    from: 0,\n    to: 0,\n    limit: 1000,\n    reverse: false,\n    cols: [],\n    defaultColsNames: ['timestamp', 'server.timestamp', 'ident', 'position.latitude', 'position.longitude', 'position.altitude', 'position.speed'],\n    offline: false,\n    selected: [],\n    sortBy: null,\n    hasNewMessages: null\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n"],"names":["require$$0","arr","_Array$isArray","i","arr2","Array","length","iter","_isIterable","Object","prototype","toString","call","_Array$from","TypeError","arrayWithoutHoles","iterableToArray","nonIterableSpread","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","_Promise","then","fn","self","this","args","arguments","apply","err","undefined","Vue","LocalStorage","errorHandler","getParams","state","params","limit","count","filter","from","Math","floor","to","reverse","errorsCheck","data","errors","forEach","errObject","Error","reason","getColsFromLS","colsFromStorage","lsNamespace","oldStore","getItem","name","remove","lsPath","split","lsItemName","shift","lsRouteToItem","join","appStorage","_get","sysColsNeedInitFlags","commit","rootState","needActions","actions","needEtc","etc","token","active","set","cols","col","locale","Date","match","addition","slice","__dest","unshift","width","display","push","connector","gw","getChannels","fields","protocolIdResp","protocolIdData","result","protocol_id","getProtocols","colsResp","colsData","message_parameters","colItem","defaultColsNames","includes","description","DEV","console","log","getChannelsMessages","JSON","stringify","resp","date","now","round","setHours","day","newMessagesCheck","getMessages","isLoadingActive","isLoading","get","start","messagesCount","messages","needRT","loopId","startRTRender","pollingGet","stop","missedMessages","splice","unsubscribePooling","type","realtimeEnabled","messagesBuffer","subscribeMessagesChannels","message","parse","rh","setInterval","clearInterval","unsubscribeMessagesChannels","lastIndexOffline","reduceRight","index","__connectionStatus","hasNewMessages","getPrevPage","getNextPage","getCols","getHistory","initTime","getMissedMessages","filterHandler","newMessagesInterseptor","messagesKeyPointer","messagesIndexing","clearMessages","clearSelected","limiting","pages","removeMessagesCount","pagesCount","pop","rtCount","setColsToLS","setCols","updateCols","setOffline","needPostOfflineMessage","timestamp","offline","setReconnected","setHistoryMessages","setRTMessages","sortBy","fieldName","escapeFlag","setMissingMessages","val","prependMessages","appendMessages","setLimit","setFilter","setFrom","setTo","reqStart","setReverse","clear","setActive","id","setDefaultCols","setSelected","indexes","setSortBy","field","clearSortBy","setSettings","channel","namespaced","settings","selected","getActions","mutations","getMutations"],"mappings":"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"}