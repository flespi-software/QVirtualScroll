{"version":3,"file":"channelsMessagesSerial.js","sources":["../node_modules/@babel/runtime-corejs2/core-js/array/is-array.js","../node_modules/@babel/runtime-corejs2/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime-corejs2/core-js/array/from.js","../node_modules/@babel/runtime-corejs2/core-js/is-iterable.js","../node_modules/@babel/runtime-corejs2/helpers/iterableToArray.js","../node_modules/@babel/runtime-corejs2/helpers/nonIterableSpread.js","../node_modules/@babel/runtime-corejs2/helpers/toConsumableArray.js","../node_modules/@babel/runtime-corejs2/core-js/promise.js","../node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator.js","../src/store/modules/channelsMessagesSerial/actions.js","../src/store/modules/channelsMessagesSerial/mutations.js","../src/store/modules/channelsMessagesSerial/index.js"],"sourcesContent":["module.exports = require(\"core-js/library/fn/array/is-array\");","var _Array$isArray = require(\"../core-js/array/is-array\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (_Array$isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","module.exports = require(\"core-js/library/fn/array/from\");","module.exports = require(\"core-js/library/fn/is-iterable\");","var _Array$from = require(\"../core-js/array/from\");\n\nvar _isIterable = require(\"../core-js/is-iterable\");\n\nfunction _iterableToArray(iter) {\n  if (_isIterable(Object(iter)) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return _Array$from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","module.exports = require(\"core-js/library/fn/promise\");","var _Promise = require(\"../core-js/promise\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    _Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new _Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","export default function ({ Vue, LocalStorage, errorHandler }) {\n  function getParams (state) {\n    let params = {}\n    if (state.limit) {\n      params.count = state.limit\n    }\n    if (state.filter && state.sysFilter) {\n      if (state.mode === 1) {\n        params.filter = `${state.sysFilter}`\n      } else {\n        params.filter = `${state.sysFilter},${state.filter}`\n      }\n    } else if (state.sysFilter && !state.filter) {\n      params.filter = `${state.sysFilter}`\n    } else if (!state.sysFilter && state.filter) {\n      if (state.mode === 0) {\n        params.filter = `${state.filter}`\n      }\n    }\n    if (state.from && (!state.reverse || state.mode === 1)) {\n      if (!state.reverse) {\n        params.from = Math.floor(state.from / 1000)\n      }\n    }\n    if (state.to) {\n      if (state.mode === 1) {\n        state.to = Date.now()\n      }\n      params.to = Math.floor(state.to / 1000)\n    }\n    if (state.reverse) {\n      params.reverse = state.reverse\n    }\n    return params\n  }\n\n  function errorsCheck (data) {\n    if (data.errors) {\n      data.errors.forEach((error) => {\n        let errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    }\n  }\n\n  async function getCols ({ state, commit, rootState }) {\n    commit('reqStart')\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let cols = [],\n          colsFromStorage = LocalStorage.getItem(state.name)\n        if (colsFromStorage && colsFromStorage[state.active] && colsFromStorage[state.active]) {\n          /* remove after sometime 12.07.19 */\n          colsFromStorage[state.active].forEach((col) => {\n            if (col.name === 'timestamp') {\n              let locale = new Date().toString().match(/([-\\+][0-9]+)\\s/)[1]\n              col.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n            }\n          })\n          cols = colsFromStorage[state.active]\n        } else {\n          let protocolIdResp = await Vue.connector.gw.getChannels(state.active, { fields: 'protocol_id' })\n          let protocolIdData = protocolIdResp.data\n          errorsCheck(protocolIdData)\n          if (protocolIdData.result && protocolIdData.result.length && protocolIdData.result[0].protocol_id) {\n            let colsResp = await Vue.connector.gw.getProtocols(protocolIdData.result[0].protocol_id, { fields: 'message_parameters' })\n            let colsData = colsResp.data\n            errorsCheck(colsData)\n            colsData.result[0].message_parameters.forEach(col => {\n              let colItem = {\n                name: col.name,\n                width: 160,\n                display: true,\n                description: col.info\n              }\n              if (colItem.name === 'timestamp') {\n                let locale = new Date().toString().match(/([-\\+][0-9]+)\\s/)[1]\n                colItem.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n              }\n              cols.push(colItem)\n            })\n          }\n        }\n        commit('setCols', cols)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  function getFromTo (val) {\n    let now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86400000\n    return { from, to }\n  }\n\n  async function initTime ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let params = {\n          reverse: true,\n          count: 1\n        }\n        let resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        let data = resp.data\n        errorsCheck(data)\n        let date = Date.now()\n        if (data.result.length) {\n          date = Math.round(data.result[0].timestamp * 1000)\n        }\n        commit('setDate', getFromTo(date).from)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function get ({ state, commit, rootState }, preaction) {\n    commit('reqStart')\n    if (preaction) {\n      let { name: preactionName, payload: preactionPayload } = preaction\n      commit('clearMessages')\n      commit(preactionName, preactionPayload)\n    }\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let currentMode = JSON.parse(JSON.stringify(state.mode))\n        let resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(getParams(state)) })\n        /* if mode changed in time request */\n        if (currentMode !== state.mode) { return false }\n        let data = resp.data\n        errorsCheck(data)\n        if (preaction) {\n          if (data.result.length) {\n            commit('setMessages', data.result)\n            commit('postaction')\n          } else {\n            commit('postaction')\n            switch (preaction.name) { // logic for empty response after pagination scroll\n              case 'paginationPrev': {\n                commit('datePrev')\n                commit('paginationPrev')\n                await get({ state, commit, rootState })\n                commit('postaction')\n                break\n              }\n              case 'paginationNext': {\n                get({ state, commit, rootState }, { name: 'dateNext' })\n                commit('postaction')\n                break\n              }\n              default: {\n                commit('setMessages', data.result)\n                commit('postaction')\n              }\n            }\n          }\n        } else {\n          commit('setMessages', data.result)\n        }\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function getHistory ({ state, commit, rootState }, count) {\n    let limit = state.limit,\n      filter = state.filter\n    commit('setReverse', true)\n    commit('setLimit', count)\n    commit('setFilter', '')\n    await get({ state, commit, rootState })\n    commit('setReverse', false)\n    commit('setLimit', limit)\n    commit('setFilter', filter)\n  }\n\n  let messagesBuffer = [],\n    loopId = 0\n  function initRenderLoop (state, commit) {\n    return setInterval(() => {\n      if (messagesBuffer.length) {\n        if (state.mode === 1) {\n          commit('setMessages', [...messagesBuffer])\n        }\n        messagesBuffer = []\n      }\n    }, 500)\n  }\n\n  async function pollingGet ({ state, commit, rootState }) {\n    loopId = initRenderLoop(state, commit)\n    await Vue.connector.subscribeMessagesChannels(state.active, '+', (message) => {\n      if (state.mode === 1) {\n        messagesBuffer.push(JSON.parse(message))\n      } else {\n        commit('setNewMessagesCount', state.newMessagesCount + 1)\n      }\n    }, { rh: 2 })\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    if (loopId) { clearInterval(loopId) }\n    await Vue.connector.unsubscribeMessagesChannels(state.active, '+')\n  }\n\n  /* getting missed messages after offline */\n  async function getMissedMessages ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let lastIndexOffline = state.messages.reduceRight((result, value, index) => {\n          if (result) {\n            return result\n          }\n          if (value.__connectionStatus === 'offline') {\n            result = index\n          }\n          return result\n        }, 0)\n        let params = {\n          from: !lastIndexOffline ? 0 : Math.floor(state.messages[lastIndexOffline - 1].timestamp) + 1,\n          to: Math.floor(state.messages[lastIndexOffline + 1].timestamp)\n        }\n        let resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        let data = resp.data\n        errorsCheck(data)\n        commit('setMissingMessages', { data: data.result, index: lastIndexOffline })\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  return {\n    get,\n    pollingGet,\n    getCols,\n    getHistory,\n    initTime,\n    unsubscribePooling,\n    getMissedMessages\n  }\n}\n","export default function ({ Vue, LocalStorage, filterHandler, newMessagesInterseptor }) {\n  function getFromTo (val) {\n    let now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86400000\n    return { from, to }\n  }\n\n  function setMessages (state, data) {\n    if (data && data.length) {\n      if (state.reverse) {\n        data.reverse()\n        if (state.mode === 1) {\n          data[data.length - 1].delimiter = true\n        }\n      }\n      if (state.mode === 1) {\n        Vue.set(state, 'from', Math.floor((data[data.length - 1].timestamp + 1) * 1000))\n        if (state.filter && filterHandler) {\n          data = filterHandler(state.filter, data)\n        }\n      }\n      let messages = state.messages\n      if (state.sortBy && state.mode === 1) {\n        if (data.length > 1) {\n          /* write history for rt mode */\n          messages = messages.concat(data)\n        } else {\n          /* write by sorted field */\n          let message = data[0],\n            fieldName = state.sortBy,\n            length = state.messages.length - 1,\n            index = null,\n            escapeFlag = true\n          if (length > 0) {\n            for (let i = length; i !== 0 || escapeFlag; i--) {\n              if (messages[i][fieldName] > message[fieldName]) {\n                index = i\n                if (i === 0) {\n                  escapeFlag = false\n                }\n              } else {\n                escapeFlag = false\n              }\n            }\n          }\n          if (index) {\n            messages.splice(index, 0, message)\n          } else {\n            messages.push(message)\n          }\n        }\n      } else {\n        messages = messages.concat(data)\n      }\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      if (state.limit && state.mode === 1 && messages.length >= state.limit + (state.limit * 0.1)) { // rt limiting\n        let count = (messages.length - 1) - (state.limit - 1)\n        messages = messages.slice(count)\n        Vue.set(state, 'selected', state.selected.map((index) => index - count))\n      }\n      Vue.set(state, 'messages', messages)\n    } else {\n      if (state.mode === 1) {\n        Vue.set(state, 'from', state.to + 1000)\n      }\n      Vue.set(state, 'messages', [])\n    }\n  }\n\n  function clearMessages (state) {\n    Vue.set(state, 'messages', [])\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      if (state.mode === 1) {\n        if (state.filter) {\n          state.messages.push({ 'x-flespi-filter-prev': state.filter })\n        }\n        if (value) {\n          state.messages.push({ 'x-flespi-filter-next': value })\n        }\n      }\n      Vue.set(state, 'filter', value)\n    }\n  }\n\n  function setMode (state, mode) {\n    switch (mode) {\n      case 0: {\n        let timeObj = state.from ? getFromTo(state.from) : getFromTo()\n        state.from = timeObj.from\n        state.to = timeObj.to\n        clearMessages(state)\n        break\n      }\n      case 1: {\n        let now = Date.now() - 4000\n        state.from = now - 1000\n        state.to = now\n        state.newMessagesCount = 0\n        break\n      }\n    }\n    Vue.set(state, 'mode', mode)\n  }\n\n  function setFrom (state, from) {\n    Vue.set(state, 'from', from)\n  }\n\n  function setTo (state, to) {\n    Vue.set(state, 'to', to)\n  }\n\n  function reqStart () {\n    if (DEV) {\n      console.log('Start Request Channels messages')\n    }\n  }\n\n  function setActive (state, id) {\n    state.newMessagesCount = 0\n    Vue.set(state, 'active', id)\n  }\n\n  function setReverse (state, val) {\n    Vue.set(state, 'reverse', val)\n  }\n\n  function setDate (state, date) {\n    let timeObj = getFromTo(date)\n    state.from = timeObj.from\n    state.to = timeObj.to\n  }\n\n  function dateNext (state) {\n    let timeObj = getFromTo(state.from + 86400000)\n    state.from = timeObj.from\n    state.to = timeObj.to\n  }\n\n  function datePrev (state) {\n    let timeObj = getFromTo(state.from - 86400000)\n    state.from = timeObj.from\n    state.to = timeObj.to\n  }\n\n  function paginationPrev (state, firstTimestamp) {\n    state.reverse = true\n    state.sysFilter += `timestamp>=${getFromTo(state.from).from / 1000}`\n    if (firstTimestamp) {\n      state.from = getFromTo(firstTimestamp).from\n      state.to = firstTimestamp - 1000\n    }\n  }\n\n  function paginationNext (state, lastTimestamp) {\n    state.sysFilter += `timestamp<=${state.to / 1000}`\n    if (lastTimestamp) {\n      state.to = getFromTo(lastTimestamp).to\n      state.from = lastTimestamp + 1000\n    }\n  }\n\n  function postaction (state) {\n    let timeObj = getFromTo(state.from)\n    setFrom(state, state.from || timeObj.from)\n    setTo(state, timeObj.to)\n    if (state.reverse) {\n      setReverse(state, false)\n    }\n    state.sysFilter = ''\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.mode = null\n    state.from = 0\n    state.to = 0\n    state.limit = 1000\n    state.reverse = false\n    await Vue.connector.unsubscribeMessagesChannels(state.active)\n  }\n\n  function setCols (state, cols) {\n    let colsFromStorage = LocalStorage.getItem(state.name)\n    if (!colsFromStorage) {\n      colsFromStorage = {}\n    }\n    colsFromStorage[state.active] = cols\n    LocalStorage.set(state.name, colsFromStorage)\n    Vue.set(state, 'cols', cols)\n  }\n\n  function setSettings (state, channel) {\n    Vue.set(state, 'settings', channel)\n  }\n\n  let updateCols = setCols\n\n  function setNewMessagesCount (state, count) {\n    Vue.set(state, 'newMessagesCount', count)\n  }\n\n  function setOffline (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      setMessages(state, [{ __connectionStatus: 'offline', timestamp: Date.now() / 1000 }])\n    }\n    state.offline = true\n  }\n\n  function setReconnected (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      setMessages(state, [{ __connectionStatus: 'reconnected', timestamp: Date.now() / 1000 }])\n    }\n    state.offline = false\n  }\n\n  function setMissingMessages (state, { data, index }) {\n    data.forEach((val) => {\n      val.__status = 'missed'\n    })\n    state.messages.splice(index + 1, 0, ...data)\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setSortBy (state, field) {\n    Vue.set(state, 'sortBy', field)\n  }\n\n  function clearSortBy (state) {\n    Vue.set(state, 'sortBy', null)\n  }\n\n  return {\n    setOffline,\n    setReconnected,\n    setMissingMessages,\n    setMessages,\n    clearMessages,\n    setLimit,\n    setFilter,\n    setMode,\n    setFrom,\n    setTo,\n    reqStart,\n    setReverse,\n    dateNext,\n    datePrev,\n    paginationPrev,\n    paginationNext,\n    setDate,\n    postaction,\n    clear,\n    setActive,\n    setCols,\n    updateCols,\n    setNewMessagesCount,\n    setSelected,\n    clearSelected,\n    setSortBy,\n    clearSortBy,\n    setSettings\n  }\n}\n","import getActions from './actions'\nimport getMutations from './mutations'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, filterHandler, newMessagesInterseptor }) {\n  let actions = getActions({ Vue, LocalStorage, errorHandler }),\n    mutations = getMutations({ Vue, LocalStorage, filterHandler, newMessagesInterseptor })\n\n  const state = {\n    name: name,\n    isLoading: false,\n    active: 0,\n    messages: [],\n    filter: '',\n    sysFilter: '',\n    settings: {},\n    mode: null,\n    from: 0,\n    to: 0,\n    limit: 1000,\n    reverse: false,\n    cols: [],\n    newMessagesCount: 0,\n    offline: false,\n    selected: [],\n    sortBy: null\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n"],"names":["require$$0","arr","_Array$isArray","i","arr2","Array","length","iter","_isIterable","Object","prototype","toString","call","_Array$from","TypeError","arrayWithoutHoles","iterableToArray","nonIterableSpread","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","_Promise","then","fn","self","this","args","arguments","apply","err","undefined","Vue","LocalStorage","errorHandler","errorsCheck","data","errors","forEach","errObject","Error","reason","state","commit","rootState","token","active","set","cols","colsFromStorage","getItem","name","col","locale","Date","match","addition","slice","connector","gw","getChannels","fields","protocolIdResp","protocolIdData","result","protocol_id","getProtocols","colsResp","colsData","message_parameters","colItem","width","display","description","push","DEV","console","log","params","reverse","count","getChannelsMessages","JSON","stringify","resp","date","now","Math","round","timestamp","from","setHours","to","get","preaction","preactionName","preactionPayload","payload","currentMode","parse","mode","limit","filter","sysFilter","floor","messagesBuffer","loopId","initRenderLoop","setInterval","subscribeMessagesChannels","message","newMessagesCount","rh","clearInterval","unsubscribeMessagesChannels","lastIndexOffline","messages","reduceRight","index","__connectionStatus","pollingGet","getCols","getHistory","initTime","unsubscribePooling","getMissedMessages","filterHandler","newMessagesInterseptor","getFromTo","val","setMessages","delimiter","sortBy","concat","fieldName","escapeFlag","splice","selected","map","clearMessages","clearSelected","setFrom","setTo","setReverse","setCols","setOffline","needPostOfflineMessage","offline","setReconnected","setMissingMessages","__status","setLimit","setFilter","setMode","timeObj","reqStart","dateNext","datePrev","paginationPrev","firstTimestamp","paginationNext","lastTimestamp","setDate","postaction","clear","setActive","id","updateCols","setNewMessagesCount","setSelected","indexes","setSortBy","field","clearSortBy","setSettings","channel","namespaced","isLoading","settings","actions","getActions","mutations","getMutations"],"mappings":"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"}