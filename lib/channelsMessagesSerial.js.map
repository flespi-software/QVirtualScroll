{"version":3,"file":"channelsMessagesSerial.js","sources":["../node_modules/@babel/runtime-corejs2/core-js/array/is-array.js","../node_modules/@babel/runtime-corejs2/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime-corejs2/core-js/array/from.js","../node_modules/@babel/runtime-corejs2/core-js/is-iterable.js","../node_modules/@babel/runtime-corejs2/helpers/iterableToArray.js","../node_modules/@babel/runtime-corejs2/helpers/nonIterableSpread.js","../node_modules/@babel/runtime-corejs2/helpers/toConsumableArray.js","../node_modules/@babel/runtime-corejs2/core-js/promise.js","../node_modules/@babel/runtime-corejs2/helpers/asyncToGenerator.js","../src/store/modules/channelsMessagesSerial/actions.js","../src/store/modules/channelsMessagesSerial/mutations.js","../src/store/modules/channelsMessagesSerial/index.js"],"sourcesContent":["module.exports = require(\"core-js/library/fn/array/is-array\");","var _Array$isArray = require(\"../core-js/array/is-array\");\n\nfunction _arrayWithoutHoles(arr) {\n  if (_Array$isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nmodule.exports = _arrayWithoutHoles;","module.exports = require(\"core-js/library/fn/array/from\");","module.exports = require(\"core-js/library/fn/is-iterable\");","var _Array$from = require(\"../core-js/array/from\");\n\nvar _isIterable = require(\"../core-js/is-iterable\");\n\nfunction _iterableToArray(iter) {\n  if (_isIterable(Object(iter)) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return _Array$from(iter);\n}\n\nmodule.exports = _iterableToArray;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nmodule.exports = _nonIterableSpread;","var arrayWithoutHoles = require(\"./arrayWithoutHoles\");\n\nvar iterableToArray = require(\"./iterableToArray\");\n\nvar nonIterableSpread = require(\"./nonIterableSpread\");\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n\nmodule.exports = _toConsumableArray;","module.exports = require(\"core-js/library/fn/promise\");","var _Promise = require(\"../core-js/promise\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    _Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new _Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","import _get from 'lodash/get'\n\nexport default function ({ Vue, LocalStorage, errorHandler }) {\n  function getParams (state) {\n    const params = {}\n    if (state.limit) {\n      params.count = state.limit\n    }\n    if (state.filter) {\n      params.filter = `${state.filter}`\n    }\n    if (state.from) {\n      params.from = Math.floor(state.from / 1000)\n    }\n    if (state.to) {\n      params.to = Math.floor(state.to / 1000)\n    }\n    if (state.reverse) {\n      params.reverse = state.reverse\n    }\n    return params\n  }\n\n  function errorsCheck (data) {\n    if (data.errors) {\n      data.errors.forEach((error) => {\n        const errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    }\n  }\n\n  function getColsFromLS (state) {\n    let colsFromStorage = {}\n    if (state.lsNamespace) {\n      /* removing old store 12.03.20 */\n      const oldStore = LocalStorage.getItem(state.name)\n      if (oldStore) {\n        colsFromStorage = oldStore\n        LocalStorage.remove(state.name)\n      }\n      const lsPath = state.lsNamespace.split('.'),\n        lsItemName = lsPath.shift(),\n        lsRouteToItem = `${lsPath.join('.')}.${state.name}`,\n        appStorage = LocalStorage.getItem(lsItemName)\n      colsFromStorage = _get(appStorage, lsRouteToItem, colsFromStorage)\n    } else {\n      colsFromStorage = LocalStorage.getItem(state.name) || colsFromStorage\n    }\n    return colsFromStorage\n  }\n\n  async function getCols ({ state, commit, rootState }, sysColsNeedInitFlags) {\n    commit('reqStart')\n    const needEtc = sysColsNeedInitFlags.etc\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const colsFromStorage = getColsFromLS(state)\n        let cols = []\n        const needntMigration = (colsFromStorage && colsFromStorage[state.active] && colsFromStorage[state.active].length) &&\n          (colsFromStorage[state.active][1] && colsFromStorage[state.active][1].unit !== undefined) // type and unit adding 02.09.20\n\n        if (needntMigration) {\n          cols = colsFromStorage[state.active]\n          /* adding sys cols after migration. 12.11.20 */\n          if (cols[0].__dest === 'action') {\n            cols.shift()\n          }\n        } else {\n          const protocolIdResp = await Vue.connector.gw.getChannels(state.active, { fields: 'protocol_id' })\n          const protocolIdData = protocolIdResp.data\n          errorsCheck(protocolIdData)\n          if (protocolIdData.result && protocolIdData.result.length && protocolIdData.result[0].protocol_id) {\n            const colsResp = await Vue.connector.gw.getChannelProtocols(protocolIdData.result[0].protocol_id, { fields: 'message_parameters' })\n            const colsData = colsResp.data\n            errorsCheck(colsData)\n            colsData.result[0].message_parameters.forEach(col => {\n              const colItem = {\n                name: col.name,\n                width: 160,\n                display: state.defaultColsNames.includes(col.name),\n                description: col.info,\n                type: col.type || '',\n                unit: col.unit || ''\n              }\n              if (colItem.name === 'timestamp') {\n                const locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n                colItem.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n                colItem.type = ''\n                colItem.unit = ''\n              }\n              if (colItem.name === 'server.timestamp') {\n                colItem.type = ''\n                colItem.unit = ''\n              }\n              cols.push(colItem)\n            })\n          }\n          cols.push({ name: 'etc', width: 150, display: needEtc, __dest: 'etc' })\n        }\n        commit('setCols', cols)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  function getFromTo (val) {\n    const now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86399999\n    return { from, to }\n  }\n\n  async function initTime ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const params = {\n          reverse: true,\n          count: 1\n        }\n        const resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        let date = Date.now()\n        if (data.result.length) {\n          date = Math.round(data.result[0]['server.timestamp'] * 1000)\n        }\n        const day = getFromTo(date)\n        commit('setFrom', day.from)\n        commit('setTo', day.to)\n        if (day.to < Date.now()) {\n          await newMessagesCheck({ state })\n        }\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function getMessages ({ state, commit, rootState }, params) {\n    commit('reqStart')\n    let result = []\n    if (rootState.token && state.active) {\n      const isLoadingActive = state.isLoading\n      try {\n        !isLoadingActive && Vue.set(state, 'isLoading', true)\n        const resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n        result = data.result || []\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n      }\n    }\n    return result\n  }\n\n  async function get ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      const start = Math.floor(Date.now() / 1000)\n      const params = getParams(state)\n      let messagesCount = 0\n      const messages = await getMessages({ state, commit, rootState }, params)\n      messagesCount += messages.length\n      const now = Math.floor(Date.now() / 1000)\n      const needRT = (params.to >= now && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        const stop = Math.floor(Date.now() / 1000)\n        const params = getParams(state)\n        params.from = start\n        params.to = stop\n        const missedMessages = await getMessages({ state, commit, rootState }, params)\n        messagesCount += missedMessages.length\n        messages.splice(messages.length, 0, ...missedMessages)\n      } else if ((params.to < now || (state.limit && messages.length >= state.limit)) && loopId) {\n        await unsubscribePooling({ state, commit, rootState })\n      }\n      commit('limiting', { type: 'init', count: messagesCount })\n      commit('setHistoryMessages', messages)\n      if (needRT || state.realtimeEnabled) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n    }\n  }\n\n  async function getPrevPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      const to = Math.floor(_get(state, 'messages[0][\"server.timestamp\"]', state.to) - 1)\n      const params = getParams(state)\n      params.to = to\n      params.reverse = true\n      if (loopId && state.messages.length > state.limit * 2) {\n        await unsubscribePooling({ state, commit, rootState })\n        commit('limiting', { type: 'rt_deinit' })\n      }\n      const messages = await getMessages({ state, commit, rootState }, params)\n      if (!messages.length) {\n        Vue.set(state, 'isLoading', false)\n        return 0\n      }\n      commit('limiting', { type: 'prev', count: messages.length })\n      commit('prependMessages', messages)\n      Vue.set(state, 'isLoading', false)\n      return messages.length\n    }\n  }\n\n  async function getNextPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      if (state.realtimeEnabled) { return }\n      Vue.set(state, 'isLoading', true)\n      const start = Date.now()\n      const from = Math.floor(_get(state, `messages[${state.messages.length - 1}]['server.timestamp']`, state.from) + 1)\n      const params = getParams(state)\n      let messagesCount = 0\n      params.from = from\n      const messages = await getMessages({ state, commit, rootState }, params)\n      messagesCount += messages.length\n      const needRT = (params.to > Math.floor(Date.now() / 1000) && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        const stop = Date.now()\n        const params = getParams(state)\n        params.from = Math.floor(start / 1000)\n        params.to = Math.floor(stop / 1000)\n        const missedMessages = await getMessages({ state, commit, rootState }, params)\n        messagesCount += missedMessages.length\n        messages.splice(messages.length, 0, ...missedMessages)\n      }\n      commit('limiting', { type: 'next', count: messagesCount })\n      commit('appendMessages', messages)\n      if (needRT) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n      return messagesCount\n    }\n  }\n\n  async function getHistory ({ state, commit, rootState }, count) {\n    const limit = state.limit\n    commit('clearMessages')\n    commit('setReverse', true)\n    commit('setLimit', count)\n    await get({ state, commit, rootState })\n    commit('setReverse', false)\n    commit('setLimit', limit)\n  }\n\n  let messagesBuffer = [],\n    loopId = 0\n  function initRenderLoop (state, commit) {\n    return setInterval(() => {\n      if (messagesBuffer.length) {\n        commit('setRTMessages', [...messagesBuffer])\n        messagesBuffer = []\n      }\n    }, 500)\n  }\n\n  async function pollingGet ({ state, commit, rootState }) {\n    await Vue.connector.subscribeMessagesChannels(state.active, '+', (message) => {\n      messagesBuffer.push(JSON.parse(message))\n    }, { rh: 2 })\n    state.realtimeEnabled = true\n    return () => {\n      loopId = initRenderLoop(state, commit)\n    }\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    if (loopId) {\n      clearInterval(loopId)\n      messagesBuffer = []\n      loopId = 0\n    }\n    await Vue.connector.unsubscribeMessagesChannels(state.active, '+')\n    state.realtimeEnabled = false\n  }\n\n  /* getting missed messages after offline */\n  async function getMissedMessages ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const lastIndexOffline = state.messages.reduceRight((result, value, index) => {\n          if (result) {\n            return result\n          }\n          if (value.__connectionStatus === 'offline') {\n            result = index\n          }\n          return result\n        }, 0)\n        const params = {\n          from: !lastIndexOffline ? 0 : Math.floor(state.messages[lastIndexOffline - 1]['server.timestamp']) + 1,\n          to: Math.floor(state.messages[lastIndexOffline + 1]['server.timestamp'])\n        }\n        const resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(data)\n        commit('setMissingMessages', { data: data.result, index: lastIndexOffline })\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function newMessagesCheck ({ state }) {\n    state.hasNewMessages = false\n    await Vue.connector.subscribeMessagesChannels(state.active, '+', () => {\n      state.hasNewMessages = true\n      unsubscribePooling({ state })\n    }, { rh: 2 })\n  }\n\n  return {\n    getMessages,\n    get,\n    getPrevPage,\n    getNextPage,\n    pollingGet,\n    getCols,\n    getHistory,\n    initTime,\n    unsubscribePooling,\n    getMissedMessages\n  }\n}\n","import get from 'lodash/get'\nimport set from 'lodash/set'\nexport default function ({ Vue, LocalStorage, filterHandler, newMessagesInterseptor }) {\n  let messagesKeyPointer = 0\n  function messagesIndexing (messages) {\n    if (!messages.length) { return }\n    messages.forEach((message, index) => {\n      messages[index]['x-flespi-message-key'] = messagesKeyPointer++\n    })\n  }\n  function setRTMessages (state, data) {\n    if (data && data.length) {\n      if (state.filter && filterHandler) {\n        data = filterHandler(state.filter, data)\n      }\n      messagesIndexing(data)\n      const messages = state.messages\n      if (state.sortBy) {\n        /* write by sorted field */\n        const message = data[0],\n          fieldName = state.sortBy,\n          length = state.messages.length - 1\n        let index = null,\n          escapeFlag = true\n        if (length > 0) {\n          for (let i = length; i !== 0 || escapeFlag; i--) {\n            if (messages[i][fieldName] > message[fieldName]) {\n              index = i\n              if (i === 0) {\n                escapeFlag = false\n              }\n            } else {\n              escapeFlag = false\n            }\n          }\n        }\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        if (index) {\n          messages.splice(index, 0, ...data)\n        } else {\n          messages.splice(messages.length, 0, ...data)\n        }\n      } else {\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        messages.splice(messages.length, 0, ...data)\n      }\n      limiting(state, { type: 'rt', count: data.length })\n    }\n  }\n\n  function prependMessages (state, data) {\n    if (data && data.length) {\n      data.reverse()\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(0, 0, ...data)\n    }\n  }\n\n  function appendMessages (state, data) {\n    if (data && data.length) {\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(messages.length, 0, ...data)\n    }\n  }\n\n  function setHistoryMessages (state, data) {\n    if (state.reverse) {\n      data.reverse()\n    }\n    messagesIndexing(data)\n    newMessagesInterseptor && newMessagesInterseptor(data)\n    state.messages = data\n  }\n\n  function clearMessages (state) {\n    state.messages.splice(0, state.messages.length)\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function limiting (state, { type, count }) {\n    if (!state.limit) { return false }\n    const messages = state.messages\n    const pages = state.pages\n    switch (type) {\n      case 'init': {\n        state.pages = count ? [count] : []\n        break\n      }\n      case 'prev': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[2]\n          state.pages = [count, ...pages.slice(0, -1)]\n          messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        } else {\n          state.pages = [count, ...pages]\n        }\n        break\n      }\n      case 'next': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[0]\n          state.pages = [...pages.slice(1, 3), count]\n          messages.splice(0, removeMessagesCount)\n        } else if (pagesCount < 3) {\n          pages.push(count)\n        }\n        break\n      }\n      case 'rt_init': {\n        pages.push(0)\n        break\n      }\n      case 'rt_deinit': {\n        const removeMessagesCount = pages.pop()\n        messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        break\n      }\n      case 'rt': {\n        const pagesCount = pages.length\n        const rtCount = pages[pagesCount - 1] || 0\n        if (rtCount + count > state.limit) {\n          if (pagesCount > 3) {\n            const removeMessagesCount = pages[0]\n            state.pages = [...pages.slice(1, -1), rtCount + count, 0]\n            messages.splice(0, removeMessagesCount)\n          } else {\n            state.pages = [...pages.slice(0, -1), rtCount + count, 0]\n          }\n        } else {\n          state.pages[pagesCount - 1] = rtCount + count\n        }\n      }\n    }\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      Vue.set(state, 'filter', value)\n    }\n  }\n\n  function setFrom (state, from) {\n    Vue.set(state, 'from', from)\n  }\n\n  function setTo (state, to) {\n    Vue.set(state, 'to', to)\n  }\n\n  function reqStart () {\n    if (DEV) {\n      console.log('Start Request Channels messages')\n    }\n  }\n\n  function setActive (state, id) {\n    Vue.set(state, 'active', id)\n  }\n\n  function setReverse (state, val) {\n    Vue.set(state, 'reverse', val)\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.from = 0\n    state.to = 0\n    state.limit = 1000\n    state.reverse = false\n    await Vue.connector.unsubscribeMessagesChannels(state.active)\n  }\n\n  function getColsFromLS (state) {\n    let colsFromStorage = {}\n    if (state.lsNamespace) {\n      const lsPath = state.lsNamespace.split('.'),\n        lsItemName = lsPath.shift(),\n        lsRouteToItem = `${lsPath.join('.')}.${state.name}`,\n        appStorage = LocalStorage.getItem(lsItemName)\n      colsFromStorage = get(appStorage, lsRouteToItem, colsFromStorage)\n    } else {\n      colsFromStorage = LocalStorage.getItem(state.name) || colsFromStorage\n    }\n    return colsFromStorage\n  }\n\n  function setColsToLS (state, cols) {\n    const colsFromStorage = getColsFromLS(state)\n    colsFromStorage[state.active] = cols\n    if (state.lsNamespace) {\n      const lsPath = state.lsNamespace.split('.'),\n        lsItemName = lsPath.shift(),\n        lsRouteToItem = `${lsPath.join('.')}.${state.name}`,\n        appStorage = LocalStorage.getItem(lsItemName)\n      set(appStorage, lsRouteToItem, colsFromStorage)\n      LocalStorage.set(lsItemName, appStorage)\n    } else {\n      LocalStorage.set(state.name, colsFromStorage)\n    }\n  }\n\n  function setCols (state, cols) {\n    setColsToLS(state, cols)\n    Vue.set(state, 'cols', cols)\n  }\n\n  function setDefaultCols (state) {\n    state.cols.forEach((col, index) => {\n      if (col.__dest) { return }\n      if (state.defaultColsNames.includes(col.name)) {\n        Vue.set(state.cols[index], 'display', true)\n      } else {\n        Vue.set(state.cols[index], 'display', false)\n      }\n    })\n    updateCols(state, state.cols)\n  }\n\n  function setSettings (state, channel) {\n    Vue.set(state, 'settings', channel)\n  }\n\n  const updateCols = setCols\n\n  function setOffline (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      state.messages.push({ __connectionStatus: 'offline', timestamp: Date.now() / 1000 })\n    }\n    state.offline = true\n  }\n\n  function setReconnected (state, needPostOfflineMessage) {\n    if (needPostOfflineMessage) {\n      state.messages.push({ __connectionStatus: 'reconnected', timestamp: Date.now() / 1000 })\n    }\n    state.offline = false\n  }\n\n  function setMissingMessages (state, { data, index }) {\n    data.forEach((val) => {\n      val['x-flespi-status'] = 'missed'\n    })\n    state.messages.splice(index + 1, 0, ...data)\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setSortBy (state, field) {\n    Vue.set(state, 'sortBy', field)\n  }\n\n  function clearSortBy (state) {\n    Vue.set(state, 'sortBy', null)\n  }\n\n  return {\n    setOffline,\n    setReconnected,\n    setHistoryMessages,\n    setRTMessages,\n    setMissingMessages,\n    prependMessages,\n    appendMessages,\n    clearMessages,\n    setLimit,\n    limiting,\n    setFilter,\n    setFrom,\n    setTo,\n    reqStart,\n    setReverse,\n    clear,\n    setActive,\n    setCols,\n    updateCols,\n    setDefaultCols,\n    setSelected,\n    clearSelected,\n    setSortBy,\n    clearSortBy,\n    setSettings\n  }\n}\n","import getActions from './actions'\nimport getMutations from './mutations'\nimport get from 'lodash/get'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, filterHandler, newMessagesInterseptor }) {\n  const lsNamespace = get(name, 'lsNamespace', undefined)\n  name = get(name, 'name', name)\n  const actions = getActions({ Vue, LocalStorage, errorHandler }),\n    mutations = getMutations({ Vue, LocalStorage, filterHandler, newMessagesInterseptor })\n\n  const state = {\n    name,\n    lsNamespace,\n    isLoading: false,\n    active: 0,\n    messages: [],\n    pages: [],\n    filter: '',\n    settings: {},\n    realtimeEnabled: false,\n    from: 0,\n    to: 0,\n    limit: 1000,\n    reverse: false,\n    cols: [],\n    defaultColsNames: ['timestamp', 'server.timestamp', 'ident', 'position.latitude', 'position.longitude', 'position.altitude', 'position.speed'],\n    offline: false,\n    selected: [],\n    sortBy: null,\n    hasNewMessages: null\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n"],"names":["require$$0","arr","_Array$isArray","i","arr2","Array","length","iter","_isIterable","Object","prototype","toString","call","_Array$from","TypeError","arrayWithoutHoles","iterableToArray","nonIterableSpread","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","_Promise","then","fn","self","this","args","arguments","apply","err","undefined","Vue","LocalStorage","errorHandler","getParams","state","params","limit","count","filter","from","Math","floor","to","reverse","errorsCheck","data","errors","forEach","errObject","Error","reason","getColsFromLS","colsFromStorage","lsNamespace","oldStore","getItem","name","remove","lsPath","split","lsItemName","shift","lsRouteToItem","join","appStorage","_get","sysColsNeedInitFlags","commit","rootState","needEtc","etc","token","active","set","cols","unit","__dest","connector","gw","getChannels","fields","protocolIdResp","protocolIdData","result","protocol_id","getChannelProtocols","colsResp","colsData","message_parameters","col","colItem","width","display","defaultColsNames","includes","description","type","locale","Date","match","addition","slice","push","DEV","console","log","getChannelsMessages","JSON","stringify","resp","date","now","round","setHours","day","newMessagesCheck","getMessages","isLoadingActive","isLoading","get","start","messagesCount","messages","needRT","loopId","startRTRender","pollingGet","stop","missedMessages","splice","unsubscribePooling","realtimeEnabled","messagesBuffer","subscribeMessagesChannels","message","parse","rh","setInterval","clearInterval","unsubscribeMessagesChannels","lastIndexOffline","reduceRight","index","__connectionStatus","hasNewMessages","getPrevPage","getNextPage","getCols","getHistory","initTime","getMissedMessages","filterHandler","newMessagesInterseptor","messagesKeyPointer","messagesIndexing","clearMessages","clearSelected","limiting","pages","removeMessagesCount","pagesCount","pop","rtCount","setColsToLS","setCols","updateCols","setOffline","needPostOfflineMessage","timestamp","offline","setReconnected","setHistoryMessages","setRTMessages","sortBy","fieldName","escapeFlag","setMissingMessages","val","prependMessages","appendMessages","setLimit","setFilter","setFrom","setTo","reqStart","setReverse","clear","setActive","id","setDefaultCols","setSelected","indexes","setSortBy","field","clearSortBy","setSettings","channel","namespaced","settings","selected","actions","getActions","mutations","getMutations"],"mappings":"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"}