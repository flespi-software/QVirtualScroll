{"version":3,"file":"channelsMessagesSerial.js","sources":["../src/store/modules/ls.js","../src/store/modules/channelsMessagesSerial/actions.js","../src/store/modules/channelsMessagesSerial/mutations.js","../src/infrastructure/logger.js","../src/store/modules/channelsMessagesSerial/index.js"],"sourcesContent":["import _get from 'lodash/get'\nimport _set from 'lodash/set'\n\nfunction splitSchemas (cols) {\n  const customColsSchema = {\n    ...cols.schemas,\n    _default: undefined,\n    _protocol: undefined,\n    _unsaved: undefined\n  }\n  const defaultColsSchema = {\n    activeSchema: cols.activeSchema,\n    schemas: {\n      _default: cols.schemas._default,\n      _protocol: cols.schemas._protocol,\n      _unsaved: cols.schemas._unsaved\n    }\n  }\n  return { customColsSchema, defaultColsSchema }\n}\nfunction getColsLS (LocalStorage, lsNamespace, name) {\n  let colsFromStorage = {}\n  if (lsNamespace) {\n    const lsPath = lsNamespace.split('.'),\n      lsItemName = lsPath.shift(),\n      lsRouteToItem = `${lsPath.join('.')}.${name}`,\n      appStorage = LocalStorage.getItem(lsItemName)\n    colsFromStorage = _get(appStorage, lsRouteToItem, colsFromStorage)\n  } else {\n    colsFromStorage = LocalStorage.getItem(name) || colsFromStorage\n  }\n  return colsFromStorage\n}\n\nfunction setColsLS (LocalStorage, lsNamespace, name, active, cols) {\n  const colsFromStorage = getColsLS(LocalStorage, lsNamespace, name) || {}\n  const { customColsSchema, defaultColsSchema } = splitSchemas(cols)\n  colsFromStorage[active] = defaultColsSchema\n  colsFromStorage['custom-cols-schemas'] = { ...customColsSchema }\n  if (lsNamespace) {\n    const lsPath = lsNamespace.split('.'),\n      lsItemName = lsPath.shift(),\n      lsRouteToItem = `${lsPath.join('.')}.${name}`,\n      appStorage = LocalStorage.getItem(lsItemName) || {}\n    _set(appStorage, lsRouteToItem, colsFromStorage)\n    LocalStorage.set(lsItemName, appStorage)\n  } else {\n    LocalStorage.set(name, colsFromStorage)\n  }\n}\n\nexport {\n  getColsLS,\n  setColsLS\n}\n","import _get from 'lodash/get'\nimport { getColsLS, setColsLS } from '../ls'\n\nconst defaultCols = ['timestamp', 'server.timestamp', 'ident', 'position.latitude', 'position.longitude', 'position.altitude', 'position.speed']\nexport default function ({ Vue, LocalStorage, errorHandler, logger }) {\n  function getParams (state) {\n    const params = {}\n    if (state.limit) {\n      params.count = state.limit\n    }\n    if (state.filter) {\n      params.filter = `${state.filter}`\n    }\n    if (state.from) {\n      params.from = state.from / 1000\n    }\n    if (state.to) {\n      params.to = state.to / 1000\n    }\n    if (state.reverse) {\n      params.reverse = state.reverse\n    }\n    return params\n  }\n\n  function errorsCheck (commit, data) {\n    if (data.errors) {\n      commit('reqError', data.errors)\n      data.errors.forEach((error) => {\n        const errObject = new Error(error.reason)\n        errorHandler && errorHandler(errObject)\n      })\n    } else {\n      commit('reqFullfiled')\n    }\n  }\n\n  function getDefaultEnum () {\n    return defaultCols.reduce((res, name) => {\n      res[name] = { name }\n      return res\n    }, {})\n  }\n\n  function getDefaultColsSchema () {\n    return {\n      activeSchema: '_default',\n      schemas: {\n        _default: {\n          name: '_default',\n          cols: defaultCols.map(name => ({ name, width: 150 }))\n        }\n      },\n      enum: getDefaultEnum()\n    }\n  }\n\n  async function getCols ({ state, commit, rootState }, sysColsNeedInitFlags) {\n    const needEtc = sysColsNeedInitFlags.etc\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        let colsFromStorage = getColsLS(LocalStorage, state.lsNamespace, state.name)\n        const customColsSchemas = (colsFromStorage && colsFromStorage['custom-cols-schemas'])\n        ? colsFromStorage['custom-cols-schemas'] : {}\n        colsFromStorage = (colsFromStorage && colsFromStorage[state.active])\n        const colsSchema = colsFromStorage || getDefaultColsSchema()\n        colsSchema.schemas = { ...colsSchema.schemas, ...customColsSchemas }\n        if (!colsSchema.enum) {\n          colsSchema.enum = getDefaultEnum()\n        }\n        const protocolIdResp = await Vue.connector.gw.getChannels(state.active, { fields: 'protocol_id' })\n        commit('reqStart', { endpoint: 'getChannels', active: state.active, fields: 'protocol_id' })\n        const protocolIdData = protocolIdResp.data\n        errorsCheck(commit, protocolIdData)\n        if (protocolIdData.result && protocolIdData.result.length && protocolIdData.result[0].protocol_id) {\n          const colsResp = await Vue.connector.gw.getChannelProtocols(protocolIdData.result[0].protocol_id, { fields: 'message_parameters' })\n          commit('reqStart', { endpoint: 'getChannelProtocols', active: protocolIdData.result[0].protocol_id, fields: 'message_parameters' })\n          const colsData = colsResp.data\n          errorsCheck(commit, colsData)\n          const messageParams = colsData.result[0].message_parameters\n          /* initing columns by message parameters */\n          colsSchema.schemas._protocol = {\n            name: '_protocol',\n            cols: []\n          }\n          const locale = new Date().toString().match(/([-+][0-9]+)\\s/)[1]\n          messageParams.forEach((param) => {\n            const name = param.name\n            const enumCol = {\n              name,\n              type: param.type || '',\n              unit: param.unit || '',\n              description: param.info || ''\n            }\n            const schemaCol = {\n              name,\n              width: 150\n            }\n            if (name.match(/timestamp$/)) {\n              enumCol.addition = `${locale.slice(0, 3)}:${locale.slice(3)}`\n              enumCol.type = ''\n              enumCol.unit = ''\n              schemaCol.width = 190\n              if (name === 'timestamp') {\n                colsSchema.schemas._protocol.cols.unshift(schemaCol)\n                colsSchema.enum.timestamp = enumCol\n                return\n              }\n            }\n            colsSchema.schemas._protocol.cols.push(schemaCol)\n            colsSchema.enum[name] = enumCol\n          })\n        }\n        if (needEtc) {\n          colsSchema.schemas._protocol.cols.push({ name: 'etc', width: 150, __dest: 'etc' })\n          !colsFromStorage && colsSchema.schemas._default.cols.push({ name: 'etc', width: 150, __dest: 'etc' })\n        }\n        colsSchema.enum.etc = { name: 'etc', __dest: 'etc' }\n        commit('setCols', colsSchema)\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  function getFromTo (val) {\n    const now = val || Date.now(),\n      from = new Date(now).setHours(0, 0, 0, 0),\n      to = from + 86399999.999\n    return { from, to }\n  }\n\n  async function initTime ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const params = {\n          reverse: true,\n          count: 1\n        }\n        const resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        commit('reqStart', { endpoint: 'getChannelsMessages-initTime', active: state.active, data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(commit, data)\n        let date = Date.now()\n        if (data.result.length) {\n          date = Math.round(data.result[0]['server.timestamp'] * 1000)\n        }\n        const day = getFromTo(date)\n        commit('setFrom', day.from)\n        commit('setTo', day.to)\n        if (day.to < Date.now()) {\n          await newMessagesCheck({ state })\n        }\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function getMessages ({ state, commit, rootState }, params) {\n    let result = []\n    if (rootState.token && state.active) {\n      const isLoadingActive = state.isLoading\n      try {\n        !isLoadingActive && Vue.set(state, 'isLoading', true)\n        const resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        commit('reqStart', { endpoint: 'getChannelsMessages', active: state.active, data: JSON.stringify(params) })\n        const data = resp.data\n        errorsCheck(commit, data)\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n        result = data.result || []\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        !isLoadingActive && Vue.set(state, 'isLoading', false)\n      }\n    }\n    return result\n  }\n\n  async function getMessagesByInitTimestamp ({ state, commit, rootState }, initTimestamp) {\n    const params = getParams(state)\n    const beforeMessagesParams = {\n      ...params,\n      from: state.from / 1000,\n      to: initTimestamp,\n      reverse: true,\n      count: state.limit / 2\n    }\n    const beforeMessages = await getMessages({ state, commit, rootState }, beforeMessagesParams)\n    const afterMessagesParams = {\n      from: initTimestamp + 0.000001,\n      to: state.to / 1000,\n      count: state.limit - beforeMessages.length\n    }\n    const afterMessages = await getMessages({ state, commit, rootState }, afterMessagesParams)\n    const messages = [...beforeMessages.reverse(), ...afterMessages]\n    return messages\n  }\n\n  async function get ({ state, commit, rootState }, initTimestamp) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      if (loopId) {\n        await unsubscribePooling({ state, commit, rootState })\n      }\n      const start = (Date.now() + 0.000999) / 1000\n      let messagesCount = 0\n      let messages = []\n      const params = getParams(state)\n      if (initTimestamp) {\n        messages = await getMessagesByInitTimestamp({ state, commit, rootState }, initTimestamp)\n      } else {\n        messages = await getMessages({ state, commit, rootState }, params)\n      }\n      messagesCount += messages.length\n      const now = (Date.now() + 0.000999) / 1000\n      const needRT = (params.to >= now && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        if (initTimestamp) {\n          const stop = (Date.now() + 0.000999) / 1000\n          const params = getParams(state)\n          params.from = start\n          params.to = stop\n          const missedMessages = await getMessages({ state, commit, rootState }, params)\n          messagesCount += missedMessages.length\n          messages.splice(0, 0, ...missedMessages)\n        }\n      } else if ((params.to < now || (state.limit && messages.length >= state.limit)) && loopId) {\n        await unsubscribePooling({ state, commit, rootState })\n      }\n      commit('limiting', { type: 'init', count: messagesCount })\n      commit('setHistoryMessages', messages)\n      if (needRT || state.realtimeEnabled) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n    }\n  }\n\n  async function getPrevPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      Vue.set(state, 'isLoading', true)\n      const to = _get(state, 'messages[0][\"server.timestamp\"]', state.to) - 0.000001\n      const params = getParams(state)\n      params.to = to\n      params.reverse = true\n      if (loopId && state.messages.length > state.limit * 2) {\n        await unsubscribePooling({ state, commit, rootState })\n        commit('limiting', { type: 'rt_deinit' })\n      }\n      const messages = await getMessages({ state, commit, rootState }, params)\n      if (!messages.length) {\n        Vue.set(state, 'isLoading', false)\n        return 0\n      }\n      commit('limiting', { type: 'prev', count: messages.length })\n      commit('prependMessages', messages)\n      Vue.set(state, 'isLoading', false)\n      return messages.length\n    }\n  }\n\n  async function getNextPage ({ state, commit, rootState }) {\n    if (!state.isLoading) {\n      if (state.realtimeEnabled) { return }\n      Vue.set(state, 'isLoading', true)\n      const start = Date.now()\n      const from = _get(state, `messages[${state.messages.length - 1}]['server.timestamp']`, state.from) + 0.000001\n      const params = getParams(state)\n      let messagesCount = 0\n      params.from = from\n      const messages = await getMessages({ state, commit, rootState }, params)\n      messagesCount += messages.length\n      const needRT = (params.to + 2 > Math.floor(Date.now() / 1000) && (state.limit && messages.length < state.limit) && !loopId)\n      let startRTRender = () => {}\n      if (needRT) {\n        startRTRender = await pollingGet({ state, commit, rootState })\n        const stop = Date.now()\n        const params = getParams(state)\n        params.from = start / 1000\n        params.to = stop / 1000\n        const missedMessages = await getMessages({ state, commit, rootState }, params)\n        messagesCount += missedMessages.length\n        messages.splice(messages.length, 0, ...missedMessages)\n      }\n      commit('limiting', { type: 'next', count: messagesCount })\n      commit('appendMessages', messages)\n      if (needRT) {\n        startRTRender()\n        commit('limiting', { type: 'rt_init' })\n      }\n      Vue.set(state, 'isLoading', false)\n      return messagesCount\n    }\n  }\n\n  async function getHistory ({ state, commit, rootState }, count) {\n    const limit = state.limit\n    commit('clearMessages')\n    commit('setReverse', true)\n    commit('setLimit', count)\n    await get({ state, commit, rootState })\n    commit('setReverse', false)\n    commit('setLimit', limit)\n  }\n\n  let messagesBuffer = [],\n    loopId = 0\n  function initRenderLoop (state, commit) {\n    return setInterval(() => {\n      if (messagesBuffer.length) {\n        commit('setRTMessages', [...messagesBuffer])\n        messagesBuffer = []\n      }\n    }, 500)\n  }\n\n  async function pollingGet ({ state, commit }) {\n    const filter = state.filter ? `$filter/payload=${encodeURIComponent(state.filter)}` : undefined\n    await Vue.connector.subscribeMessagesChannels(state.active, '+', (message) => {\n      messagesBuffer.push(JSON.parse(message))\n    }, { rh: 2, prefix: filter })\n    state.realtimeEnabled = true\n    logger.info(`subscribed to messagesChannels ${state.active} ${filter || ''}`)\n    return () => {\n      loopId = initRenderLoop(state, commit)\n    }\n  }\n\n  /* unsubscribe from current active topic */\n  async function unsubscribePooling ({ state }) {\n    if (loopId) {\n      clearInterval(loopId)\n      messagesBuffer = []\n      loopId = 0\n    }\n    const filter = state.filter ? `$filter/payload=${encodeURIComponent(state.filter)}` : undefined\n    await Vue.connector.unsubscribeMessagesChannels(state.active, '+', undefined, { prefix: filter })\n    state.realtimeEnabled = false\n    logger.info(`unsubscribed to messagesChannels ${state.active} ${filter || ''}`)\n  }\n\n  /* getting missed messages after offline */\n  async function getMissedMessages ({ state, commit, rootState }) {\n    if (rootState.token && state.active) {\n      try {\n        Vue.set(state, 'isLoading', true)\n        const { start, end, lastMessageIndex } = state.offline\n        const params = {\n          from: start,\n          to: end\n        }\n        if (state.filter) { params.data.filter = state.filter }\n        const resp = await Vue.connector.gw.getChannelsMessages(state.active, { data: JSON.stringify(params) })\n        const data = resp.data\n        commit('reqStart', { endpoint: 'getChannelsMessages', active: state.active, data: JSON.stringify(params) })\n        errorsCheck(commit, data)\n        commit('setMissingMessages', { data: data.result, index: lastMessageIndex })\n        Vue.set(state, 'isLoading', false)\n      } catch (e) {\n        errorHandler && errorHandler(e)\n        if (DEV) { console.log(e) }\n        Vue.set(state, 'isLoading', false)\n      }\n    }\n  }\n\n  async function newMessagesCheck ({ state }) {\n    state.hasNewMessages = false\n    await Vue.connector.subscribeMessagesChannels(state.active, '+', () => {\n      state.hasNewMessages = true\n      unsubscribePooling({ state })\n    }, { rh: 2 })\n    logger.info(`newMessagesCheck subscribed to messagesChannels ${state.active}`)\n  }\n\n  return {\n    getMessages,\n    get,\n    getPrevPage,\n    getNextPage,\n    pollingGet,\n    getCols,\n    getHistory,\n    getMessagesByInitTimestamp,\n    initTime,\n    unsubscribePooling,\n    getMissedMessages\n  }\n}\n","import { setColsLS } from '../ls'\nexport default function ({ Vue, LocalStorage, newMessagesInterseptor, logger }) {\n  let messagesKeyPointer = 0\n  function messagesIndexing (messages) {\n    if (!messages.length) { return }\n    messages.forEach((message, index) => {\n      Object.defineProperty(messages[index], 'x-flespi-message-key', {\n        value: messagesKeyPointer++,\n        enumerable: false\n      })\n    })\n  }\n  function setRTMessages (state, data) {\n    if (data && data.length) {\n      messagesIndexing(data)\n      const messages = state.messages\n      if (state.sortBy) {\n        /* write by sorted field */\n        const message = data[0],\n          fieldName = state.sortBy,\n          length = state.messages.length - 1\n        let index = null,\n          escapeFlag = true\n        if (length > 0) {\n          for (let i = length; i !== 0 || escapeFlag; i--) {\n            if (messages[i][fieldName] > message[fieldName]) {\n              index = i\n              if (i === 0) {\n                escapeFlag = false\n              }\n            } else {\n              escapeFlag = false\n            }\n          }\n        }\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        if (index) {\n          messages.splice(index, 0, ...data)\n        } else {\n          messages.splice(messages.length, 0, ...data)\n        }\n      } else {\n        newMessagesInterseptor && newMessagesInterseptor(data)\n        messages.splice(messages.length, 0, ...data)\n      }\n      limiting(state, { type: 'rt', count: data.length })\n      logger.info(`setRTMessages: length: ${data.length}`)\n    }\n  }\n\n  function prependMessages (state, data) {\n    if (data && data.length) {\n      data.reverse()\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(0, 0, ...data)\n    }\n    logger.info(`prependMessages: length: ${data.length}`)\n  }\n\n  function appendMessages (state, data) {\n    if (data && data.length) {\n      const messages = state.messages\n      messagesIndexing(data)\n      newMessagesInterseptor && newMessagesInterseptor(data)\n      messages.splice(messages.length, 0, ...data)\n    }\n    logger.info(`appendMessages: length: ${data.length}`)\n  }\n\n  function setHistoryMessages (state, data) {\n    if (state.reverse) {\n      data.reverse()\n    }\n    messagesIndexing(data)\n    newMessagesInterseptor && newMessagesInterseptor(data)\n    state.messages = data\n    logger.info(`setHistoryMessages: length: ${data.length}, reverse:${state.reverse}`)\n  }\n\n  function clearMessages (state) {\n    state.messages.splice(0, state.messages.length)\n    newMessagesInterseptor && newMessagesInterseptor([])\n    clearSelected(state)\n    logger.info(`clearMessages`)\n  }\n\n  function setLimit (state, count) {\n    Vue.set(state, 'limit', count)\n  }\n\n  function limiting (state, { type, count }) {\n    if (!state.limit) { return false }\n    const messages = state.messages\n    const pages = state.pages\n    switch (type) {\n      case 'init': {\n        state.pages = count ? [count] : []\n        break\n      }\n      case 'prev': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[2]\n          state.pages = [count, ...pages.slice(0, -1)]\n          messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        } else {\n          state.pages = [count, ...pages]\n        }\n        break\n      }\n      case 'next': {\n        if (!count) { break }\n        const pagesCount = pages.length\n        if (pagesCount === 3) {\n          const removeMessagesCount = pages[0]\n          state.pages = [...pages.slice(1, 3), count]\n          messages.splice(0, removeMessagesCount)\n        } else if (pagesCount < 3) {\n          pages.push(count)\n        }\n        break\n      }\n      case 'rt_init': {\n        pages.push(0)\n        break\n      }\n      case 'rt_deinit': {\n        const removeMessagesCount = pages.pop()\n        messages.splice(messages.length - removeMessagesCount, removeMessagesCount)\n        break\n      }\n      case 'rt': {\n        const pagesCount = pages.length\n        const rtCount = pages[pagesCount - 1] || 0\n        if (rtCount + count > state.limit) {\n          if (pagesCount > 3) {\n            const removeMessagesCount = pages[0]\n            state.pages = [...pages.slice(1, -1), rtCount + count, 0]\n            messages.splice(0, removeMessagesCount)\n          } else {\n            state.pages = [...pages.slice(0, -1), rtCount + count, 0]\n          }\n        } else {\n          state.pages[pagesCount - 1] = rtCount + count\n        }\n      }\n    }\n    logger.info(`limiting: ${type} - count: ${count}`)\n  }\n\n  function setFilter (state, value) {\n    if (state.filter !== value) {\n      Vue.set(state, 'filter', value)\n    }\n    logger.info(`setFilter: ${value}`)\n  }\n\n  function setFrom (state, from) {\n    Vue.set(state, 'from', from)\n    logger.info(`setFrom: ${from}`)\n  }\n\n  function setTo (state, to) {\n    Vue.set(state, 'to', to)\n    logger.info(`setTo: ${to}`)\n  }\n\n  function reqStart (state, params) {\n    logger.info(`reqStart: ${JSON.stringify(params)}`)\n  }\n\n  function reqFullfiled () {\n    logger.info(`reqFullfiled`)\n  }\n\n  function reqError (state, error) {\n    logger.info(`reqError: ${JSON.stringify(error)}`)\n  }\n\n  function setActive (state, id) {\n    Vue.set(state, 'active', id)\n    logger.info(`setActive: ${id}`)\n  }\n\n  function setReverse (state, val) {\n    Vue.set(state, 'reverse', val)\n    logger.info(`setReverse: ${val}`)\n  }\n\n  async function clear (state) {\n    clearMessages(state)\n    state.filter = ''\n    state.from = 0\n    state.to = 0\n    state.limit = 1000\n    state.reverse = false\n    await Vue.connector.unsubscribeMessagesChannels(state.active)\n    logger.info(`clear module`)\n    logger.info(`unsubscribeMessagesChannels ${state.active}`)\n  }\n\n  function setCols (state, cols) {\n    setColsLS(LocalStorage, state.lsNamespace, state.name, state.active, cols)\n    Vue.set(state, 'cols', cols)\n  }\n\n  function setSettings (state, channel) {\n    Vue.set(state, 'settings', channel)\n    logger.info(`setSettings: ${channel}`)\n  }\n\n  const updateCols = setCols\n\n  function setOffline (state) {\n    state.offline = {\n      start: Date.now() / 1000,\n      lastMessageIndex: state.messages.length - 1\n    }\n    logger.info(`setOffline`)\n  }\n\n  function setReconnected (state) {\n    state.offline.end = Date.now() / 1000\n    logger.info(`setReconnected`)\n  }\n\n  function clearOfflineState (state) {\n    state.offline = false\n  }\n\n  function setMissingMessages (state, { data, index }) {\n    state.messages.splice(index + 1, 0, ...data)\n    logger.info(`setMissingMessages: ${data.length}`)\n  }\n\n  function setSelected (state, indexes) {\n    Vue.set(state, 'selected', indexes)\n  }\n\n  function clearSelected (state) {\n    Vue.set(state, 'selected', [])\n  }\n\n  function setSortBy (state, field) {\n    Vue.set(state, 'sortBy', field)\n  }\n\n  function clearSortBy (state) {\n    Vue.set(state, 'sortBy', null)\n  }\n\n  return {\n    setOffline,\n    setReconnected,\n    clearOfflineState,\n    setHistoryMessages,\n    setRTMessages,\n    setMissingMessages,\n    prependMessages,\n    appendMessages,\n    clearMessages,\n    setLimit,\n    limiting,\n    setFilter,\n    setFrom,\n    setTo,\n    reqStart,\n    reqFullfiled,\n    reqError,\n    setReverse,\n    clear,\n    setActive,\n    setCols,\n    updateCols,\n    setSelected,\n    clearSelected,\n    setSortBy,\n    clearSortBy,\n    setSettings\n  }\n}\n","export class Logger {\n  constructor (name = 'ModuleLogger') {\n    this.name = `[${name}]`\n  }\n\n  extendName (suffix) {\n    return new Logger(`${this.name}[${suffix}]`)\n  }\n\n  info () {\n    console.info(...Array.from(arguments).map(msg => `${this.name} ${msg}`))\n  }\n\n  error () {\n    console.error(...Array.from(arguments).map(msg => `${this.name} ${msg}`))\n  }\n\n  warn () {\n    console.warn(...Array.from(arguments).map(msg => `${this.name} ${msg}`))\n  }\n}\n","import getActions from './actions'\nimport getMutations from './mutations'\nimport get from 'lodash/get'\nimport Vue from 'vue'\nimport { Logger } from '../../../infrastructure/logger'\n\nexport default function ({ Vue, LocalStorage, name, errorHandler, newMessagesInterseptor }) {\n  const lsNamespace = get(name, 'lsNamespace', undefined)\n  name = get(name, 'name', name)\n  const logger = Vue.$logger ? Vue.$logger.extendName(name) : new Logger(name)\n  const actions = getActions({ Vue, LocalStorage, errorHandler, logger }),\n    mutations = getMutations({ Vue, LocalStorage, newMessagesInterseptor, logger })\n\n  const state = {\n    name,\n    lsNamespace,\n    isLoading: false,\n    active: 0,\n    messages: [],\n    pages: [],\n    filter: '',\n    settings: {},\n    realtimeEnabled: false,\n    from: 0,\n    to: 0,\n    limit: 1000,\n    reverse: false,\n    cols: undefined,\n    offline: false,\n    selected: [],\n    sortBy: null,\n    hasNewMessages: null\n  }\n\n  return {\n    namespaced: true,\n    state,\n    actions,\n    mutations\n  }\n}\n"],"names":["getColsLS","LocalStorage","lsNamespace","name","colsFromStorage","lsPath","split","lsItemName","shift","lsRouteToItem","join","appStorage","getItem","_get","defaultCols","getActions","Vue","errorHandler","logger","getParams","state","params","limit","count","filter","from","to","reverse","errorsCheck","commit","data","errors","forEach","error","errObject","Error","reason","getDefaultEnum","reduce","res","async","getMessages","rootState","result","token","active","isLoadingActive","isLoading","set","resp","connector","gw","getChannelsMessages","JSON","stringify","endpoint","e","DEV","console","log","getMessagesByInitTimestamp","initTimestamp","beforeMessagesParams","beforeMessages","afterMessagesParams","length","afterMessages","get","loopId","unsubscribePooling","start","Date","now","messagesCount","messages","needRT","startRTRender","pollingGet","stop","missedMessages","splice","type","realtimeEnabled","messagesBuffer","encodeURIComponent","undefined","subscribeMessagesChannels","message","push","parse","rh","prefix","info","setInterval","initRenderLoop","clearInterval","unsubscribeMessagesChannels","getPrevPage","getNextPage","Math","floor","getCols","sysColsNeedInitFlags","needEtc","etc","customColsSchemas","colsSchema","activeSchema","schemas","_default","cols","map","width","enum","protocolIdResp","getChannels","fields","protocolIdData","protocol_id","colsResp","getChannelProtocols","colsData","messageParams","message_parameters","_protocol","locale","toString","match","param","enumCol","unit","description","schemaCol","addition","slice","unshift","timestamp","__dest","getHistory","initTime","date","round","day","val","setHours","getFromTo","hasNewMessages","newMessagesCheck","getMissedMessages","end","lastMessageIndex","offline","index","getMutations","newMessagesInterseptor","messagesKeyPointer","messagesIndexing","Object","defineProperty","value","enumerable","clearMessages","clearSelected","limiting","pages","removeMessagesCount","pagesCount","pop","rtCount","setCols","customColsSchema","defaultColsSchema","_unsaved","splitSchemas","_set","setColsLS","setOffline","setReconnected","clearOfflineState","setHistoryMessages","setRTMessages","sortBy","fieldName","escapeFlag","i","setMissingMessages","prependMessages","appendMessages","setLimit","setFilter","setFrom","setTo","reqStart","reqFullfiled","reqError","setReverse","clear","setActive","id","updateCols","setSelected","indexes","setSortBy","field","clearSortBy","setSettings","channel","Logger","constructor","this","extendName","suffix","Array","arguments","msg","warn","$logger","namespaced","settings","selected","actions","mutations"],"mappings":"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"}